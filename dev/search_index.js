var documenterSearchIndex = {"docs":
[{"location":"climate/microclimate/#microclimate_page","page":"Micro-climate","title":"Micro-climate","text":"","category":"section"},{"location":"climate/microclimate/","page":"Micro-climate","title":"Micro-climate","text":"using PlantBiophysics","category":"page"},{"location":"climate/microclimate/","page":"Micro-climate","title":"Micro-climate","text":"The micro-climatic/meteorological conditions measured close to the object or component are given as the second argument of the simulation functions shown earlier.","category":"page"},{"location":"climate/microclimate/","page":"Micro-climate","title":"Micro-climate","text":"PlantBiophysics provides its own data structure to declare those conditions, and to pre-compute other required variables. This data structure is a type called Atmosphere.","category":"page"},{"location":"climate/microclimate/","page":"Micro-climate","title":"Micro-climate","text":"The mandatory variables to provide are: T (air temperature in °C), Rh (relative humidity, 0-1), Wind (the wind speed in m s-1) and P (the air pressure in kPa).","category":"page"},{"location":"climate/microclimate/","page":"Micro-climate","title":"Micro-climate","text":"We can declare such conditions using Atmosphere such as:","category":"page"},{"location":"climate/microclimate/","page":"Micro-climate","title":"Micro-climate","text":"meteo = Atmosphere(T = 20.0, Wind = 1.0, P = 101.3, Rh = 0.65)","category":"page"},{"location":"climate/microclimate/","page":"Micro-climate","title":"Micro-climate","text":"The Atmosphere also computes other variables based on the provided conditions, such as the vapor pressure deficit (VPD) or the air density (ρ). You can also provide those variables as inputs if necessary. For example if you need another way of computing the VPD, you can provide it as follows:","category":"page"},{"location":"climate/microclimate/","page":"Micro-climate","title":"Micro-climate","text":"Atmosphere(T = 20.0, Wind = 1.0, P = 101.3, Rh = 0.65, VPD = 0.82)","category":"page"},{"location":"climate/microclimate/","page":"Micro-climate","title":"Micro-climate","text":"To access the values of the variables after instantiation, we can use the dot syntax. For example if we need the vapor pressure at saturation, we would do as follows:","category":"page"},{"location":"climate/microclimate/","page":"Micro-climate","title":"Micro-climate","text":"meteo.eₛ","category":"page"},{"location":"climate/microclimate/","page":"Micro-climate","title":"Micro-climate","text":"See the documentation of the function if you need more information about the variables: Atmosphere.","category":"page"},{"location":"climate/microclimate/","page":"Micro-climate","title":"Micro-climate","text":"If you want to simulate several time-steps with varying conditions, you can do so by using Weather instead of Atmosphere.","category":"page"},{"location":"climate/microclimate/","page":"Micro-climate","title":"Micro-climate","text":"Weather is just an array of Atmosphere along with some optional metadata. For example for three time-steps, we can declare it like so:","category":"page"},{"location":"climate/microclimate/","page":"Micro-climate","title":"Micro-climate","text":"w = Weather(\n    [\n        Atmosphere(T = 20.0, Wind = 1.0, P = 101.3, Rh = 0.65),\n        Atmosphere(T = 23.0, Wind = 1.5, P = 101.3, Rh = 0.60),\n        Atmosphere(T = 25.0, Wind = 3.0, P = 101.3, Rh = 0.55)\n    ],\n    (\n        site = \"Montpellier\",\n        other_info = \"another crucial metadata\"\n    )\n)","category":"page"},{"location":"climate/microclimate/","page":"Micro-climate","title":"Micro-climate","text":"As you see the first argument is an array of Atmosphere, and the second is a named tuple of optional metadata such as the site or whatever you think is important.","category":"page"},{"location":"climate/microclimate/","page":"Micro-climate","title":"Micro-climate","text":"A Weather can also be declared from a DataFrame, provided each row is an observation from a time-step, and each column is a variable needed for Atmosphere (see the help of Atmosphere for more details on the possible variables and their units).","category":"page"},{"location":"climate/microclimate/","page":"Micro-climate","title":"Micro-climate","text":"Here's an example of using a DataFrame as input:","category":"page"},{"location":"climate/microclimate/","page":"Micro-climate","title":"Micro-climate","text":"using CSV, DataFrames\nfile = joinpath(dirname(dirname(pathof(PlantBiophysics))),\"test\",\"inputs\",\"meteo.csv\")\ndf = CSV.read(file, DataFrame; header=5, datarow = 6)\n# Select and rename the variables:\nselect!(df, :date, :temperature => :T, :relativeHumidity => (x -> x ./ 100 ) => :Rh, :wind => :Wind, :atmosphereCO2_ppm => :Cₐ)\ndf[!,:duration] .= 1800 # Add the time-step duration, 30min\n\n# Make the weather, and add some metadata:\nWeather(df, (site = \"Aquiares\", file = file))","category":"page"},{"location":"climate/microclimate/","page":"Micro-climate","title":"Micro-climate","text":"One can also directly import the Weather from an Archimed-ϕ-formatted meteorology file (a csv file optionally enriched with some metadata). In this case, the user can rename and transform the variables from the file to match the names and units needed in PlantBiophysics using a DataFrame.jl-alike syntax:","category":"page"},{"location":"climate/microclimate/","page":"Micro-climate","title":"Micro-climate","text":"using Dates\n\nmeteo = read_weather(\n    joinpath(dirname(dirname(pathof(PlantBiophysics))),\"test\",\"inputs\",\"meteo.csv\"),\n    :temperature => :T,\n    :relativeHumidity => (x -> x ./100) => :Rh,\n    :wind => :Wind,\n    :atmosphereCO2_ppm => :Cₐ,\n    date_format = DateFormat(\"yyyy/mm/dd\")\n)","category":"page"},{"location":"climate/microclimate/#Helper-functions","page":"Micro-climate","title":"Helper functions","text":"","category":"section"},{"location":"climate/microclimate/","page":"Micro-climate","title":"Micro-climate","text":"PlantBiophysics provides some helper functions to compute some micro-climate related variables.","category":"page"},{"location":"climate/microclimate/","page":"Micro-climate","title":"Micro-climate","text":"Here is a complete list of these functions:","category":"page"},{"location":"climate/microclimate/","page":"Micro-climate","title":"Micro-climate","text":"vapor_pressure computes e (kPa), the vapor pressure from the air temperature and the relative humidity\ne_sat computes eₛ (kPa), the saturated vapor pressure from the air temperature\nair_density computes ρ (kg m-3), the air density from the air temperature, the pressure, and some constants\nlatent_heat_vaporization computes λ (J kg-1), the latent heat of vaporization from the air temperature and a constant\npsychrometer_constant computes γ (kPa K−1), the psychrometer \"constant\" from the air pressure, the latent heat of vaporization and some constants\natmosphere_emissivity(T,e,constants.K₀) computes ε (0-1), the atmosphere emissivity from the air temperature, the vapor pressure and a constant\ne_sat_slope computes Δ (0-1), the slope of the saturation vapor pressure at air temperature, from the air temperature","category":"page"},{"location":"climate/microclimate/","page":"Micro-climate","title":"Micro-climate","text":"note: Note\nAll constants are found in Constants","category":"page"},{"location":"getting_started/first_fit/#First-parameter-fitting","page":"Parameter fitting","title":"First parameter fitting","text":"","category":"section"},{"location":"getting_started/first_fit/","page":"Parameter fitting","title":"Parameter fitting","text":"using PlantBiophysics","category":"page"},{"location":"getting_started/first_fit/","page":"Parameter fitting","title":"Parameter fitting","text":"Parameter fitting is also at the heart of the package, because why making a simulation without good parameter values?","category":"page"},{"location":"getting_started/first_fit/","page":"Parameter fitting","title":"Parameter fitting","text":"The package provides a fit method that helps fitting model parameters to data.","category":"page"},{"location":"getting_started/first_fit/","page":"Parameter fitting","title":"Parameter fitting","text":"For example we provide a method to fit the parameters from the Farquhar et al. (1980) model (Fvcb). Here is an example usage:","category":"page"},{"location":"getting_started/first_fit/","page":"Parameter fitting","title":"Parameter fitting","text":"using PlantBiophysics, DataFrames\n\ndf = read_walz(joinpath(dirname(dirname(pathof(PlantBiophysics))),\"test\",\"inputs\",\"data\",\"P1F20129.csv\"))\n# Removing the Rh and light curves for the fitting because temperature varies\nfilter!(x -> x.curve != \"Rh Curve\" && x.curve != \"ligth Curve\", df)\n\n# Fit the parameter values:\nVcMaxRef, JMaxRef, RdRef, TPURef = fit(Fvcb, df; Tᵣ = 25.0)","category":"page"},{"location":"getting_started/first_fit/","page":"Parameter fitting","title":"Parameter fitting","text":"The fitting method uses the leaf temperature (Tₗ, °C), the Photosynthetic Photon Flux Density (PPFD, μmol m⁻² s⁻¹) and the intercellular CO₂ concentration (Cᵢ, ppm) from the data to fit the four main parameters of the model.","category":"page"},{"location":"getting_started/first_fit/#Wrap-up","page":"Parameter fitting","title":"Wrap-up","text":"","category":"section"},{"location":"getting_started/first_fit/","page":"Parameter fitting","title":"Parameter fitting","text":"We learned to make a simple parameter fitting. For more information, you can head over the Parameter fitting section.","category":"page"},{"location":"fitting/parameter_fitting/#Parameter-fitting","page":"Tutorial: Parameter fitting","title":"Parameter fitting","text":"","category":"section"},{"location":"fitting/parameter_fitting/","page":"Tutorial: Parameter fitting","title":"Tutorial: Parameter fitting","text":"using PlantBiophysics","category":"page"},{"location":"fitting/parameter_fitting/#The-fit-method","page":"Tutorial: Parameter fitting","title":"The fit method","text":"","category":"section"},{"location":"fitting/parameter_fitting/","page":"Tutorial: Parameter fitting","title":"Tutorial: Parameter fitting","text":"The package provides a generic fit function to calibrate a model using user data.","category":"page"},{"location":"fitting/parameter_fitting/","page":"Tutorial: Parameter fitting","title":"Tutorial: Parameter fitting","text":"The generic function takes several parameters:","category":"page"},{"location":"fitting/parameter_fitting/","page":"Tutorial: Parameter fitting","title":"Tutorial: Parameter fitting","text":"the model type, e.g. FvCB\na DataFrame with the data (depends on the given method)\nkeyword arguments (also depend on the fit method)","category":"page"},{"location":"fitting/parameter_fitting/#Example-with-FvCB","page":"Tutorial: Parameter fitting","title":"Example with FvCB","text":"","category":"section"},{"location":"fitting/parameter_fitting/","page":"Tutorial: Parameter fitting","title":"Tutorial: Parameter fitting","text":"A fit method is provided by the package to calibrate the parameters of the FvCB model (Farquhar et al., 1980).","category":"page"},{"location":"fitting/parameter_fitting/","page":"Tutorial: Parameter fitting","title":"Tutorial: Parameter fitting","text":"Here is an example usage from the documentation of the method:","category":"page"},{"location":"fitting/parameter_fitting/","page":"Tutorial: Parameter fitting","title":"Tutorial: Parameter fitting","text":"using PlantBiophysics, DataFrames, Plots\n\ndf = read_walz(joinpath(dirname(dirname(pathof(PlantBiophysics))),\"test\",\"inputs\",\"data\",\"P1F20129.csv\"))\n# Removing the Rh and light curves for the fitting because temperature varies\nfilter!(x -> x.curve != \"Rh Curve\" && x.curve != \"ligth Curve\", df)\n\n# Fit the parameter values:\nVcMaxRef, JMaxRef, RdRef, TPURef = fit(Fvcb, df; Tᵣ = 25.0)","category":"page"},{"location":"fitting/parameter_fitting/","page":"Tutorial: Parameter fitting","title":"Tutorial: Parameter fitting","text":"Now that our parameters are optimized, we can check how close to the data a simulation would get.","category":"page"},{"location":"fitting/parameter_fitting/","page":"Tutorial: Parameter fitting","title":"Tutorial: Parameter fitting","text":"First, let's select only the data used for the CO₂ curve:","category":"page"},{"location":"fitting/parameter_fitting/","page":"Tutorial: Parameter fitting","title":"Tutorial: Parameter fitting","text":"# Checking the results:\nfilter!(x -> x.curve == \"CO2 Curve\", df)\nnothing # hide","category":"page"},{"location":"fitting/parameter_fitting/","page":"Tutorial: Parameter fitting","title":"Tutorial: Parameter fitting","text":"Now let's re-simulate the assimilation with our optimized parameter values:","category":"page"},{"location":"fitting/parameter_fitting/","page":"Tutorial: Parameter fitting","title":"Tutorial: Parameter fitting","text":"leaf =\n    ModelList(\n        photosynthesis = FvcbRaw(VcMaxRef = VcMaxRef, JMaxRef = JMaxRef, RdRef = RdRef, TPURef = TPURef),\n        status = (Tₗ = df.Tₗ, PPFD = df.PPFD, Cᵢ = df.Cᵢ)\n    )\nphotosynthesis!(leaf)\ndf_sim = DataFrame(leaf);","category":"page"},{"location":"fitting/parameter_fitting/","page":"Tutorial: Parameter fitting","title":"Tutorial: Parameter fitting","text":"Finally, we can make an A-Cᵢ plot using our custom ACi structure as follows:","category":"page"},{"location":"fitting/parameter_fitting/","page":"Tutorial: Parameter fitting","title":"Tutorial: Parameter fitting","text":"aci = PlantBiophysics.ACi(VcMaxRef, JMaxRef, RdRef, df[:,:A], df_sim[:,:A], df[:,:Cᵢ], df_sim[:,:Cᵢ])\nplot(aci, leg=:bottomright)","category":"page"},{"location":"fitting/parameter_fitting/","page":"Tutorial: Parameter fitting","title":"Tutorial: Parameter fitting","text":"Our simulation fits very closely the observations, nice!","category":"page"},{"location":"fitting/parameter_fitting/","page":"Tutorial: Parameter fitting","title":"Tutorial: Parameter fitting","text":"There are another implementation of the FvCB model in our package. One that couples the photosynthesis with the stomatal conductance. And this one computes Cᵢ too. Let's check if it works with this one too by using dummy parameter values for the conductance model:","category":"page"},{"location":"fitting/parameter_fitting/","page":"Tutorial: Parameter fitting","title":"Tutorial: Parameter fitting","text":"leaf = ModelList(\n        photosynthesis = Fvcb(VcMaxRef = VcMaxRef, JMaxRef = JMaxRef, RdRef = RdRef, Tᵣ = 25.0, TPURef = TPURef),\n        stomatal_conductance = Medlyn(0.03, 12.),\n        status = (Tₗ = df.Tₗ, PPFD = df.PPFD, Cₛ = df.Cₐ, Dₗ = 0.1)\n    )\n\nw = Weather(select(df, :T, :P, :Rh, :Cₐ, :T => (x -> 10) => :Wind))\nphotosynthesis!(leaf, w)\ndf_sim2 = DataFrame(leaf)\n\naci2 = PlantBiophysics.ACi(VcMaxRef, JMaxRef, RdRef, df[:,:A], df_sim2[:,:A], df[:,:Cᵢ], df_sim2[:,:Cᵢ])\nplot(aci2, leg = :bottomright)","category":"page"},{"location":"fitting/parameter_fitting/","page":"Tutorial: Parameter fitting","title":"Tutorial: Parameter fitting","text":"We can see the results differ a bit, but it is because we add a lot more computation here, hence adding some degrees of liberty.","category":"page"},{"location":"getting_started/get_started/#First-simulation","page":"TL;DR","title":"First simulation","text":"","category":"section"},{"location":"getting_started/get_started/","page":"TL;DR","title":"TL;DR","text":"using PlantBiophysics\nusing Dates","category":"page"},{"location":"getting_started/get_started/","page":"TL;DR","title":"TL;DR","text":"Make your first simulation for a leaf energy balance, photosynthesis and stomatal conductance altogether with few lines of codes:","category":"page"},{"location":"getting_started/get_started/","page":"TL;DR","title":"TL;DR","text":"using PlantBiophysics, Dates\n\nmeteo = read_weather(\n    joinpath(dirname(dirname(pathof(PlantBiophysics))),\"test\",\"inputs\",\"meteo.csv\"),\n    :temperature => :T,\n    :relativeHumidity => (x -> x ./100) => :Rh,\n    :wind => :Wind,\n    :atmosphereCO2_ppm => :Cₐ,\n    :Re_SW_f => :Ri_SW_f,\n    date_format = DateFormat(\"yyyy/mm/dd\")\n)\n\nleaf = ModelList(\n        energy_balance = Monteith(),\n        photosynthesis = Fvcb(),\n        stomatal_conductance = Medlyn(0.03, 7.0),\n        status = (\n            Rₛ = meteo[:Ri_SW_f] .* 0.8,\n            sky_fraction = 1.0,\n            PPFD = meteo[:Ri_SW_f] .* 0.8 .* 0.48 .* 4.57,\n            d = 0.03\n        )\n)\n\nenergy_balance!(leaf,meteo)\n\nDataFrame(leaf)","category":"page"},{"location":"getting_started/get_started/","page":"TL;DR","title":"TL;DR","text":"Curious to understand more ? Head to the next section to learn more about parameter fitting, or to the Simple simulation section for more details about how to make simulations.","category":"page"},{"location":"simulation/several_objects_simulation/#Simulation-over-several-components","page":"Several objects","title":"Simulation over several components","text":"","category":"section"},{"location":"simulation/several_objects_simulation/","page":"Several objects","title":"Several objects","text":"using PlantBiophysics\nusing Dates","category":"page"},{"location":"simulation/several_objects_simulation/#Running-the-simulation","page":"Several objects","title":"Running the simulation","text":"","category":"section"},{"location":"simulation/several_objects_simulation/","page":"Several objects","title":"Several objects","text":"We saw in the previous sections how to run a simulation over one and several time-steps.","category":"page"},{"location":"simulation/several_objects_simulation/","page":"Several objects","title":"Several objects","text":"Now it is also very easy to run a simulation for different components by just providing an array of component instead:","category":"page"},{"location":"simulation/several_objects_simulation/","page":"Several objects","title":"Several objects","text":"using PlantBiophysics\nusing Dates\n\nmeteo = Atmosphere(T = 22.0, Wind = 0.8333, P = 101.325, Rh = 0.4490995)\n\nleaf1 = ModelList(\n        energy_balance = Monteith(),\n        photosynthesis = Fvcb(),\n        stomatal_conductance = Medlyn(0.03, 12.0),\n        status = (Rₛ = 13.747, sky_fraction = 1.0, PPFD = 1500.0, d = 0.03)\n    )\n\nleaf2 = ModelList(\n        energy_balance = Monteith(),\n        photosynthesis = Fvcb(),\n        stomatal_conductance = Medlyn(0.03, 12.0),\n        status = (Rₛ = 10., sky_fraction = 1.0, PPFD = 1250.0, d = 0.02)\n    )\n\nenergy_balance!([leaf1, leaf2], meteo)\n\nDataFrame(Dict(\"leaf1\" => leaf1, \"leaf2\" => leaf2))","category":"page"},{"location":"simulation/several_objects_simulation/","page":"Several objects","title":"Several objects","text":"Note that we use a Dict of components in the call to DataFrame because it allows to get a component column to retrieve the component in the DataFrame, but we could also just use an Array instead.","category":"page"},{"location":"simulation/several_objects_simulation/","page":"Several objects","title":"Several objects","text":"A simulation over different time-steps would give:","category":"page"},{"location":"simulation/several_objects_simulation/","page":"Several objects","title":"Several objects","text":"meteo =\n    read_weather(\n        joinpath(dirname(dirname(pathof(PlantBiophysics))), \"test\", \"inputs\", \"meteo.csv\"),\n        :temperature => :T,\n        :relativeHumidity => (x -> x ./ 100) => :Rh,\n        :wind => :Wind,\n        :atmosphereCO2_ppm => :Cₐ,\n        date_format=DateFormat(\"yyyy/mm/dd\")\n    )\n\nleaf1 = ModelList(\n        energy_balance = Monteith(),\n        photosynthesis = Fvcb(),\n        stomatal_conductance = Medlyn(0.03, 12.0),\n        status = (\n            Rₛ = [5., 10., 20.],\n            sky_fraction = 1.0,\n            PPFD = [500., 1000., 1500.0],\n            d = 0.03\n        )\n    )\n\nleaf2 = ModelList(\n        energy_balance = Monteith(),\n        photosynthesis = Fvcb(),\n        stomatal_conductance = Medlyn(0.03, 12.0),\n        status = (\n            Rₛ = [3., 7., 16.],\n            sky_fraction = 1.0,\n            PPFD = [400., 800., 1200.0],\n            d = 0.03\n        )\n    )\n\nenergy_balance!([leaf1, leaf2], meteo)\n\nDataFrame(Dict(\"leaf1\" => leaf1, \"leaf2\" => leaf2))","category":"page"},{"location":"simulation/several_simulation/#Simulation-over-several-time-steps","page":"Several time steps","title":"Simulation over several time-steps","text":"","category":"section"},{"location":"simulation/several_simulation/","page":"Several time steps","title":"Several time steps","text":"using PlantBiophysics\nusing Dates","category":"page"},{"location":"simulation/several_simulation/#Running-the-simulation","page":"Several time steps","title":"Running the simulation","text":"","category":"section"},{"location":"simulation/several_simulation/","page":"Several time steps","title":"Several time steps","text":"We saw in the previous section how to run a simulation over one time step. We can also easily perform computations over several time steps from a weather file:","category":"page"},{"location":"simulation/several_simulation/","page":"Several time steps","title":"Several time steps","text":"using PlantBiophysics\nusing Dates\n\nmeteo =\n    read_weather(\n        joinpath(dirname(dirname(pathof(PlantBiophysics))), \"test\", \"inputs\", \"meteo.csv\"),\n        :temperature => :T,\n        :relativeHumidity => (x -> x ./ 100) => :Rh,\n        :wind => :Wind,\n        :atmosphereCO2_ppm => :Cₐ,\n        date_format=DateFormat(\"yyyy/mm/dd\")\n    )\n\nleaf = ModelList(\n        energy_balance = Monteith(),\n        photosynthesis = Fvcb(),\n        stomatal_conductance = Medlyn(0.03, 12.0),\n        status = (\n            Rₛ = [5., 10., 20.],\n            sky_fraction = 1.0,\n            PPFD = [500., 1000., 1500.0],\n            d = 0.03\n        )\n    )\n\nenergy_balance!(leaf,meteo)\n\nDataFrame(leaf)","category":"page"},{"location":"simulation/several_simulation/","page":"Several time steps","title":"Several time steps","text":"The only difference is that we use the Weather structure instead of the Atmosphere, and that we provide the models inputs as an Array in the status for the ones that change over time.","category":"page"},{"location":"simulation/several_simulation/","page":"Several time steps","title":"Several time steps","text":"Then PlantBiophysics.jl takes care of the rest and simulate the energy balance over each time-step. Then the output DataFrame has a row for each time-step.","category":"page"},{"location":"simulation/several_simulation/","page":"Several time steps","title":"Several time steps","text":"Note that Weather is in fact just an array of Atmosphere, with some optional metadata attached to it. We could declare one manually either by using an array of Atmosphere like so:","category":"page"},{"location":"simulation/several_simulation/","page":"Several time steps","title":"Several time steps","text":"meteo = Weather(\n    [\n        Atmosphere(T = 20.0, Wind = 1.0, P = 101.3, Rh = 0.65),\n        Atmosphere(T = 23.0, Wind = 1.5, P = 101.3, Rh = 0.60),\n        Atmosphere(T = 25.0, Wind = 3.0, P = 101.3, Rh = 0.55)\n    ]\n)","category":"page"},{"location":"simulation/several_simulation/","page":"Several time steps","title":"Several time steps","text":"Or by passing a DataFrame:","category":"page"},{"location":"simulation/several_simulation/","page":"Several time steps","title":"Several time steps","text":"df = DataFrame(\n    T = [20.0, 23.0, 25.0],\n    Wind = [1.0, 1.5, 3.0],\n    P = [101.3, 101.3, 101.3],\n    Rh = [0.65, 0.6, 0.55]\n)\n\nmeteo = Weather(df)","category":"page"},{"location":"simulation/several_simulation/","page":"Several time steps","title":"Several time steps","text":"You'll have to be careful about the names and the units you are using though, they must match exactly the ones expected for Atmosphere. See the documentation of the structure if in doubt.","category":"page"},{"location":"models/photosynthesis/#photosynthesis_page","page":"Photosynthesis","title":"Photosynthesis","text":"","category":"section"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"using PlantBiophysics","category":"page"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"The photosynthesis is, in this package, the process of assimilation of the atmospheric CO₂.","category":"page"},{"location":"models/photosynthesis/#Models-overview","page":"Photosynthesis","title":"Models overview","text":"","category":"section"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Photosynthesis can be simulated using photosynthesis! or photosynthesis. Several models are available to simulate it:","category":"page"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Fvcb: an implementation of the Farquhar–von Caemmerer–Berry (FvCB) model for C3 photosynthesis (Farquhar et al., 1980; von Caemmerer and Farquhar, 1981) using an analytical resolution\nFvcbIter: the same model but implemented using an iterative computation over Cᵢ\nFvcbRaw: the same model but without the coupling with the stomatal conductance, i.e. as presented in the original paper. This version needs Cᵢ as input.\nConstantA: a model to set the assimilation to a constant value (mainly for testing)\nConstantAGs: a model to set the assimilation to a constant value, but coupled to a stomatal conductance model to compute Cᵢ (mainly for testing)","category":"page"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"You can choose which model to use by passing a component with an assimilation model set to one of the struct above.","category":"page"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"For example, you can \"simulate\" a constant assimilation for a leaf using the following:","category":"page"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"leaf = ModelList(photosynthesis = ConstantA(25.0))\nphotosynthesis(leaf)","category":"page"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"This model does one thing only: force the photosynthesis to the value given as a parameter in the model, here 25.0 μmol cdot m^-2 cdot s^-1.","category":"page"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"note: Note\nThis model feels useless here, but it can be useful when coupled with other models, for example when simulating the full energy balance with a coupled photosynthesis and stomatal conductance model. In this case it is used to better understand how the energy balance works for a given assimilation.","category":"page"},{"location":"models/photosynthesis/#Fvcb","page":"Photosynthesis","title":"Fvcb","text":"","category":"section"},{"location":"models/photosynthesis/#param_fvcb","page":"Photosynthesis","title":"Parameters","text":"","category":"section"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"The FvCB model has a lot of parameters:","category":"page"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Tᵣ: reference temperature (°C) at which other parameters were measured\nVcMaxRef: maximum rate of Rubisco activity (μmol cdot m^-2 cdot s^-1)\nJMaxRef: potential rate of electron transport (μmol cdot m^-2 cdot s^-1)\nRdRef: mitochondrial respiration in the light at reference temperature (μmol cdot m^-2 cdot s^-1)\nTPURef: triose phosphate utilization-limited photosynthesis rate (μmol cdot m^-2 cdot s^-1)\nEₐᵣ: activation energy (J cdot mol^-1), or the exponential rate of rise for Rd.\nO₂: intercellular dioxygen concentration (ppm)\nEₐⱼ: activation energy (J cdot mol^-1), or the exponential rate of rise for JMax.\nHdⱼ: rate of decrease of the function above the optimum (also called EDVJ) for JMax.\nΔₛⱼ: entropy factor for JMax.\nEₐᵥ: activation energy (J cdot mol^-1), or the exponential rate of rise for VcMax.\nHdᵥ: rate of decrease of the function above the optimum (also called EDVC) for VcMax.\nΔₛᵥ: entropy factor for VcMax.\nα: quantum yield of electron transport (mol_e cdot mol^-1_quanta). See also eq. 4 of Medlyn et al. (2002) and its implementation in get_J\nθ: determines the curvature of the light response curve for J~PPFD. See also eq. 4 of Medlyn et al. (2002) and its implementation in get_J","category":"page"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"The default values of the temperature correction parameters are taken from plantecophys (Duursma, 2015). If there is no negative effect of high temperatures on the reaction (Jmax or VcMax), then Δₛ can be set to 0.0.","category":"page"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"The default value for θ is 0.7 according to Von Caemmerer (2000), but it can be modified to 0.9 as in Su et al. (2009). The larger it is, the lower the smoothing.","category":"page"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"The default value for α is 0.24, taken from plantecophys.","category":"page"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Medlyn et al. (2002) found relatively low influence (\"a slight effect\") of α and θ. They also say that Kc, Ko and Γ* \"are thought to be intrinsic properties of the Rubisco enzyme and are generally assumed constant among species\".","category":"page"},{"location":"models/photosynthesis/#inputs_fvcb","page":"Photosynthesis","title":"Input variables","text":"","category":"section"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"The Fvcb model needs three input variables:","category":"page"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"inputs(Fvcb())","category":"page"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"The PPFD is the absorbed photosynthetically active photon flux density (μmol_quanta cdot m^-2 cdot s^-1). It is usually computed by a light interception model.","category":"page"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Tₗ is the leaf temperature in Celsius degree.","category":"page"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Cₛ (ppm) is the stomatal CO₂ concentration, usually computed using a conductance model.","category":"page"},{"location":"models/photosynthesis/#exemple_fvcb","page":"Photosynthesis","title":"Example","text":"","category":"section"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Here is an example usage:","category":"page"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"meteo = Atmosphere(T = 20.0, Wind = 1.0, P = 101.3, Rh = 0.65)\n\nleaf = ModelList(\n    photosynthesis = Fvcb(),\n    stomatal_conductance = Medlyn(0.03, 12.0),\n    status = (Tₗ = 25.0, PPFD = 1000.0, Cₛ = 400.0, Dₗ = meteo.VPD)\n)\n# NB: we need to initialize `Tₗ`, `PPFD` and `Cₛ` for `FvCB`, and `Dₗ` for the stomatal conductance of Medlyn et al. (2011).\n\nphotosynthesis!(leaf,meteo)\n\nleaf","category":"page"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"note: Note\nYou can use inputs to get the variables needed for a given model, e.g.: inputs(Fvcb()), inputs(Medlyn(0.03, 12.0)), or better: inputs(Fvcb(), Medlyn(0.03, 12.0))","category":"page"},{"location":"models/photosynthesis/#FvcbIter","page":"Photosynthesis","title":"FvcbIter","text":"","category":"section"},{"location":"models/photosynthesis/#param_fvcbiter","page":"Photosynthesis","title":"Parameters","text":"","category":"section"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"FvcbIter needs the exact same parameter values as Fvcb.","category":"page"},{"location":"models/photosynthesis/#inputs_fvcbiter","page":"Photosynthesis","title":"Input variables","text":"","category":"section"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"The only difference with Fvcb is that FvcbIter computes Cₛ, so we don't need it as input, but it needs Gbc instead, the boundary conductance for CO₂ (mol cdot m^-2 cdot s^-1).","category":"page"},{"location":"models/photosynthesis/#exemple_fvcbiter","page":"Photosynthesis","title":"Example","text":"","category":"section"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Here is an example usage:","category":"page"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"meteo = Atmosphere(T = 20.0, Wind = 1.0, P = 101.3, Rh = 0.65)\n\nleaf = ModelList(\n    photosynthesis = FvcbIter(),\n    stomatal_conductance = Medlyn(0.03, 12.0),\n    status = (Tₗ = 25.0, PPFD = 1000.0, Gbc = 0.67, Dₗ = meteo.VPD)\n)\n\n# NB: we need to initialize `Tₗ`, `PPFD` and `Gbc` for `FvcbIter`, and `Dₗ` for the stomatal conductance of Medlyn et al. (2011).\n\nphotosynthesis!(leaf,meteo,Constants())\n\nleaf","category":"page"},{"location":"models/photosynthesis/#FvcbRaw","page":"Photosynthesis","title":"FvcbRaw","text":"","category":"section"},{"location":"models/photosynthesis/#param_fvcbraw","page":"Photosynthesis","title":"Parameters","text":"","category":"section"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"FvcbRaw needs again the exact same parameter values as Fvcb, and the same input variables.","category":"page"},{"location":"models/photosynthesis/#inputs_fvcbraw","page":"Photosynthesis","title":"Input variables","text":"","category":"section"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"The FvcbRaw model needs three input variables:","category":"page"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"inputs(FvcbRaw())","category":"page"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"The PPFD is, again, the absorbed photosynthetically active photon flux density (μmol_quanta cdot m^-2 cdot s^-1). It is usually computed by a light interception model. Tₗ (°C) is the leaf temperature, and Cᵢ (ppm) is the intercellular CO₂ concentration, usually computed using a conductance model.","category":"page"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"note: Note\nThe three implementations of the FvCB model needs different input variables because they implement more or less coupling with other models.","category":"page"},{"location":"models/photosynthesis/#exemple_raw","page":"Photosynthesis","title":"Example","text":"","category":"section"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"leaf = ModelList(\n    photosynthesis = FvcbRaw(),\n    status = (Tₗ = 25.0, PPFD = 1000.0, Cᵢ = 400.0)\n)\n# NB: we need `Tₗ`, `PPFD` and `Cᵢ` as inputs (see [`inputs`](@ref))\n\nphotosynthesis!(leaf)\nleaf","category":"page"},{"location":"models/photosynthesis/#ConstantA","page":"Photosynthesis","title":"ConstantA","text":"","category":"section"},{"location":"models/photosynthesis/#param_constanta","page":"Photosynthesis","title":"Parameters","text":"","category":"section"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"ConstantA has one parameter: the constant value for the assimilation (A, μmol cdot m^-2 cdot s^-1). Its only job is to force the value of A to the value of the parameter.","category":"page"},{"location":"models/photosynthesis/#inputs_constanta","page":"Photosynthesis","title":"Input variables","text":"","category":"section"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"ConstantA doesn't need any input variable.","category":"page"},{"location":"models/photosynthesis/#exemple_constanta","page":"Photosynthesis","title":"Example","text":"","category":"section"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"leaf = ModelList(photosynthesis = ConstantA())\n\nphotosynthesis!(leaf)\nleaf","category":"page"},{"location":"models/photosynthesis/#ConstantAGs","page":"Photosynthesis","title":"ConstantAGs","text":"","category":"section"},{"location":"models/photosynthesis/#param_constantags","page":"Photosynthesis","title":"Parameters","text":"","category":"section"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"ConstantAGs has one parameter: the constant value for the assimilation (A, μmol cdot m^-2 cdot s^-1). Similarly to ConstantA, its job is to force the value of A to the value of the parameter, but this one adds a coupling with a stomatal conductance model to in fine compute Cᵢ (ppm), the intercellular CO₂ concentration.","category":"page"},{"location":"models/photosynthesis/#inputs_constantags","page":"Photosynthesis","title":"Input variables","text":"","category":"section"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"ConstantAGs needs Cₛ as input variable. Cₛ (ppm) is the stomatal CO₂ concentration, usually computed using a conductance model.","category":"page"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"inputs(ConstantAGs())","category":"page"},{"location":"models/photosynthesis/#exemple_constantags","page":"Photosynthesis","title":"Example","text":"","category":"section"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"leaf = ModelList(\n    photosynthesis = ConstantAGs(),\n    stomatal_conductance = Medlyn(0.03, 12.0),\n    status = (Cₛ = 380.0, Dₗ = 2.0)\n)\n\nphotosynthesis!(leaf)\nleaf","category":"page"},{"location":"models/photosynthesis/#Parameter-effects","page":"Photosynthesis","title":"Parameter effects","text":"","category":"section"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"We can easily investigate the effects of parameters on the simulation. For example we can see what is the effect of PPFD on J.","category":"page"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"First we import the packages needed:","category":"page"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"using Plots\nusing PlantBiophysics","category":"page"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Then we set up our models and their parameter values:","category":"page"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"A = Fvcb(); PPFD = 0:100:2000;","category":"page"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"And finally we plot J ~ PPFD with different parameter values, with the simplification that JMax is equal to JMaxRef:","category":"page"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"plot(x -> PlantBiophysics.get_J(x, A.JMaxRef, A.α, A.θ), PPFD, xlabel = \"PPFD (μmol m⁻² s⁻¹)\",\n            ylab = \"J (μmol m⁻² s⁻¹)\", label = \"Default values\", legend = :bottomright)\nplot!(x -> PlantBiophysics.get_J(x, A.JMaxRef, A.α, A.θ * 0.5), PPFD, label = \"θ * 0.5\")\nplot!(x -> PlantBiophysics.get_J(x, A.JMaxRef, A.α * 0.5, A.θ), PPFD, label = \"α * 0.5\")\nsavefig(\"f-plot.svg\"); nothing # hide","category":"page"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"(Image: Effect of PPFD on J)","category":"page"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"You can investigate other relationships with different plots.","category":"page"},{"location":"models/photosynthesis/#References","page":"Photosynthesis","title":"References","text":"","category":"section"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Caemmerer, S. von, et G. D. Farquhar. 1981. « Some Relationships between the Biochemistry of Photosynthesis and the Gas Exchange of Leaves ». Planta 153 (4): 376‑87. https://doi.org/10.1007/BF00384257.","category":"page"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Farquhar, G. D., S. von von Caemmerer, et J. A. Berry. 1980. « A biochemical model of photosynthetic CO2 assimilation in leaves of C3 species ». Planta 149 (1): 78‑90.","category":"page"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Medlyn, B. E., E. Dreyer, D. Ellsworth, M. Forstreuter, P. C. Harley, M. U. F. Kirschbaum, X. Le Roux, et al. 2002. « Temperature response of parameters of a biochemically based model of photosynthesis. II. A review of experimental data ». Plant, Cell & Environment 25 (9): 1167‑79. https://doi.org/10.1046/j.1365-3040.2002.00891.x.","category":"page"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Su, Y., Zhu, G., Miao, Z., Feng, Q. and Chang, Z. 2009. « Estimation of parameters of a biochemically based model of photosynthesis using a genetic algorithm ». Plant, Cell & Environment, 32: 1710-1723. https://doi.org/10.1111/j.1365-3040.2009.02036.x.","category":"page"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Von Caemmerer, Susanna. 2000. Biochemical models of leaf photosynthesis. Csiro publishing.","category":"page"},{"location":"models/photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Duursma, R. A. 2015. « Plantecophys - An R Package for Analysing and Modelling Leaf Gas Exchange Data ». PLoS ONE 10(11): e0143346. https://doi:10.1371/journal.pone.0143346.","category":"page"},{"location":"functions/#Functions","page":"API","title":"Functions","text":"","category":"section"},{"location":"functions/#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"functions/","page":"API","title":"API","text":"","category":"page"},{"location":"functions/#API-documentation","page":"API","title":"API documentation","text":"","category":"section"},{"location":"functions/","page":"API","title":"API","text":"Modules = [PlantBiophysics]\nPrivate = false","category":"page"},{"location":"functions/#DataFrames.DataFrame-Tuple{T} where T<:ModelList","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(components::T) where {T<:ModelList}\n\nGeneric implementation of DataFrame for a single ModelList model.\n\n\n\n\n\n","category":"method"},{"location":"functions/#DataFrames.DataFrame-Tuple{T} where T<:Union{AbstractArray{<:ModelList}, ModelList}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(components <: AbstractArray{<:ModelList})\nDataFrame(components <: AbstractDict{N,<:ModelList})\n\nFetch the data from a ModelList (or an Array/Dict of) status into a DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"functions/#DataFrames.DataFrame-Tuple{Weather}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(data::Weather)\n\nTransform a Weather type into a DataFrame.\n\nSee also Weather to make the reverse.\n\n\n\n\n\n","category":"method"},{"location":"functions/#DataFrames.DataFrame-Union{Tuple{ModelList{T, S}}, Tuple{S}, Tuple{T}} where {T, S<:Status}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(components::ModelList{T,S}) where {T,S<:AbstractDict}\n\nImplementation of DataFrame for a ModelList model with one time step.\n\n\n\n\n\n","category":"method"},{"location":"functions/#DataFrames.DataFrame-Union{Tuple{ModelList{T, S}}, Tuple{S}, Tuple{T}} where {T, S<:TimeStepTable}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(components::ModelList{T,<:TimeStepTable})\n\nImplementation of DataFrame for a ModelList model with several time steps.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.AbstractAModel","page":"API","title":"PlantBiophysics.AbstractAModel","text":"Assimilation (photosynthesis) abstract model. All photosynthesis models must be a subtype of this type.\n\n\n\n\n\n","category":"type"},{"location":"functions/#PlantBiophysics.AbstractEnergyModel","page":"API","title":"PlantBiophysics.AbstractEnergyModel","text":"Energy balance abstract struct. All energy balance models must be a subtype of this type.\n\n\n\n\n\n","category":"type"},{"location":"functions/#PlantBiophysics.AbstractGsModel","page":"API","title":"PlantBiophysics.AbstractGsModel","text":"Stomatal conductance abstract model. All stomatal conductance models must be a subtype of this type.\n\nAn AbstractGsModel subtype struct must implement at least a g0 field.\n\n\n\n\n\n","category":"type"},{"location":"functions/#PlantBiophysics.AbstractLightModel","page":"API","title":"PlantBiophysics.AbstractLightModel","text":"Light interception abstract struct. All light interception models must be a subtype of this.\n\n\n\n\n\n","category":"type"},{"location":"functions/#PlantBiophysics.AbstractModel","page":"API","title":"PlantBiophysics.AbstractModel","text":"Abstract model type. All models are subtypes of this one, see e.g. AbstractAModel\n\n\n\n\n\n","category":"type"},{"location":"functions/#PlantBiophysics.Atmosphere","page":"API","title":"PlantBiophysics.Atmosphere","text":"Atmosphere structure to hold all values related to the meteorology / atmosphere.\n\nArguments\n\ndate = Dates.now(): the date of the record.\nduration = 1.0 (seconds): the duration of the time-step.\nT (°C): air temperature\nWind (m s-1): wind speed\nP = 101.325 (kPa): air pressure. The default value is at 1 atm, i.e. the mean sea-level\n\natmospheric pressure on Earth.\n\nRh = rh_from_vpd(VPD,eₛ) (0-1): relative humidity\nCₐ (ppm): air CO₂ concentration\ne = vapor_pressure(T,Rh) (kPa): vapor pressure\neₛ = e_sat(T) (kPa): saturated vapor pressure\nVPD = eₛ - e (kPa): vapor pressure deficit\nρ = air_density(T, P, constants.Rd, constants.K₀) (kg m-3): air density\nλ = latent_heat_vaporization(T, constants.λ₀) (J kg-1): latent heat of vaporization\nγ = psychrometer_constant(P, λ, constants.Cₚ, constants.ε) (kPa K−1): psychrometer \"constant\"\nε = atmosphere_emissivity(T,e,constants.K₀) (0-1): atmosphere emissivity\nΔ = e_sat_slope(meteo.T) (0-1): slope of the saturation vapor pressure at air temperature\nclearness::A = 9999.9 (0-1): Sky clearness\nRi_SW_f::A = 9999.9 (W m-2): Incoming short wave radiation flux\nRi_PAR_f::A = 9999.9 (W m-2): Incoming PAR flux\nRi_NIR_f::A = 9999.9 (W m-2): Incoming NIR flux\nRi_TIR_f::A = 9999.9 (W m-2): Incoming TIR flux\nRi_custom_f::A = 9999.9 (W m-2): Incoming radiation flux for a custom waveband\n\nNotes\n\nThe structure can be built using only T, Rh, Wind and P. All other variables are optional and either let at their default value or automatically computed using the functions given in Arguments.\n\nExamples\n\nAtmosphere(T = 20.0, Wind = 1.0, P = 101.3, Rh = 0.65)\n\n\n\n\n\n","category":"type"},{"location":"functions/#PlantBiophysics.Beer","page":"API","title":"PlantBiophysics.Beer","text":"Beer(k)\n\nBeer-Lambert law for light interception.\n\nRequired inputs: LAI in m² m⁻². Required meteorology data: Ri_PAR_f, the incident flux of atmospheric radiation in the PAR, in W m[soil]⁻² (== J m[soil]⁻² s⁻¹).\n\nOutput: PPFD, the absorbed Photosynthetic Photon Flux Density in μmol[PAR] m[leaf]⁻² s⁻¹.\n\n\n\n\n\n","category":"type"},{"location":"functions/#PlantBiophysics.ConstantA","page":"API","title":"PlantBiophysics.ConstantA","text":"Constant (forced) assimilation, given in μmol m^-2 s^-1.\n\nSee also ConstantAGs.\n\nExamples\n\nConstantA(30.0)\n\n\n\n\n\n","category":"type"},{"location":"functions/#PlantBiophysics.ConstantAGs","page":"API","title":"PlantBiophysics.ConstantAGs","text":"Constant (forced) assimilation, given in μmol m^-2 s^-1, coupled with a stomatal conductance model that helps computing Cᵢ.\n\nExamples\n\nConstantAGs(30.0)\n\n\n\n\n\n","category":"type"},{"location":"functions/#PlantBiophysics.ConstantGs","page":"API","title":"PlantBiophysics.ConstantGs","text":"Constant stomatal conductance for CO₂ struct.\n\nArguments\n\ng0: intercept (only used when calling from a photosynthesis model, e.g. Fvcb).\nGₛ: stomatal conductance.\n\nThen used as follows: Gs = ConstantGs(0.0,0.1)\n\n\n\n\n\n","category":"type"},{"location":"functions/#PlantBiophysics.Constants","page":"API","title":"PlantBiophysics.Constants","text":"Physical constants\n\nThe definition and default values are:\n\nK₀ = -273.15: absolute zero (°C)\nR = 8.314: universal gas constant (J mol^-1 K^-1).\nRd = 287.0586: gas constant of dry air (J kg^-1 K^-1).\nDₕ₀ = 21.5e-6: molecular diffusivity for heat at base temperature, applied in the integrated form of the   Fick’s Law of diffusion (m^2 s^-1). See eq. 3.10 from Monteith and Unsworth (2013).\nCₚ = 1013.0: Specific heat of air at constant pressure (J K^-1 kg^-1), also   known as efficiency of impaction of particles. See Allen et al. (1998), or Monteith and   Unsworth (2013). NB: bigleaf R package uses 1004.834 intead.\nε = 0.622: ratio of molecular weights of water vapor and air. See Monteith and   Unsworth (2013).\nλ₀ = 2.501: latent heat of vaporization for water at 0 degree (J kg^-1).\nσ = 5.670373e-08 Stefan-Boltzmann constant   in (W m^-2 K^-4).\nGbₕ_to_Gbₕ₂ₒ = 1.075: conversion coefficient from conductance to heat to conductance to water   vapor.\nGsc_to_Gsw = 1.57: conversion coefficient from stomatal conductance to CO₂ to conductance to water   vapor.\nGbc_to_Gbₕ = 1.32: conversion coefficient from boundary layer conductance to CO₂ to heat.\nMₕ₂ₒ = 18.0e-3 (kg mol-1): Molar mass for water.\n\nReferences\n\nAllen, Richard G., Luis S. Pereira, Dirk Raes, et Martin J Fao Smith. 1998. « Crop evapotranspiration-Guidelines for computing crop water requirements-FAO Irrigation and drainage paper 56 » 300 (9): D05109.\n\nMonteith, John, et Mike Unsworth. 2013. Principles of environmental physics: plants, animals, and the atmosphere. Academic Press.\n\n\n\n\n\n","category":"type"},{"location":"functions/#PlantBiophysics.Fvcb","page":"API","title":"PlantBiophysics.Fvcb","text":"Farquhar–von Caemmerer–Berry (FvCB) model for C3 photosynthesis (Farquhar et al., 1980; von Caemmerer and Farquhar, 1981) coupled with a conductance model.\n\nThe definition:\n\nTᵣ: the reference temperature (°C) at which other parameters were measured\nVcMaxRef: maximum rate of Rubisco activity (μmol m^-2 s^-1)\nJMaxRef: potential rate of electron transport (μmol m^-2 s^-1)\nRdRef: mitochondrial respiration in the light at reference temperature (μmol m^-2 s^-1)\nTPURef: triose phosphate utilization-limited photosynthesis rate (μmol m^-2 s^-1)\nEₐᵣ: activation energy (J mol^-1), or the exponential rate of rise for Rd.\nO₂: intercellular dioxygen concentration (ppm)\nEₐⱼ: activation energy (J mol^-1), or the exponential rate of rise for JMax.\nHdⱼ: rate of decrease of the function above the optimum (also called EDVJ) for JMax.\nΔₛⱼ: entropy factor for JMax.\nEₐᵥ: activation energy (J mol^-1), or the exponential rate of rise for VcMax.\nHdᵥ: rate of decrease of the function above the optimum (also called EDVC) for VcMax.\nΔₛᵥ: entropy factor for VcMax.\nα: quantum yield of electron transport (mol_e mol^-1_quanta). See also eq. 4 of\n\nMedlyn et al. (2002) and its implementation in get_J\n\nθ: determines the curvature of the light response curve for J~PPFD. See also eq. 4 of\n\nMedlyn et al. (2002) and its implementation in get_J\n\nThe default values of the temperature correction parameters are taken from plantecophys. If there is no negative effect of high temperatures on the reaction (Jmax or VcMax), then Δₛ can be set to 0.0.\n\nθ is taken at 0.7 according to (Von Caemmerer, 2000) but it can be modified to 0.9 as in (Su et al., 2009). The larger it is, the lower the smoothing.\n\nα is taken at 0.24 as in the R package plantecophys (Duursma, 2015).\n\nNote\n\nMedlyn et al. (2002) found relatively low influence (\"a slight effect\") of α and θ. They also say that Kc, Ko and Γ* \"are thought to be intrinsic properties of the Rubisco enzyme and are generally assumed constant among species\".\n\nSee also\n\nFvcbRaw for non-coupled model, directly from Farquhar et al. (1980)\nFvcbIter for the coupled assimilation / conductance model with an iterative resolution\nget_J\nphotosynthesis\n\nReferences\n\nCaemmerer, S. von, et G. D. Farquhar. 1981. « Some Relationships between the Biochemistry of Photosynthesis and the Gas Exchange of Leaves ». Planta 153 (4): 376‑87. https://doi.org/10.1007/BF00384257.\n\nFarquhar, G. D., S. von von Caemmerer, et J. A. Berry. 1980. « A biochemical model of photosynthetic CO2 assimilation in leaves of C3 species ». Planta 149 (1): 78‑90.\n\nMedlyn, B. E., E. Dreyer, D. Ellsworth, M. Forstreuter, P. C. Harley, M. U. F. Kirschbaum, X. Le Roux, et al. 2002. « Temperature response of parameters of a biochemically based model of photosynthesis. II. A review of experimental data ». Plant, Cell & Environment 25 (9): 1167‑79. https://doi.org/10.1046/j.1365-3040.2002.00891.x.\n\nSu, Y., Zhu, G., Miao, Z., Feng, Q. and Chang, Z. 2009. « Estimation of parameters of a biochemically based model of photosynthesis using a genetic algorithm ». Plant, Cell & Environment, 32: 1710-1723. https://doi.org/10.1111/j.1365-3040.2009.02036.x.\n\nVon Caemmerer, Susanna. 2000. Biochemical models of leaf photosynthesis. Csiro publishing.\n\nDuursma, R. A. 2015. « Plantecophys - An R Package for Analysing and Modelling Leaf Gas Exchange Data ». PLoS ONE 10(11): e0143346. https://doi:10.1371/journal.pone.0143346.\n\nExamples\n\nGet the fieldnames:\nfieldnames(Fvcb)\n# Using default values for the model:\nA = Fvcb()\n\nA.Eₐᵥ\n\n\n\n\n\n","category":"type"},{"location":"functions/#PlantBiophysics.FvcbIter","page":"API","title":"PlantBiophysics.FvcbIter","text":"Farquhar–von Caemmerer–Berry (FvCB) model for C3 photosynthesis (Farquhar et al., 1980; von Caemmerer and Farquhar, 1981).\n\nIterative implementation, i.e. the assimilation is computed iteratively over Cᵢ.\n\nFor more details on arguments, see Fvcb. This structure has several more parameters:\n\niter_A_max::Int: maximum number of iterations allowed for the iteration on the assimilation.\nΔT_A::T = 1: threshold bellow which the assimilation is considered constant. Given in\n\npercent of change, i.e. 1% means that two successive assimilations with less than 1% difference in value are considered the same value.\n\n\n\n\n\n","category":"type"},{"location":"functions/#PlantBiophysics.FvcbRaw","page":"API","title":"PlantBiophysics.FvcbRaw","text":"Farquhar–von Caemmerer–Berry (FvCB) model for C3 photosynthesis (Farquhar et al., 1980; von Caemmerer and Farquhar, 1981). Direct implementation of the model.\n\nSee Fvcb for more details.\n\nSee also\n\nFvcb for the coupled assimilation / conductance model\nFvcbIter for the coupled assimilation / conductance model with an iterative resolution\nget_J\nphotosynthesis\n\nReferences\n\nCaemmerer, S. von, et G. D. Farquhar. 1981. « Some Relationships between the Biochemistry of Photosynthesis and the Gas Exchange of Leaves ». Planta 153 (4): 376‑87. https://doi.org/10.1007/BF00384257.\n\nFarquhar, G. D., S. von von Caemmerer, et J. A. Berry. 1980. « A biochemical model of photosynthetic CO2 assimilation in leaves of C3 species ». Planta 149 (1): 78‑90.\n\nExamples\n\nGet the fieldnames:\nfieldnames(FvcbRaw)\n# Using default values for the model:\nA = FvcbRaw()\n\nA.Eₐᵥ\n\n\n\n\n\n","category":"type"},{"location":"functions/#PlantBiophysics.Ignore","page":"API","title":"PlantBiophysics.Ignore","text":"Ignore model for light interception, see here. Make the mesh invisible, and not computed. Can save a lot of time for the computations when there are components types that are not visible anyway (e.g. inside others).\n\n\n\n\n\n","category":"type"},{"location":"functions/#PlantBiophysics.Medlyn","page":"API","title":"PlantBiophysics.Medlyn","text":"struct to hold the parameters for Medlyn et al. (2011) stomatal conductance model for CO₂.\n\nArguments\n\ng0: intercept.\ng1: slope.\ngs_min = 0.001: residual conductance. We consider the residual conductance being different   from g0 because in practice g0 can be negative when fitting real-world data.\n\nUsage\n\nThen used for example as follows:\n\nGs = Medlyn(0.03,0.1)\ngs_mod = stomatal_conductance(Gs,(Cₛ = 400.0, VPD = 1.5))\nGₛ = Gs.g0 + gs_mod * A\n\nExamples\n\nmeteo = Atmosphere(T = 20.0, Wind = 1.0, P = 101.3, Rh = 0.65)\n\nleaf =\n    ModelList(\n        stomatal_conductance = Medlyn(0.03, 12.0),\n        status = (A = A, Cₛ = 380.0, Dₗ = meteo.VPD)\n    )\nstomatal_conductance(leaf,meteo)\n\nReferences\n\nMedlyn, Belinda E., Remko A. Duursma, Derek Eamus, David S. Ellsworth, I. Colin Prentice, Craig V. M. Barton, Kristine Y. Crous, Paolo De Angelis, Michael Freeman, et Lisa Wingate.\n\n« Reconciling the optimal and empirical approaches to modelling stomatal conductance ».\n\nGlobal Change Biology 17 (6): 2134‑44. https://doi.org/10.1111/j.1365-2486.2010.02375.x.\n\n\n\n\n\n","category":"type"},{"location":"functions/#PlantBiophysics.ModelList","page":"API","title":"PlantBiophysics.ModelList","text":"ModelList(models::M, status::S)\nModelList(;\n    status=MutableNamedTuple(),\n    status_type=MutableNamedTuple,\n    type_promotion=nothing,\n    variables_check=true,\n    kwargs...\n)\n\nA structure used to list the models for a simulation (models), and the associated initialized variables (status).\n\nnote: Note\nThe status field depends on the input models. You can get the variables needed by a model using variables on the instantiation of a model. You can also use inputs and outputs instead.\n\nArguments\n\n- `models`: a list of models to be used in the simulation. Usually a `NamedTuple`, but\ncan be any other structure that implements `getproperty`.\n- `status`: a structure containing the initializations for the variables for the models.\n- `status_type`: the type of the status structure. `MutableNamedTuple` by default.\n- `type_promotion`: optional type conversion for the variables with default values.\n`nothing` by default, *i.e.* no conversion. Note that conversion is not applied to the\nvariables input by the user as `kwargs` (need to do it manually).\nShould be provided as a Dict with current type as keys and new type as values.\n- `variables_check=true`: check that all needed variables are initialized by the user.\n- `kwargs`: the models, named after the process they simulate.\n\nExamples\n\nA leaf with a width of 0.03 m, that uses the Monteith and Unsworth (2013) model for energy balance, the Farquhar et al. (1980) model for photosynthesis, and a constant stomatal conductance for CO₂ of 0.0011 with no residual conductance.\n\nusing PlantBiophysics\n\nleaf = ModelList(\n    energy_balance = Monteith(),\n    photosynthesis = Fvcb(),\n    stomatal_conductance = ConstantGs(0.0, 0.0011)\n)\n\nNo variables were given as keyword arguments, that means that the status of the leaf is not set yet, and all variables are initialized to typemin(Type), i.e. -Inf for floating point numbers. This component cannot be simulated yet.\n\nTo know which variables we need to initialize for a simulation, we use to_initialize:\n\nto_initialize(leaf)\n\nThe meaning and units of the variables can be found on the documentation of each model, e.g. here for photosynthesis.\n\nWe can now provide values for these variables:\n\nleaf = ModelList(\n    energy_balance = Monteith(),\n    photosynthesis = Fvcb(),\n    stomatal_conductance = ConstantGs(0.0, 0.0011),\n    status = (Rₛ = 13.747, sky_fraction = 1.0, d = 0.03, PPFD = 1500)\n)\n\nWe can now simulate the leaf, e.g. for the energy_balance (coupled to photosynthesis and stomatal conductance):\n\nmeteo = Atmosphere(T = 22.0, Wind = 0.8333, P = 101.325, Rh = 0.4490995)\n\nenergy_balance!(leaf,meteo)\n\nDataFrame(leaf)\n\nIf we want to use special types for the variables, we can use the type_promotion argument:\n\nleaf = ModelList(\n    energy_balance = Monteith(),\n    photosynthesis = Fvcb(),\n    stomatal_conductance = ConstantGs(0.0, 0.0011),\n    status = (Rₛ = 13.747, sky_fraction = 1.0, d = 0.03, PPFD = 1500),\n    type_promotion = Dict(Float64 => Float32)\n)\n\n\n\n\n\n","category":"type"},{"location":"functions/#PlantBiophysics.Monteith","page":"API","title":"PlantBiophysics.Monteith","text":"Struct to hold parameter and values for the energy model close to the one in Monteith and Unsworth (2013)\n\nArguments\n\naₛₕ = 2: number of faces of the object that exchange sensible heat fluxes\naₛᵥ = 1: number of faces of the object that exchange latent heat fluxes (hypostomatous => 1)\nε = 0.955: emissivity of the object\nmaxiter = 10: maximal number of iterations allowed to close the energy balance\nΔT = 0.01 (°C): maximum difference in object temperature between two iterations to consider convergence\n\nExamples\n\nenergy_model = Monteith() # a leaf in an illuminated chamber\n\n\n\n\n\n","category":"type"},{"location":"functions/#PlantBiophysics.OpticalProperties","page":"API","title":"PlantBiophysics.OpticalProperties","text":"Optical properties abstract struct\n\n\n\n\n\n","category":"type"},{"location":"functions/#PlantBiophysics.Status","page":"API","title":"PlantBiophysics.Status","text":"Status(vars)\n\nStatus type used to store the values of the variables during simulation. It is mainly used as the structure to store the variables in the TimeStepRow of a TimeStepTable of a ModelList.\n\nMost of the code is taken from MasonProtter/MutableNamedTuples.jl, so Status is a MutableNamedTuples with a few modifications, so in essence, it is a stuct that stores a NamedTuple of the references to the values of the variables, which makes it mutable.\n\nExamples\n\n# A leaf with one value for all variables will make a status with one time step:\nst = Status(Rₛ=13.747, sky_fraction=1.0, d=0.03, PPFD=1500.0)\n\n# Indexing a Status with a symbol returns the value of the variable:\nst[:Tₗ]\n\n# Indexing the Status with an integer returns the value of the variable by position:\nst[1]\n\n\n\n\n\n","category":"type"},{"location":"functions/#PlantBiophysics.TimeStepTable","page":"API","title":"PlantBiophysics.TimeStepTable","text":"TimeStepTable(vars)\n\nTimeStepTable stores the values of the variables for each time step of a simulation. For example, it is used as the structure in the status field of the ModelList type.\n\nTimeStepTable implements the Tables.jl interface, so it can be used with any package that uses Tables.jl (like DataFrames.jl).\n\nExamples\n\n# A leaf with several values for at least one of its variable will make a status with\n# several time steps:\nleaf = ModelList(\n    photosynthesis = Fvcb(),\n    stomatal_conductance = Medlyn(0.03, 12.0),\n    status=(Tₗ=[25.0, 26.0], PPFD=1000.0, Cₛ=400.0, Dₗ=1.0)\n)\n\n# Indexing the model list with an integer will return the first time step:\nleaf[1]\n\n# Indexing the model list with a symbol will return the variable with all time steps:\nleaf[:Tₗ]\n\n# If you need the value for one variable at one time step, prefer using this (5x faster):\nleaf[1].Tₗ\n\n# Rather than this (5x slower):\nleaf[:Tₗ][1]\n\n\n\n\n\n","category":"type"},{"location":"functions/#PlantBiophysics.Translucent","page":"API","title":"PlantBiophysics.Translucent","text":"Translucent model for light interception, see here.\n\n\n\n\n\n","category":"type"},{"location":"functions/#PlantBiophysics.Weather","page":"API","title":"PlantBiophysics.Weather","text":"Weather(D <: AbstractArray{<:AbstractAtmosphere}[, S])\nWeather(df::DataFrame[, mt])\n\nDefines the weather, i.e. the local conditions of the Atmosphere for one or more time-steps. Each time-step is described using the Atmosphere structure.\n\nThe simplest way to instantiate a Weather is to use a DataFrame as input.\n\nThe DataFrame should be formated such as each row is an observation for a given time-step and each column is a variable. The column names should match exactly the field names of the Atmosphere structure, i.e.:\n\nfieldnames(Atmosphere)\n\nSee also\n\nthe Atmosphere structure\nthe read_weather function to read Archimed-formatted meteorology data.\n\nExamples\n\n# Example of weather data defined by hand (cumbersome):\nw = Weather(\n    [\n        Atmosphere(T = 20.0, Wind = 1.0, P = 101.3, Rh = 0.65),\n        Atmosphere(T = 23.0, Wind = 1.5, P = 101.3, Rh = 0.60),\n        Atmosphere(T = 25.0, Wind = 3.0, P = 101.3, Rh = 0.55)\n    ],\n    (\n        site = \"Test site\",\n        important_metadata = \"this is important and will be attached to our weather data\"\n    )\n)\n\n# Example using a DataFrame, that you would usually import from a file:\nusing CSV, DataFrames\nfile = joinpath(dirname(dirname(pathof(PlantBiophysics))),\"test\",\"inputs\",\"meteo.csv\")\ndf = CSV.read(file, DataFrame; header=5, datarow = 6)\n# Select and rename the variables:\nselect!(df, :date, :VPD, :temperature => :T, :relativeHumidity => :Rh, :wind => :Wind, :atmosphereCO2_ppm => :Cₐ)\ndf[!,:duration] .= 1800 # Add the time-step duration, 30min\n\n# Make the weather, and add some metadata:\nWeather(df, (site = \"Aquiares\", file = file))\n\n\n\n\n\n","category":"type"},{"location":"functions/#PlantBiophysics.σ","page":"API","title":"PlantBiophysics.σ","text":"σ()\n\nσ, the scattering factor of a component. See here for more details\n\n\n\n\n\n","category":"type"},{"location":"functions/#Base.copy-Tuple{T} where T<:(AbstractArray{<:ModelList})","page":"API","title":"Base.copy","text":"Base.copy(l::AbstractArray{<:ModelList})\n\nCopy an array-alike of ModelList\n\n\n\n\n\n","category":"method"},{"location":"functions/#Base.copy-Tuple{T} where T<:(AbstractDict{N, <:ModelList} where N)","page":"API","title":"Base.copy","text":"Base.copy(l::AbstractDict{N,<:ModelList} where N)\n\nCopy a Dict-alike ModelList\n\n\n\n\n\n","category":"method"},{"location":"functions/#Base.copy-Tuple{T} where T<:ModelList","page":"API","title":"Base.copy","text":"Base.copy(l::ModelList)\nBase.copy(l::ModelList, status)\n\nCopy a ModelList, eventually with new values for the status.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Base.getindex-Union{Tuple{T}, Tuple{T, Any}} where T<:ModelList","page":"API","title":"Base.getindex","text":"getindex(component<:ModelList, key::Symbol)\ngetindex(component<:ModelList, key)\n\nIndexing a component models structure:     - with an integer, will return the status at the ith time-step     - with anything else (Symbol, String) will return the required variable from the status\n\nExamples\n\nlm = ModelList(\n    energy_balance = Monteith(),\n    photosynthesis = Fvcb(),\n    stomatal_conductance = ConstantGs(0.0, 0.0011),\n    status = (Cᵢ = 380.0, Tₗ = [20.0, 25.0])\n)\n\nlm[:Tₗ] # Returns the value of the Tₗ variable\nlm[2]  # Returns the status at the second time-step\nlm[2][:Tₗ] # Returns the value of Tₗ at the second time-step\nlm[:Tₗ][2] # Equivalent of the above\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.EF-Tuple{Any, Any}","page":"API","title":"PlantBiophysics.EF","text":"EF(obs,sim)\n\nReturns the Efficiency Factor between observations `obs` and simulations `sim` using NSE (Nash-Sutcliffe efficiency) model.\nMore information can be found at https://en.wikipedia.org/wiki/Nash%E2%80%93Sutcliffe_model_efficiency_coefficient.\n\nThe closer to 1 the better.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.Fvcb_net_assimiliation-NTuple{6, Any}","page":"API","title":"PlantBiophysics.Fvcb_net_assimiliation","text":"Fvcb_net_assimiliation(Cᵢ,Vⱼ,Γˢ,VcMax,Km,Rd)\n\nNet assimilation following the Farquhar–von Caemmerer–Berry (FvCB) model for C3 photosynthesis (Farquhar et al., 1980; von Caemmerer and Farquhar, 1981)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.RMSE-Tuple{Any, Any}","page":"API","title":"PlantBiophysics.RMSE","text":"RMSE(obs,sim)\n\nReturns the Root Mean Squared Error between observations `obs` and simulations `sim`.\n\nThe closer to 0 the better.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.air_density-NTuple{4, Any}","page":"API","title":"PlantBiophysics.air_density","text":"air_density(Tₐ, P)\nair_density(Tₐ, P, Rd, K₀)\n\nρ, the air density (kg m-3).\n\nArguments\n\nTₐ (Celsius degree): air temperature\nP (kPa): air pressure\nRd (J kg-1 K-1): gas constant of dry air (see Foken p. 245, or R bigleaf package).\nK₀ (Celsius degree): temperature in Celsius degree at 0 Kelvin\n\nNote\n\nRd and K₀ are Taken from Constants if not provided.\n\nReferences\n\nFoken, T, 2008: Micrometeorology. Springer, Berlin, Germany.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.arrhenius","page":"API","title":"PlantBiophysics.arrhenius","text":"arrhenius(A,Eₐ,Tₖ,Tᵣₖ,R = Constants().R)\n\nThe Arrhenius function for dependence of the rate constant of a chemical reaction.\n\nArguments\n\nA: pre-exponential factor, a constant for each chemical reaction\nEₐ: activation energy for the reaction (J mol^-1)\nTₖ: temperature (Kelvin)\nTᵣₖ: reference temperature (Kelvin) at which A was measured\nR: universal gas constant (J mol^-1 K^-1)\n\nExamples\n\n# Importing physical constants\nconstants = Constants()\n# Using default values for the model:\nA = Fvcb()\n\n# Computing Jmax:\narrhenius(A.JMaxRef,A.Eₐⱼ,28.0-constants.K₀,A.Tᵣ-constants.K₀,constants.R)\n# ! Warning: temperatures must be given in Kelvin\n\n# Computing Vcmax:\narrhenius(A.VcMaxRef,A.Eₐᵥ,28.0-constants.K₀,A.Tᵣ-constants.K₀,constants.R)\n\n\n\n\n\n","category":"function"},{"location":"functions/#PlantBiophysics.arrhenius-2","page":"API","title":"PlantBiophysics.arrhenius","text":"arrhenius(A,Eₐ,Tₖ,Tᵣₖ,Hd,Δₛ,R = Constants().R)\n\nThe Arrhenius function for dependence of the rate constant of a chemical reaction, modified following equation (17) from Medlyn et al. (2002) to consider the negative effect of very high temperatures.\n\nArguments\n\nA: the pre-exponential factor, a constant for each chemical reaction\nEₐ: activation energy (J mol^-1), or the exponential rate of rise\n\nof the function (Ha in the equation of Medlyn et al. (2002))\n\nTₖ: current temperature (Kelvin)\nTᵣₖ: reference temperature (Kelvin) at which A was measured\nHd: rate of decrease of the function above the optimum (called EDVJ in\n\nMAESPA and plantecophys)\n\nΔₛ: entropy factor\nR: is the universal gas constant (J mol^-1 K^-1)\n\nReferences\n\nMedlyn, B. E., E. Dreyer, D. Ellsworth, M. Forstreuter, P. C. Harley, M. U. F. Kirschbaum, X. Le Roux, et al. 2002. « Temperature response of parameters of a biochemically based model of photosynthesis. II. A review of experimental data ». Plant, Cell & Environment 25 (9): 1167‑79. https://doi.org/10.1046/j.1365-3040.2002.00891.x.\n\nExamples\n\n# Importing physical constants\nconstants = Constants()\n# Using default values for the model:\nA = Fvcb()\n\n# Computing Jmax:\nPlantBiophysics.arrhenius(A.JMaxRef,A.Eₐⱼ,28.0-constants.K₀,A.Tᵣ-constants.K₀,A.Hdⱼ,A.Δₛⱼ)\n# ! Warning: temperatures must be given in Kelvin\n\n# Computing Vcmax:\nPlantBiophysics.arrhenius(A.VcMaxRef,A.Eₐᵥ,28.0-constants.K₀,A.Tᵣ-constants.K₀,A.Hdᵥ,A.Δₛᵥ)\n\n\n\n\n\n\n","category":"function"},{"location":"functions/#PlantBiophysics.black_body-Tuple{Any, Any, Any}","page":"API","title":"PlantBiophysics.black_body","text":"black_body(T, K₀, σ)\nblack_body(T)\n\nThermal infrared, i.e. longwave radiation emitted from a black body at temperature T.\n\nT: temperature of the object in Celsius degree\nK₀: absolute zero (°C)\nσ (W m^-2 K^-4) Stefan-Boltzmann constant\n\nNote\n\nK₀ and σ are taken from Constants if not provided.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.dep-Tuple{}","page":"API","title":"PlantBiophysics.dep","text":"dep(models::ModelList; verbose::Bool=true)\n\nGet the model dependency tree given a ModelList. If one tree is returned, then all models are coupled. If several trees are returned, then only the models inside each tree are coupled, and the models in different trees are not coupled.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.dr-Tuple{Any, Any}","page":"API","title":"PlantBiophysics.dr","text":"dr(obs,sim)\n\nReturns the Willmott’s refined index of agreement dᵣ.\nWillmot et al. 2011. A refined index of model performance. https://rmets.onlinelibrary.wiley.com/doi/10.1002/joc.2419\n\nThe closer to 1 the better.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.e_sat-Tuple{Any}","page":"API","title":"PlantBiophysics.e_sat","text":"e_sat(T)\n\nSaturated water vapour pressure (es, in kPa) at given temperature T (°C). See Jones (1992) p. 110 for the equation.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.e_sat_slope-Tuple{Any}","page":"API","title":"PlantBiophysics.e_sat_slope","text":"e_sat_slope(T)\n\nSlope of the vapor pressure saturation curve at a given temperature T (°C).\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.energy_balance","page":"API","title":"PlantBiophysics.energy_balance","text":"energy_balance(object, meteo, constants = Constants())\nenergy_balance!(object, meteo, constants = Constants())\n\nComputes the energy balance of one or several components based on the type of the model it was parameterized with in object.energy_balance, and on one or several meteorology time-steps.\n\nAt the moment, two models are implemented in the package:\n\nMonteith: the model found in Monteith and Unsworth (2013)\nMissing: if no computation of the energy balance is needed\n\nArguments\n\nobject: a ModelList, a Dict/Array of ModelList, or an MTG.\nmeteo::Union{AbstractAtmosphere,Weather}: meteorology structure, see Atmosphere or\n\nWeather\n\nconstants = Constants(): physical constants. See Constants for more details\n\nNote\n\nSome models need input values for some variables. For example Monteith requires a value for Rₛ, d and sky_fraction. If you read the models from a file, you can use init_status! (see examples).\n\nExamples\n\n# ---Simple example---\n\nmeteo = Atmosphere(T = 20.0, Wind = 1.0, P = 101.3, Rh = 0.65)\n\n# Using the model of Monteith and Unsworth (2013) for energy, Farquhar et al. (1980) for\n# photosynthesis, and Medlyn et al. (2011) for stomatal conductance:\nleaf =\n    ModelList(\n        energy_balance = Monteith(),\n        photosynthesis = Fvcb(),\n        stomatal_conductance = Medlyn(0.03, 12.0),\n        status = (Rₛ = 13.747, sky_fraction = 1.0, PPFD = 1500.0, d = 0.03)\n    )\n\nenergy_balance(leaf,meteo)\n\n# ---Using several components---\n\nleaf2 = copy(leaf)\nleaf2.status.PPFD = 800.0\n\nenergy_balance([leaf,leaf2],meteo)\n\n# You can use a Dict if you'd like to keep track of the leaf in the returned DataFrame:\nenergy_balance(Dict(:leaf1 => leaf, :leaf2 => leaf2), meteo)\n\n# ---Using several meteo time-steps---\n\nw = Weather([Atmosphere(T = 20.0, Wind = 1.0, P = 101.3, Rh = 0.65),\n             Atmosphere(T = 25.0, Wind = 1.5, P = 101.3, Rh = 0.55)],\n             (site = \"Test site\",))\n\nenergy_balance(leaf, w)\n\n# ---Using several meteo time-steps and several components---\n\nenergy_balance(Dict(:leaf1 => leaf, :leaf2 => leaf2), w)\n\n# ---Using a model file---\n\nmodel = read_model(joinpath(dirname(dirname(pathof(PlantBiophysics))),\"test\",\"inputs\",\"models\",\"plant_coffee.yml\"))\n\n# An example model file is available here:\n# \"https://raw.githubusercontent.com/VEZY/PlantBiophysics/main/test/inputs/models/plant_coffee.yml\"\n\n# Initialising the mandatory variables:\ninit_status!(model, Rₛ = 13.747, sky_fraction = 1.0, PPFD = 1500.0, Tₗ = 25.0, d = 0.03)\n\n# NB: To know which variables has to be initialized according to the models used, you can use\n# `to_initialize(ComponentModels)`, *e.g.*:\nto_initialize(model[\"Leaf\"])\n\n# Running a simulation for all component types in the same scene:\nenergy_balance!(model, meteo)\n\nmodel[\"Leaf\"].status.Rn\nmodel[\"Leaf\"].status.A\nmodel[\"Leaf\"].status.Cᵢ\n\n# ---Simulation on a full plant using an MTG---\n\n\nusing PlantBiophysics, MultiScaleTreeGraph, PlantGeom, GLMakie, Dates\n\nfile = joinpath(dirname(dirname(pathof(PlantBiophysics))), \"test\", \"inputs\", \"scene\", \"opf\", \"coffee.opf\")\nmtg = read_opf(file)\n\n# Import the meteorology:\nmeteo = read_weather(\n    \"archimed/meteo.csv\",\n    :temperature => :T,\n    :relativeHumidity => (x -> x ./ 100) => :Rh,\n    :wind => :Wind,\n    :atmosphereCO2_ppm => :Cₐ,\n    date_format = DateFormat(\"yyyy/mm/dd\")\n)\n\n# Make the models:\nmodels = Dict(\n    \"Leaf\" =>\n        ModelList(\n            energy_balance = Monteith(),\n            photosynthesis = Fvcb(),\n            stomatal_conductance = Medlyn(0.03, 12.0),\n            status = (d = 0.03,)\n        )\n)\n\n# List the MTG attributes:\nnames(mtg)\n# We have the skyFraction already, but not Rₛ and PPFD, so we must compute them first.\n# Rₛ is the shortwave radiation (or global radiation), so it is the sum of Ra_PAR_f and Ra_NIR_f.\n# PPFD is the PAR in μmol m-2 s-1, so Ra_PAR_f * 4.57.\n\n# We can compute them using the following code (transform! comes from MultiScaleTreeGraph.jl):\ntransform!(\n    mtg,\n    [:Ra_PAR_f, :Ra_NIR_f] => ((x, y) -> x + y) => :Rₛ,\n    :Ra_PAR_f => (x -> x * 4.57) => :PPFD,\n    ignore_nothing = true\n)\n\n# Making the simulation:\nenergy_balance!(mtg, models, status, meteo)\n\n# Pull the leaf temperature of the first step:\ntransform!(\n    mtg,\n    :Tₗ => (x -> x[1]) => :Tₗ_1,\n    ignore_nothing = true\n)\n\n# Vizualise the output:\nviz(mtg, color = :Tₗ_1)\n\nReferences\n\nDuursma, R. A., et B. E. Medlyn. 2012. « MAESPA: a model to study interactions between water limitation, environmental drivers and vegetation function at tree and stand levels, with an example application to [CO2] × drought interactions ». Geoscientific Model Development 5 (4): 919‑40. https://doi.org/10.5194/gmd-5-919-2012.\n\nMonteith, John L., et Mike H. Unsworth. 2013. « Chapter 13 - Steady-State Heat Balance: (i) Water Surfaces, Soil, and Vegetation ». In Principles of Environmental Physics (Fourth Edition), edited by John L. Monteith et Mike H. Unsworth, 217‑47. Boston: Academic Press.\n\nSchymanski, Stanislaus J., et Dani Or. 2017. « Leaf-Scale Experiments Reveal an Important Omission in the Penman–Monteith Equation ». Hydrology and Earth System Sciences 21 (2): 685‑706. https://doi.org/10.5194/hess-21-685-2017.\n\nVezy, Rémi, Mathias Christina, Olivier Roupsard, Yann Nouvellon, Remko Duursma, Belinda Medlyn, Maxime Soma, et al. 2018. « Measuring and modelling energy partitioning in canopies of varying complexity using MAESPA model ». Agricultural and Forest Meteorology 253‑254 (printemps): 203‑17. https://doi.org/10.1016/j.agrformet.2018.02.005.\n\n\n\n\n\n","category":"function"},{"location":"functions/#PlantBiophysics.energy_balance!","page":"API","title":"PlantBiophysics.energy_balance!","text":"energy_balance(object, meteo, constants = Constants())\nenergy_balance!(object, meteo, constants = Constants())\n\nComputes the energy balance of one or several components based on the type of the model it was parameterized with in object.energy_balance, and on one or several meteorology time-steps.\n\nAt the moment, two models are implemented in the package:\n\nMonteith: the model found in Monteith and Unsworth (2013)\nMissing: if no computation of the energy balance is needed\n\nArguments\n\nobject: a ModelList, a Dict/Array of ModelList, or an MTG.\nmeteo::Union{AbstractAtmosphere,Weather}: meteorology structure, see Atmosphere or\n\nWeather\n\nconstants = Constants(): physical constants. See Constants for more details\n\nNote\n\nSome models need input values for some variables. For example Monteith requires a value for Rₛ, d and sky_fraction. If you read the models from a file, you can use init_status! (see examples).\n\nExamples\n\n# ---Simple example---\n\nmeteo = Atmosphere(T = 20.0, Wind = 1.0, P = 101.3, Rh = 0.65)\n\n# Using the model of Monteith and Unsworth (2013) for energy, Farquhar et al. (1980) for\n# photosynthesis, and Medlyn et al. (2011) for stomatal conductance:\nleaf =\n    ModelList(\n        energy_balance = Monteith(),\n        photosynthesis = Fvcb(),\n        stomatal_conductance = Medlyn(0.03, 12.0),\n        status = (Rₛ = 13.747, sky_fraction = 1.0, PPFD = 1500.0, d = 0.03)\n    )\n\nenergy_balance(leaf,meteo)\n\n# ---Using several components---\n\nleaf2 = copy(leaf)\nleaf2.status.PPFD = 800.0\n\nenergy_balance([leaf,leaf2],meteo)\n\n# You can use a Dict if you'd like to keep track of the leaf in the returned DataFrame:\nenergy_balance(Dict(:leaf1 => leaf, :leaf2 => leaf2), meteo)\n\n# ---Using several meteo time-steps---\n\nw = Weather([Atmosphere(T = 20.0, Wind = 1.0, P = 101.3, Rh = 0.65),\n             Atmosphere(T = 25.0, Wind = 1.5, P = 101.3, Rh = 0.55)],\n             (site = \"Test site\",))\n\nenergy_balance(leaf, w)\n\n# ---Using several meteo time-steps and several components---\n\nenergy_balance(Dict(:leaf1 => leaf, :leaf2 => leaf2), w)\n\n# ---Using a model file---\n\nmodel = read_model(joinpath(dirname(dirname(pathof(PlantBiophysics))),\"test\",\"inputs\",\"models\",\"plant_coffee.yml\"))\n\n# An example model file is available here:\n# \"https://raw.githubusercontent.com/VEZY/PlantBiophysics/main/test/inputs/models/plant_coffee.yml\"\n\n# Initialising the mandatory variables:\ninit_status!(model, Rₛ = 13.747, sky_fraction = 1.0, PPFD = 1500.0, Tₗ = 25.0, d = 0.03)\n\n# NB: To know which variables has to be initialized according to the models used, you can use\n# `to_initialize(ComponentModels)`, *e.g.*:\nto_initialize(model[\"Leaf\"])\n\n# Running a simulation for all component types in the same scene:\nenergy_balance!(model, meteo)\n\nmodel[\"Leaf\"].status.Rn\nmodel[\"Leaf\"].status.A\nmodel[\"Leaf\"].status.Cᵢ\n\n# ---Simulation on a full plant using an MTG---\n\n\nusing PlantBiophysics, MultiScaleTreeGraph, PlantGeom, GLMakie, Dates\n\nfile = joinpath(dirname(dirname(pathof(PlantBiophysics))), \"test\", \"inputs\", \"scene\", \"opf\", \"coffee.opf\")\nmtg = read_opf(file)\n\n# Import the meteorology:\nmeteo = read_weather(\n    \"archimed/meteo.csv\",\n    :temperature => :T,\n    :relativeHumidity => (x -> x ./ 100) => :Rh,\n    :wind => :Wind,\n    :atmosphereCO2_ppm => :Cₐ,\n    date_format = DateFormat(\"yyyy/mm/dd\")\n)\n\n# Make the models:\nmodels = Dict(\n    \"Leaf\" =>\n        ModelList(\n            energy_balance = Monteith(),\n            photosynthesis = Fvcb(),\n            stomatal_conductance = Medlyn(0.03, 12.0),\n            status = (d = 0.03,)\n        )\n)\n\n# List the MTG attributes:\nnames(mtg)\n# We have the skyFraction already, but not Rₛ and PPFD, so we must compute them first.\n# Rₛ is the shortwave radiation (or global radiation), so it is the sum of Ra_PAR_f and Ra_NIR_f.\n# PPFD is the PAR in μmol m-2 s-1, so Ra_PAR_f * 4.57.\n\n# We can compute them using the following code (transform! comes from MultiScaleTreeGraph.jl):\ntransform!(\n    mtg,\n    [:Ra_PAR_f, :Ra_NIR_f] => ((x, y) -> x + y) => :Rₛ,\n    :Ra_PAR_f => (x -> x * 4.57) => :PPFD,\n    ignore_nothing = true\n)\n\n# Making the simulation:\nenergy_balance!(mtg, models, status, meteo)\n\n# Pull the leaf temperature of the first step:\ntransform!(\n    mtg,\n    :Tₗ => (x -> x[1]) => :Tₗ_1,\n    ignore_nothing = true\n)\n\n# Vizualise the output:\nviz(mtg, color = :Tₗ_1)\n\nReferences\n\nDuursma, R. A., et B. E. Medlyn. 2012. « MAESPA: a model to study interactions between water limitation, environmental drivers and vegetation function at tree and stand levels, with an example application to [CO2] × drought interactions ». Geoscientific Model Development 5 (4): 919‑40. https://doi.org/10.5194/gmd-5-919-2012.\n\nMonteith, John L., et Mike H. Unsworth. 2013. « Chapter 13 - Steady-State Heat Balance: (i) Water Surfaces, Soil, and Vegetation ». In Principles of Environmental Physics (Fourth Edition), edited by John L. Monteith et Mike H. Unsworth, 217‑47. Boston: Academic Press.\n\nSchymanski, Stanislaus J., et Dani Or. 2017. « Leaf-Scale Experiments Reveal an Important Omission in the Penman–Monteith Equation ». Hydrology and Earth System Sciences 21 (2): 685‑706. https://doi.org/10.5194/hess-21-685-2017.\n\nVezy, Rémi, Mathias Christina, Olivier Roupsard, Yann Nouvellon, Remko Duursma, Belinda Medlyn, Maxime Soma, et al. 2018. « Measuring and modelling energy partitioning in canopies of varying complexity using MAESPA model ». Agricultural and Forest Meteorology 253‑254 (printemps): 203‑17. https://doi.org/10.1016/j.agrformet.2018.02.005.\n\n\n\n\n\n","category":"function"},{"location":"functions/#PlantBiophysics.fit","page":"API","title":"PlantBiophysics.fit","text":"fit(::Type{<:AbstractModel}, df; kwargs)\n\nOptimize the parameters of a model using measurements in df and the initialisation values in kwargs. Note that the columns in df should match exactly the names and units used in the model. See particular implementations for more details.\n\n\n\n\n\n","category":"function"},{"location":"functions/#PlantBiophysics.fit-Union{Tuple{T}, Tuple{T, Any}} where T<:Type{Medlyn}","page":"API","title":"PlantBiophysics.fit","text":"fit(::Type{Medlyn}, df)\n\nOptimize the parameters of the Medlyn model. Note that here Gₛ is stomatal conductance for CO2, not H2O.\n\nArguments\n\ndf: a DataFrame with columns A, VPD, Cₐ and Gₛ, where each row is an observation. The column\n\nnames should match exactly.\n\nExamples\n\nusing PlantBiophysics, Plots, DataFrames\n\nfile = joinpath(dirname(dirname(pathof(PlantBiophysics))),\"test\",\"inputs\",\"data\",\"P1F20129.csv\")\ndf = read_walz(file)\n# Removing the CO2 and ligth Curve, we fit the parameters on the Rh curve:\nfilter!(x -> x.curve != \"ligth Curve\" && x.curve != \"CO2 Curve\", df)\n\n# Fit the parameters values:\ng0, g1 = fit(Medlyn, df)\n\n# Re-simulating Gₛ using the newly fitted parameters:\nw = Weather(select(df, :T, :P, :Rh, :Cₐ, :VPD, :T => (x -> 10) => :Wind))\nleaf = ModelList(\n        stomatal_conductance = Medlyn(g0, g1),\n        status = (A = df.A, Cₛ = df.Cₐ, Dₗ = df.VPD)\n    )\nstomatal_conductance!(leaf, w)\n\n# Visualising the results:\ngsAvpd = PlantBiophysics.GsAVPD(g0, g1, df.Gₛ, df.VPD, df.A, df.Cₐ, leaf[:Gₛ])\nplot(gsAvpd,leg=:bottomright)\n# As in [`Medlyn`](@ref) reference paper, linear regression is also plotted.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.fit-Union{Tuple{T}, Tuple{T, Any}} where T<:Union{Type{Fvcb}, Type{FvcbIter}, Type{FvcbRaw}}","page":"API","title":"PlantBiophysics.fit","text":"fit(::Type{Fvcb}, df; Tᵣ = nothing, VcMaxRef = 0., JMaxRef = 0., RdRef = 0., TPURef = 0.)\n\nOptimize the parameters of the Fvcb model. Also works for FvcbIter.\n\nArguments\n\ndf: a DataFrame with columns A, PPFD, Tₗ and Cᵢ, where each row is an observation. The column\n\nnames should match exactly\n\nTᵣ: reference temperature for the optimized parameter values. If not provided, use the average Tₗ.\nVcMaxRef, JMaxRef, RdRef: initialisation values for the parameter optimisation\n\nExamples\n\nusing PlantBiophysics, Plots, DataFrames\n\nfile = joinpath(dirname(dirname(pathof(PlantBiophysics))),\"test\",\"inputs\",\"data\",\"P1F20129.csv\")\ndf = read_walz(file)\n# Removing the Rh and light curves for the fitting because temperature varies\nfilter!(x -> x.curve != \"Rh Curve\" && x.curve != \"ligth Curve\", df)\n\n# Fit the parameter values:\nVcMaxRef, JMaxRef, RdRef, TPURef = fit(Fvcb, df; Tᵣ = 25.0)\n# Note that Tᵣ was set to 25 °C in our response curve. You should adapt its value to what you\n# had during the response curves\n\n# Checking the results:\nfilter!(x -> x.curve == \"CO2 Curve\", df)\n\n# Sort the DataFrame by :Cᵢ to get ordered data point\nsort!(df, :Cᵢ)\n\n# Re-simulating A using the newly fitted parameters:\nleaf =\n    ModelList(\n        photosynthesis = FvcbRaw(VcMaxRef = VcMaxRef, JMaxRef = JMaxRef, RdRef = RdRef, TPURef = TPURef),\n        status = (Tₗ = df.Tₗ, PPFD = df.PPFD, Cᵢ = df.Cᵢ)\n    )\nphotosynthesis!(leaf)\ndf_sim = DataFrame(leaf)\n\n# Visualising the results:\nACi_struct = PlantBiophysics.ACi(VcMaxRef, JMaxRef, RdRef, df.A, df_sim.A, df[:,:Cᵢ], df_sim.Cᵢ)\nplot(ACi_struct,leg=:bottomright)\n\n# Note that we can also simulate the results using the full photosynthesis model too (Fvcb):\n# Adding the windspeed to simulate the boundary-layer conductance (we put a high value):\ndf[!, :Wind] .= 10.0\n\nleaf = ModelList(\n        photosynthesis = Fvcb(VcMaxRef = VcMaxRef, JMaxRef = JMaxRef, RdRef = RdRef, Tᵣ = 25.0, TPURef = TPURef),\n        # stomatal_conductance = ConstantGs(0.0, df[i,:Gₛ]),\n        stomatal_conductance = Medlyn(0.03, 12.),\n        status = (Tₗ = df.Tₗ, PPFD = df.PPFD, Cₛ = df.Cₐ, Dₗ = 0.1)\n    )\n\nw = Weather(select(df, :T, :P, :Rh, :Cₐ, :T => (x -> 10) => :Wind))\nphotosynthesis!(leaf, w)\ndf_sim2 = DataFrame(leaf)\n\n# And finally we plot the results:\nACi_struct_full = PlantBiophysics.ACi(VcMaxRef, JMaxRef, RdRef, df.A, df_sim2.A, df[:,:Cᵢ], df_sim2.Cᵢ)\nplot(ACi_struct_full,leg=:bottomright)\n# Note that the results differ a bit because there are more variables that are re-simulated (e.g. Cᵢ)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.gbh_to_gbw","page":"API","title":"PlantBiophysics.gbh_to_gbw","text":"gbh_to_gbw(gbh, Gbₕ_to_Gbₕ₂ₒ = Constants().Gbₕ_to_Gbₕ₂ₒ)\ngbw_to_gbh(gbh, Gbₕ_to_Gbₕ₂ₒ = Constants().Gbₕ_to_Gbₕ₂ₒ)\n\nBoundary layer conductance for water vapor from boundary layer conductance for heat.\n\nArguments\n\ngbh (m s-1): boundary layer conductance for heat under mixed convection.\nGbₕ_to_Gbₕ₂ₒ: conversion factor.\n\nNote\n\nGbₕ is the sum of free and forced convection. See gbₕ_free and gbₕ_forced.\n\n\n\n\n\n","category":"function"},{"location":"functions/#PlantBiophysics.gbₕ_forced-Tuple{Any, Any}","page":"API","title":"PlantBiophysics.gbₕ_forced","text":"gbₕ_forced(Wind,d)\n\nBoundary layer conductance for heat under forced convection (m s-1). See eq. E1 from Leuning et al. (1995) for more details.\n\nArguments\n\nWind (m s-1): wind speed\nd (m): characteristic dimension, e.g. leaf width (see eq. 10.9 from Monteith and Unsworth, 2013).\n\nNotes\n\nd is the minimal dimension of the surface of an object in contact with the air.\n\nReferences\n\nLeuning, R., F. M. Kelliher, DGG de Pury, et E.-D. SCHULZE. 1995. « Leaf nitrogen, photosynthesis, conductance and transpiration: scaling from leaves to canopies ». Plant, Cell & Environment 18 (10): 1183‑1200.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.gbₕ_free","page":"API","title":"PlantBiophysics.gbₕ_free","text":"gbₕ_free(Tₐ,Tₗ,d,Dₕ₀)\ngbₕ_free(Tₐ,Tₗ,d)\n\nLeaf boundary layer conductance for heat under free convection (m s-1).\n\nArguments\n\nTₐ (°C): air temperature\nTₗ (°C): leaf temperature\nd (m): characteristic dimension, e.g. leaf width (see eq. 10.9 from Monteith and Unsworth, 2013).\nDₕ₀ = 21.5e-6: molecular diffusivity for heat at base temperature. Use value from\n\nConstants if not provided.\n\nNote\n\nR and Dₕ₀ can be found using Constants. To transform in mol m^-2 s^-1, use ms_to_mol.\n\nReferences\n\nLeuning, R., F. M. Kelliher, DGG de Pury, et E.-D. SCHULZE. 1995. « Leaf nitrogen, photosynthesis, conductance and transpiration: scaling from leaves to canopies ». Plant, Cell & Environment 18 (10): 1183‑1200.\n\nMonteith, John, et Mike Unsworth. 2013. Principles of environmental physics: plants, animals, and the atmosphere. Academic Press. Paragraph 10.1.3, eq. 10.9.\n\n\n\n\n\n","category":"function"},{"location":"functions/#PlantBiophysics.get_Cᵢᵥ-NTuple{7, Any}","page":"API","title":"PlantBiophysics.get_Cᵢᵥ","text":"Analytic resolution of Cᵢ when the RuBisCo activity is limiting (μmol mol^-1)\n\nArguments\n\nVcMAX: maximum rate of RuBisCo activity(μmol m^-2 s^-1)\nΓˢ: CO2 compensation point Γ^ (μmol mol^-1)\nCₛ: stomatal CO₂ concentration (μmol mol^-1)\nRd: day respiration (μmol m^-2 s^-1)\ng0: residual stomatal conductance (μmol m^-2 s^-1)\nst_closure: stomatal conductance term computed from a given implementation of a Gs model,\n\ne.g. Medlyn.\n\nKm: effective Michaelis–Menten coefficient for CO2 (μ mol mol^-1)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.get_Cᵢⱼ-NTuple{6, Any}","page":"API","title":"PlantBiophysics.get_Cᵢⱼ","text":"Analytic resolution of Cᵢ when the rate of electron transport is limiting (μmol mol^-1)\n\nArguments\n\nVⱼ: RuBP regeneration (J/4.0, μmol m^-2 s^-1)\nΓˢ: CO2 compensation point Γ^ (μmol mol^-1)\nCₛ: stomatal CO₂ concentration (μmol mol^-1)\nRd: day respiration (μmol m^-2 s^-1)\ng0: residual stomatal conductance (μmol m^-2 s^-1)\nst_closure: stomatal conductance term computed from a given implementation of a Gs model,\n\ne.g. Medlyn.\n\nReferences\n\nDuursma, R. A., et B. E. Medlyn. 2012. « MAESPA: a model to study interactions between water limitation, environmental drivers and vegetation function at tree and stand levels, with an example application to [CO2] × drought interactions ». Geoscientific Model Development 5 (4): 919‑40. https://doi.org/10.5194/gmd-5-919-2012.\n\nWang and Leuning, 1998\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.get_Dₕ","page":"API","title":"PlantBiophysics.get_Dₕ","text":"get_Dₕ(T,Dₕ₀)\nget_Dₕ(T)\n\nDₕ -molecular diffusivity for heat at base temperature- from Dₕ₀ (corrected by temperature). See Monteith and Unsworth (2013, eq. 3.10).\n\nArguments\n\nTₐ (°C): temperature\nDₕ₀: molecular diffusivity for heat at base temperature. Use value from Constants\n\nif not provided.\n\nReferences\n\nMonteith, John, et Mike Unsworth. 2013. Principles of environmental physics: plants, animals, and the atmosphere. Academic Press. Paragraph 10.1.3.\n\n\n\n\n\n","category":"function"},{"location":"functions/#PlantBiophysics.get_J-NTuple{4, Any}","page":"API","title":"PlantBiophysics.get_J","text":"Rate of electron transport J (μmol m^-2 s^-1), computed using the smaller root of the quadratic equation (eq. 4 from Medlyn et al., 2002):\n\nθ * J² - (α * PPFD + JMax) * J + α * PPFD * JMax\n\nNB: we use the smaller root because considering the range of values for θ and α (quite stable), and PPFD and JMax, the function always tends to JMax with high PPFD with the smaller root (behavior we are searching), and the opposite with the larger root.\n\nReturns\n\nA tuple with (A, Gₛ, Cᵢ):\n\nA: carbon assimilation (μmol m-2 s-1)\nGₛ: stomatal conductance (mol m-2 s-1)\nCᵢ: intercellular CO₂ concentration (ppm)\n\nArguments\n\nPPFD: absorbed photon irradiance (μmol_quanta m^-2 s^-1)\nα: quantum yield of electron transport (mol_e mol^-1_quanta)\nJMax: maximum rate of electron transport (μmol m^-2 s^-1)\nθ: determines the shape of the non-rectangular hyperbola (-)\n\nReferences\n\nMedlyn, B. E., E. Dreyer, D. Ellsworth, M. Forstreuter, P. C. Harley, M. U. F. Kirschbaum, X. Le Roux, et al. 2002. « Temperature response of parameters of a biochemically based model of photosynthesis. II. A review of experimental data ». Plant, Cell & Environment 25 (9): 1167‑79. https://doi.org/10.1046/j.1365-3040.2002.00891.x.\n\nVon Caemmerer, Susanna. 2000. Biochemical models of leaf photosynthesis. Csiro publishing.\n\nExamples\n\n# Using default values for the model:\njulia> A = Fvcb()\nFvcb{Float64}(25.0, 200.0, 250.0, 0.6, 9999.0, 46390.0, 210.0, 29680.0, 200000.0, 631.88, 58550.0, 200000.0, 629.26, 0.24, 0.7)\n\njulia> PlantBiophysics.get_J(1500, A.JMaxRef, A.α, A.θ)\n188.17537926909347\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.get_km","page":"API","title":"PlantBiophysics.get_km","text":"Compute the effective Michaelis–Menten coefficient for CO2 Km (μ mol mol^-1) according to Medlyn et al. (2002), equations (5) and (6).\n\nReferences\n\nMedlyn, B. E., E. Dreyer, D. Ellsworth, M. Forstreuter, P. C. Harley, M. U. F. Kirschbaum, X. Le Roux, et al. 2002. « Temperature response of parameters of a biochemically based model of photosynthesis. II. A review of experimental data ». Plant, Cell & Environment 25 (9): 1167‑79. https://doi.org/10.1046/j.1365-3040.2002.00891.x.\n\nExamples\n\n# computing the temperature dependence of γˢ:\nget_km(28,25,210.0)\n\n\n\n\n\n","category":"function"},{"location":"functions/#PlantBiophysics.get_model-Tuple{Any, Any}","page":"API","title":"PlantBiophysics.get_model","text":"get_model(x)\n\nReturn the model (the actual struct) given its name passed as a String.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.get_process-Tuple{Any}","page":"API","title":"PlantBiophysics.get_process","text":"get_process(x)\n\nReturn the process type (the actual struct) given its name passed as a String.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.grey_body-NTuple{4, Any}","page":"API","title":"PlantBiophysics.grey_body","text":"Thermal infrared, i.e. longwave radiation emitted from an object at temperature T.\n\nT: temperature of the object in Celsius degree\nε object emissivity (not to confuse with ε the\n\nratio of molecular weights from Constants). A typical value for a leaf is 0.955.\n\nK₀: absolute zero (°C)\nσ (W m^-2 K^-4) Stefan-Boltzmann constant\n\nNote\n\nK₀ and σ are taken from Constants if not provided.\n\nExamples\n\n# Thermal infrared radiation of water at 25 °C:\ngrey_body(25.0, 0.96)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.gs_closure","page":"API","title":"PlantBiophysics.gs_closure","text":"Constant stomatal closure. Usually called from a photosynthesis model.\n\nNote\n\nmeteo is just declared here for compatibility with other formats of calls.\n\n\n\n\n\n","category":"function"},{"location":"functions/#PlantBiophysics.gs_closure-Tuple{Medlyn, Any, Any, Any}","page":"API","title":"PlantBiophysics.gs_closure","text":"gs_closure(leaf::ModelList,meteo)\n\nStomatal closure for CO₂ according to Medlyn et al. (2011). Carefull, this is just a part of the computation of the stomatal conductance.\n\nThe result of this function is then used as:\n\ngs_mod = gs_closure(leaf,meteo)\n\n# And then stomatal conductance (μmol m-2 s-1) calling [`stomatal_conductance`](@ref):\nGₛ = leaf.stomatal_conductance.g0 + gs_mod * leaf.status.A\n\nArguments\n\n::Medlyn: a medlyn model, usually the leaf model (i.e. leaf.stomatal_conductance)\nleaf::ModelList: A ModelList struct holding the parameters for\n\nthe model.\n\nstatus: A status, usually the leaf status (i.e. leaf.status)\nmeteo: meteorology structure, see Atmosphere. Is not used in this model.\n\nDetails\n\nUse variables() on Medlyn to get the variables that must be instantiated in the ModelList struct.\n\nNotes\n\nCₛ is used instead of Cₐ because Gₛ is between the surface and the intercellular space. The conductance\n\nbetween the atmosphere and the surface is accounted for using the boundary layer conductance (Gbc in Monteith). Medlyn et al. (2011) uses Cₐ in their paper because they relate their models to the measurements made at leaf level, with a well-mixed chamber whereCₛ ≈ Cₐ.\n\nDₗ is forced to be >= 1e-9 because it is used in a squared root. It is prefectly acceptable to\n\nget a negative Dₗ when leaves are re-hydrating from air. Cloud forests are the perfect example. See e.g.: Guzmán‐Delgado, P, Laca, E, Zwieniecki, MA. Unravelling foliar water uptake pathways: The contribution of stomata and the cuticle. Plant Cell Environ. 2021; 1– 13. https://doi.org/10.1111/pce.14041\n\nExamples\n\nmeteo = Atmosphere(T = 20.0, Wind = 1.0, P = 101.3, Rh = 0.65)\n\nleaf =\n    ModelList(\n        stomatal_conductance = Medlyn(0.03, 12.0),\n        status = (Cₛ = 380.0, Dₗ = meteo.VPD)\n    )\n\ngs_mod = gs_closure(leaf, meteo)\n\nA = 20 # example assimilation (μmol m-2 s-1)\nGs = leaf.stomatal_conductance.g0 + gs_mod * A\n\n# Or more directly using `stomatal_conductance()`:\n\nleaf =\n    ModelList(\n        stomatal_conductance = Medlyn(0.03, 12.0),\n        status = (A = A, Cₛ = 380.0, Dₗ = meteo.VPD)\n    )\nstomatal_conductance(leaf,meteo)\n\nReferences\n\nMedlyn, Belinda E., Remko A. Duursma, Derek Eamus, David S. Ellsworth, I. Colin Prentice, Craig V. M. Barton, Kristine Y. Crous, Paolo De Angelis, Michael Freeman, et Lisa Wingate.\n\n« Reconciling the optimal and empirical approaches to modelling stomatal conductance ».\n\nGlobal Change Biology 17 (6): 2134‑44. https://doi.org/10.1111/j.1365-2486.2010.02375.x.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.gsc_to_gsw","page":"API","title":"PlantBiophysics.gsc_to_gsw","text":"gsc_to_gsw(Gₛ, Gsc_to_Gsw = Constants().Gsc_to_Gsw)\n\nConversion of a stomatal conductance for CO₂ into stomatal conductance for H₂O.\n\n\n\n\n\n","category":"function"},{"location":"functions/#PlantBiophysics.gsw_to_gsc","page":"API","title":"PlantBiophysics.gsw_to_gsc","text":"gsw_to_gsc(Gₛ, Gsc_to_Gsw = Constants().Gsc_to_Gsw)\n\nConversion of a stomatal conductance for H₂O into stomatal conductance for CO₂.\n\n\n\n\n\n","category":"function"},{"location":"functions/#PlantBiophysics.init_mtg_models!","page":"API","title":"PlantBiophysics.init_mtg_models!","text":"init_mtg_models!(\n    mtg::MultiScaleTreeGraph.Node,\n    models::Dict{String,<:ModelList},\n    i=nothing;\n    verbose=true,\n    attr_name=:models\n)\n\ninitialize the components of an MTG (i.e. nodes) with the corresponding models.\n\nThe function checks if the models associated to each component of the MTG are fully initialized, and if not, tries to initialize the variables using the MTG attributes with the exact same name, and if not found, returns an error.\n\nArguments\n\nmtg::MultiScaleTreeGraph.Node: the MTG tree.\nmodels::Dict{String,ModelList}: a dictionary of models named by components names\ni=nothing: the time-step to initialize. If nothing, initialize all the time-steps.\nverbose = true: return information during the processes\nattr_name = :models: the node attribute name used to store the models\n\nExamples\n\nusing PlantBiophysics, MultiScaleTreeGraph, PlantGeom\n\n# Read the file\nfile = joinpath(dirname(dirname(pathof(PlantBiophysics))),\"test\",\"inputs\",\"scene\",\"opf\",\"coffee.opf\")\nmtg = read_opf(file)\n\n# Declare our models:\nmodels = Dict(\n    \"Leaf\" =>\n        ModelList(\n            energy_balance = Monteith(),\n            photosynthesis = Fvcb(),\n            stomatal_conductance = Medlyn(0.03, 12.0),\n            status = (d = 0.03,)\n        )\n)\n\n# Checking which variables are needed for our models:\n[component => to_initialize(model) for (component, model) in models]\n# OK we need to initialize Rₛ, sky_fraction and the PPFD\n\n# We can compute them directly inside the MTG from available variables:\ntransform!(\n    mtg,\n    [:Ra_PAR_f, :Ra_NIR_f] => ((x, y) -> x + y) => :Rₛ,\n    :Ra_PAR_f => (x -> x * 4.57) => :PPFD,\n    ignore_nothing = true\n)\n\n# Initialising all components with their corresponding models and initialisations:\ninit_mtg_models!(mtg, models)\n# Note that this is possible only because the initialisation values are found in the MTG.\n# If the initialisations are constant values between components, we can directly initialize\n# them in the models definition (we initialize `:d` like this in our example).\n\n\n\n\n\n","category":"function"},{"location":"functions/#PlantBiophysics.init_status!-Tuple{Dict{String, ModelList}}","page":"API","title":"PlantBiophysics.init_status!","text":"init_status!(object::Dict{String,ModelList};vars...)\ninit_status!(component::ModelList;vars...)\n\nIntialise model variables for components with user input.\n\nExamples\n\nmodel = read_model(\"a-model-file.yml\")\ninit_status!(model, Tₗ = 25.0, PPFD = 1000.0, Cₛ = 400.0, Dₗ = 1.2)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.init_variables-Tuple{T} where T<:AbstractModel","page":"API","title":"PlantBiophysics.init_variables","text":"init_variables(models...)\n\nIntialized model variables with their default values. The variables are taken from the inputs and outputs of the models.\n\nExamples\n\ninit_variables(Monteith())\ninit_variables(energy_balance = Monteith(), stomatal_conductance = Medlyn(0.03,12.0))\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.init_variables_manual-Tuple{Any, Any}","page":"API","title":"PlantBiophysics.init_variables_manual","text":"init_variables_manual(models...;vars...)\n\nReturn an initialisation of the model variables with given values.\n\nExamples\n\ninit_variables_manual(status, (Tₗ = 20.0,))\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.inputs-Tuple{T} where T<:AbstractModel","page":"API","title":"PlantBiophysics.inputs","text":"inputs(model::AbstractModel)\ninputs(...)\n\nGet the inputs of one or several models.\n\nReturns an empty tuple by default for AbstractModels (no inputs) or Missing models.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.instantiate-NTuple{4, Any}","page":"API","title":"PlantBiophysics.instantiate","text":"instantiate(x)\n\nInstantiate a model given its parameter names, considering that parameter names can be different compared to the model fields (used to insure compatibility with Archimed).\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.is_initialized-Tuple{T} where T<:ModelList","page":"API","title":"PlantBiophysics.is_initialized","text":"is_initialized(m::T) where T <: ModelList\nis_initialized(m::T, models...) where T <: ModelList\n\nCheck if the variables that must be initialized are, and return true if so, and false and an information message if not.\n\nNote\n\nThere is no way to know before-hand which process will be simulated by the user, so if you have a component with a model for each process, the variables to initialize are always the smallest subset of all, meaning it is considered the user will simulate the variables needed for other models.\n\nExamples\n\nleaf = ModelList(photosynthesis = Fvcb(), stomatal_conductance = Medlyn(0.03,12.0))\nis_initialized(leaf)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.is_model-Tuple{Any}","page":"API","title":"PlantBiophysics.is_model","text":"is_model(model)\n\nCheck if a model object has the\"Group\" and \"Type\" keys as the first level of a Dict type object. But the function is generic as long as the input struct has a keys() method.\n\nExamples\n\nmodels = read_model(\"path_to_a_model_file.yaml\")\nis_model(models)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.latent_heat-NTuple{8, Any}","page":"API","title":"PlantBiophysics.latent_heat","text":"latent_heat(Rn, VPD, γˢ, Rbₕ, Δ, ρ, aₛₕ, Cₚ)\nlatent_heat(Rn, VPD, γˢ, Rbₕ, Δ, ρ, aₛₕ)\n\nλE -the latent heat flux (W m-2)- using the Monteith and Unsworth (2013) definition corrected by Schymanski et al. (2017), eq.22.\n\nRn (W m-2): net radiation. Carefull: not the isothermal net radiation\nVPD (kPa): air vapor pressure deficit\nγˢ (kPa K−1): apparent value of psychrometer constant (see γ_star)\nRbₕ (s m-1): resistance for heat transfer by convection, i.e. resistance to sensible heat\nΔ (KPa K-1): rate of change of saturation vapor pressure with temperature (see e_sat_slope)\nρ (kg m-3): air density of moist air.\naₛₕ (1,2): number of sides that exchange energy for heat (2 for leaves)\nCₚ (J K-1 kg-1): specific heat of air for constant pressure\n\nReferences\n\nMonteith, J. and Unsworth, M., 2013. Principles of environmental physics: plants, animals, and the atmosphere. Academic Press. See eq. 13.33.\n\nSchymanski et al. (2017), Leaf-scale experiments reveal an important omission in the Penman–Monteith equation, Hydrology and Earth System Sciences. DOI: https://doi.org/10.5194/hess-21-685-2017. See equ. 22.\n\nExamples\n\nTₐ = 20.0 ; P = 100.0 ;\nρ = air_density(Tₐ, P) # in kg m-3\nΔ = e_sat_slope(Tₐ)\n\nlatent_heat(300.0, 2.0, 0.1461683, 50.0, Δ, ρ, 2.0)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.latent_heat_vaporization-Tuple{Any, Any}","page":"API","title":"PlantBiophysics.latent_heat_vaporization","text":"latent_heat_vaporization(Tₐ,λ₀)\nlatent_heat_vaporization(Tₐ)\n\nλ, the latent heat of vaporization for water (J kg-1).\n\nArguments\n\nTₐ (°C): air temperature\nλ₀: latent heat of vaporization for water at 0 degree Celsius. Taken from Constants().λ₀\n\nif not provided (see Constants).\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.light_interception","page":"API","title":"PlantBiophysics.light_interception","text":"light_interception(object, meteo, constants = Constants())\nlight_interception!(object, meteo, constants = Constants())\n\nComputes the light interception of one or several objects based on the type of the model it was parameterized with in object.light_interception, and on one or several meteorology time-steps.\n\nAt the moment, two models are implemented in the package:\n\nBeer: the Beer-Lambert law of ligth extinction\nIgnore: ignore the computation of light interception (this one is for backward\n\ncompatibility with ARCHIMED-ϕ)\n\nArguments\n\nobject: a ModelList, a Dict/Array of ModelList, or an MTG.\nmeteo::Union{AbstractAtmosphere,Weather}: meteorology structure, see Atmosphere or\n\nWeather\n\nconstants = Constants(): physical constants. See Constants for more details\n\nNote\n\nSome models need input values for some variables. For example Beer requires a value for LAI, the leaf area index. If you read the models from a file, you can use init_status!.\n\nExamples\n\nm = ModelList(light_interception=Beer(0.5), status=(LAI=2.0,))\n\nmeteo = Atmosphere(T=20.0, Wind=1.0, P=101.3, Rh=0.65, Ri_PAR_f=300.0)\n\nlight_interception!(m, meteo)\n\nm[:aPAR]\n\n\n\n\n\n","category":"function"},{"location":"functions/#PlantBiophysics.light_interception!","page":"API","title":"PlantBiophysics.light_interception!","text":"light_interception(object, meteo, constants = Constants())\nlight_interception!(object, meteo, constants = Constants())\n\nComputes the light interception of one or several objects based on the type of the model it was parameterized with in object.light_interception, and on one or several meteorology time-steps.\n\nAt the moment, two models are implemented in the package:\n\nBeer: the Beer-Lambert law of ligth extinction\nIgnore: ignore the computation of light interception (this one is for backward\n\ncompatibility with ARCHIMED-ϕ)\n\nArguments\n\nobject: a ModelList, a Dict/Array of ModelList, or an MTG.\nmeteo::Union{AbstractAtmosphere,Weather}: meteorology structure, see Atmosphere or\n\nWeather\n\nconstants = Constants(): physical constants. See Constants for more details\n\nNote\n\nSome models need input values for some variables. For example Beer requires a value for LAI, the leaf area index. If you read the models from a file, you can use init_status!.\n\nExamples\n\nm = ModelList(light_interception=Beer(0.5), status=(LAI=2.0,))\n\nmeteo = Atmosphere(T=20.0, Wind=1.0, P=101.3, Rh=0.65, Ri_PAR_f=300.0)\n\nlight_interception!(m, meteo)\n\nm[:aPAR]\n\n\n\n\n\n","category":"function"},{"location":"functions/#PlantBiophysics.mol_to_ms-NTuple{5, Any}","page":"API","title":"PlantBiophysics.mol_to_ms","text":"ms_to_mol(G,T,P,R,K₀)\nms_to_mol(G,T,P)\n\nConversion of a conductance G from mol m^-2 s^-1 to m s^-1.\n\nArguments\n\nG (m s^-1): conductance\nT (°C): air temperature\nP (kPa): air pressure\nR (J mol^-1 K^-1): universal gas constant.\nK₀ (°C): absolute zero\n\nSee also\n\nms_to_mol for the inverse process.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.ms_to_mol-NTuple{5, Any}","page":"API","title":"PlantBiophysics.ms_to_mol","text":"ms_to_mol(G,T,P,R,K₀)\nms_to_mol(G,T,P)\n\nConversion of a conductance G from m s^-1 to mol m^-2 s^-1.\n\nArguments\n\nG (m s^-1): conductance\nT (°C): air temperature\nP (kPa): air pressure\nR (J mol^-1 K^-1): universal gas constant.\nK₀ (°C): absolute zero\n\nSee also\n\nmol_to_ms for the inverse process.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.net_longwave_radiation-NTuple{7, Any}","page":"API","title":"PlantBiophysics.net_longwave_radiation","text":"net_longwave_radiation(T₁,T₂,ε₁,ε₂,F₁,K₀,σ)\nnet_longwave_radiation(T₁,T₂,ε₁,ε₂,F₁)\n\nNet longwave radiation fluxes (i.e. thermal radiation, W m-2) between an object and another. The object of interest is at temperature T₁ and has an emissivity ε₁, and the object with which it exchanges energy is at temperature T₂ and has an emissivity ε₂.\n\nIf the result is positive, then the object of interest gain energy.\n\nArguments\n\nT₁ (Celsius degree): temperature of the target object (object 1)\nT₂ (Celsius degree): temperature of the object with which there is potential exchange (object 2)\nε₁: object 1 emissivity\nε₂: object 2 emissivity\nF₁: view factor (0-1), i.e. visible fraction of object 2 from object 1 (see note)\nK₀: absolute zero (°C)\nσ (W m^-2 K^-4) Stefan-Boltzmann constant\n\nNote\n\nF₁, the view factor (also called shape factor) is a coefficient applied to the semi-hemisphere field of view of object 1 that \"sees\" object 2. E.g. a leaf can be viewed as a plane. If one side of the leaf sees only object 2 in its field of view (e.g. the sky), then F₁ = 1. Then the net longwave radiation flux for this part of the leaf is multiplied by its actual surface to get the exchange. Note that we apply reciprocity between the two objects for the view factor (they have the same value), i.e.: A₁F₁₂ = A₂F₂₁.\n\nThen, if we take a leaf as object 1, and the sky as object 2, the visible fraction of sky viewed by the leaf would be:\n\n0.5 if the leaf is on top of the canopy, i.e. the upper side of the leaf sees the sky,\n\nthe side bellow sees other leaves and the soil.\n\nbetween 0 and 0.5 if it is within the canopy and partly shaded by other objects.\n\nNote that A₁ for a leaf is twice its common used leaf area, because A₁ is the total leaf area of the object that exchange energy.\n\n# Net thermal radiation fluxes between a leaf and the sky considering the leaf at the top of\n# the canopy:\nTₗ = 25.0 ; Tₐ = 20.0\nε₁ = 0.955 ; ε₂ = 1.0\nRₗₗ = net_longwave_radiation(Tₗ,Tₐ,ε₁,ε₂,1.0)\nRₗₗ\n\n# Rₗₗ is the net longwave radiation flux between the leaf and the atmosphere per surface area.\n# To get the actual net longwave radiation flux we need to multiply by the surface of the\n# leaf, e.g. for a leaf of 2cm²:\nleaf_area = 2e-4 # in m²\nRₗₗ * leaf_area\n\n# The leaf lose ~0.0055 W towards the atmosphere.\n\nReferences\n\nCengel, Y, et Transfer Mass Heat. 2003. A practical approach. New York, NY, USA: McGraw-Hill.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.outputs-Tuple{T} where T<:AbstractModel","page":"API","title":"PlantBiophysics.outputs","text":"outputs(model::AbstractModel)\noutputs(...)\n\nGet the outputs of one or several models.\n\nReturns an empty tuple by default for AbstractModels (no outputs) or Missing models.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.photosynthesis","page":"API","title":"PlantBiophysics.photosynthesis","text":"photosynthesis(object, meteo, constants = Constants())\nphotosynthesis!(object, meteo, constants = Constants())\n\nGeneric photosynthesis model for photosynthetic organs. Computes the assimilation and stomatal conductance according to the models set in (or each component in) object.\n\nThe models used are defined by the types of the photosynthesis and stomatal_conductance fields of leaf. For exemple to use the implementation of the Farquhar–von Caemmerer–Berry (FvCB) model (see photosynthesis), the leaf.photosynthesis field should be of type Fvcb.\n\nArguments\n\nobject: a ModelList, a Dict/Array of ModelList, or an MTG.\nmeteo::Union{AbstractAtmosphere,Weather}: meteorology structure, see Atmosphere or\n\nWeather\n\nconstants = Constants(): physical constants. See Constants for more details\n\nExamples\n\nmeteo = Atmosphere(T = 20.0, Wind = 1.0, P = 101.3, Rh = 0.65)\n\n# Using Fvcb model:\nleaf =\n    ModelList(\n        photosynthesis = Fvcb(),\n        stomatal_conductance = Medlyn(0.03, 12.0),\n        status = (Tₗ = 25.0, PPFD = 1000.0, Cₛ = 400.0, Dₗ = meteo.VPD)\n    )\n\nphotosynthesis(leaf, meteo)\n\n# ---Using several components---\n\nleaf2 = copy(leaf)\nleaf2.status.PPFD = 800.0\n\nphotosynthesis([leaf,leaf2],meteo)\n\n# ---Using several meteo time-steps---\n\nw = Weather(\n        [\n            Atmosphere(T = 20.0, Wind = 1.0, P = 101.3, Rh = 0.65),\n            Atmosphere(T = 25.0, Wind = 1.5, P = 101.3, Rh = 0.55)\n        ],\n        (site = \"Test site,)\n    )\n\nphotosynthesis(leaf, w)\n\n# ---Using several meteo time-steps and several components---\n\nphotosynthesis(Dict(:leaf1 => leaf, :leaf2 => leaf2), w)\n\n# Using a model file:\n\nmodel = read_model(\"a-model-file.yml\")\n\n# Initialising the mandatory variables:\ninit_status!(model, Tₗ = 25.0, PPFD = 1000.0, Cₛ = 400.0, Dₗ = meteo.VPD)\n\n# Running a simulation for all component types in the same scene:\nphotosynthesis!(model, meteo)\nmodel[\"Leaf\"].status.A\n\n\n\n\n\n\n","category":"function"},{"location":"functions/#PlantBiophysics.photosynthesis!","page":"API","title":"PlantBiophysics.photosynthesis!","text":"photosynthesis(object, meteo, constants = Constants())\nphotosynthesis!(object, meteo, constants = Constants())\n\nGeneric photosynthesis model for photosynthetic organs. Computes the assimilation and stomatal conductance according to the models set in (or each component in) object.\n\nThe models used are defined by the types of the photosynthesis and stomatal_conductance fields of leaf. For exemple to use the implementation of the Farquhar–von Caemmerer–Berry (FvCB) model (see photosynthesis), the leaf.photosynthesis field should be of type Fvcb.\n\nArguments\n\nobject: a ModelList, a Dict/Array of ModelList, or an MTG.\nmeteo::Union{AbstractAtmosphere,Weather}: meteorology structure, see Atmosphere or\n\nWeather\n\nconstants = Constants(): physical constants. See Constants for more details\n\nExamples\n\nmeteo = Atmosphere(T = 20.0, Wind = 1.0, P = 101.3, Rh = 0.65)\n\n# Using Fvcb model:\nleaf =\n    ModelList(\n        photosynthesis = Fvcb(),\n        stomatal_conductance = Medlyn(0.03, 12.0),\n        status = (Tₗ = 25.0, PPFD = 1000.0, Cₛ = 400.0, Dₗ = meteo.VPD)\n    )\n\nphotosynthesis(leaf, meteo)\n\n# ---Using several components---\n\nleaf2 = copy(leaf)\nleaf2.status.PPFD = 800.0\n\nphotosynthesis([leaf,leaf2],meteo)\n\n# ---Using several meteo time-steps---\n\nw = Weather(\n        [\n            Atmosphere(T = 20.0, Wind = 1.0, P = 101.3, Rh = 0.65),\n            Atmosphere(T = 25.0, Wind = 1.5, P = 101.3, Rh = 0.55)\n        ],\n        (site = \"Test site,)\n    )\n\nphotosynthesis(leaf, w)\n\n# ---Using several meteo time-steps and several components---\n\nphotosynthesis(Dict(:leaf1 => leaf, :leaf2 => leaf2), w)\n\n# Using a model file:\n\nmodel = read_model(\"a-model-file.yml\")\n\n# Initialising the mandatory variables:\ninit_status!(model, Tₗ = 25.0, PPFD = 1000.0, Cₛ = 400.0, Dₗ = meteo.VPD)\n\n# Running a simulation for all component types in the same scene:\nphotosynthesis!(model, meteo)\nmodel[\"Leaf\"].status.A\n\n\n\n\n\n\n","category":"function"},{"location":"functions/#PlantBiophysics.photosynthesis!_","page":"API","title":"PlantBiophysics.photosynthesis!_","text":"photosynthesis!_(::Fvcb, models, status, meteo, constants=Constants())\n\nCoupled photosynthesis and conductance model using the Farquhar–von Caemmerer–Berry (FvCB) model for C3 photosynthesis (Farquhar et al., 1980; von Caemmerer and Farquhar, 1981) that models the assimilation as the most limiting factor between three processes:\n\nRuBisCo-limited photosynthesis, when the kinetics of the RuBisCo enzyme for fixing\n\nCO₂ is at its maximum (RuBisCo = Ribulose-1,5-bisphosphate carboxylase-oxygenase). It happens mostly when the CO₂ concentration in the stomata is too low. The main parameter is VcMaxRef, the maximum rate of RuBisCo activity at reference temperature. See get_Cᵢᵥ for the computation.\n\nRuBP-limited photosynthesis, when the rate of RuBP (ribulose-1,5-bisphosphate) regeneration\n\nassociated with electron transport rates on the thylakoid membrane (RuBP) is limiting. It happens mostly when light is limiting, or when CO₂ concentration is rather high. It is parameterized using JMaxRef, the potential rate of electron transport. See get_Cᵢⱼ for the computation.\n\nTPU-limited photosynthesis, when the rate at which inorganic phosphate is released for\n\nregenerating ATP from ADP during the utilization of triose phosphate (TPU) is limiting. It happens at very high assimilation rate, when neither light or CO₂ are limiting factors. The parameter is TPURef.\n\nThe computation in this function is made following Farquhar & Wong (1984), Leuning et al. (1995), and the MAESPA model (Duursma et al., 2012).\n\nThe resolution is analytical as first presented in Baldocchi (1994), and needs Cₛ as input. Triose phosphate utilization (TPU) limitation is taken into account as proposed in Lombardozzi (2018) (i.e. Aₚ = 3 * TPURef, making the assumption that glycolate recycling is set to 0). TPURef is set at 9999.0 by default, meaning there is no limitation of photosynthesis by TPU. Note that TPURef can be (badly) approximated using the simple equation TPURef = 0.167 * VcMaxRef as presented in Lombardozzi (2018).\n\nIf you prefer to use Gbc, you can use the iterative implementation of the Fvcb model FvcbIter\n\nIf you want a version that is de-coupled from the stomatal conductance use FvcbRaw, but you'll need Cᵢ as input of the model.\n\nReturns\n\nModify the first argument in place for A, Gₛ and Cᵢ:\n\nA: carbon assimilation (μmol[CO₂] m-2 s-1)\nGₛ: stomatal conductance for CO₂ (mol[CO₂] m-2 s-1)\nCᵢ: intercellular CO₂ concentration (ppm)\n\nArguments\n\n::Fvcb: the Farquhar–von Caemmerer–Berry (FvCB) model\nmodels: a ModelList struct holding the parameters for the model with\n\ninitialisations for:     - Tₗ (°C): leaf temperature     - PPFD (μmol m-2 s-1): absorbed Photosynthetic Photon Flux Density     - Cₛ (ppm): surface CO₂ concentration.     - Dₗ (kPa): vapour pressure difference between the surface and the saturated     air vapour pressure in case you're using the stomatal conductance model of Medlyn.\n\nstatus: A status, usually the leaf status (i.e. leaf.status)\nmeteo: meteorology structure, see Atmosphere\nconstants = Constants(): physical constants. See Constants for more details\n\nNote\n\nTₗ, PPFD, Cₛ (and Dₗ if you use Medlyn) must be initialized by providing them as keyword arguments (see examples). If in doubt, it is simpler to compute the energy balance of the leaf with the photosynthesis to get those variables. See energy_balance for more details.\n\nExamples\n\nmeteo = Atmosphere(T = 20.0, Wind = 1.0, P = 101.3, Rh = 0.65)\n\nleaf =\n    ModelList(\n        photosynthesis = Fvcb(),\n        stomatal_conductance = Medlyn(0.03, 12.0),\n        status = (Tₗ = 25.0, PPFD = 1000.0, Cₛ = 400.0, Dₗ = meteo.VPD)\n    )\n# NB: we need  to initalise Tₗ, PPFD and Cₛ\n\nphotosynthesis!(leaf,meteo,Constants())\nleaf.status.A\nleaf.status.Cᵢ\n\nReferences\n\nBaldocchi, Dennis. 1994. « An analytical solution for coupled leaf photosynthesis and stomatal conductance models ». Tree Physiology 14 (7-8‑9): 1069‑79. https://doi.org/10.1093/treephys/14.7-8-9.1069.\n\nDuursma, R. A., et B. E. Medlyn. 2012. « MAESPA: a model to study interactions between water limitation, environmental drivers and vegetation function at tree and stand levels, with an example application to [CO2] × drought interactions ». Geoscientific Model Development 5 (4): 919‑40. https://doi.org/10.5194/gmd-5-919-2012.\n\nFarquhar, G. D., S. von von Caemmerer, et J. A. Berry. 1980. « A biochemical model of photosynthetic CO2 assimilation in leaves of C3 species ». Planta 149 (1): 78‑90.\n\nLeuning, R., F. M. Kelliher, DGG de Pury, et E.D. Schulze. 1995. « Leaf nitrogen, photosynthesis, conductance and transpiration: scaling from leaves to canopies ». Plant, Cell & Environment 18 (10): 1183‑1200.\n\nLombardozzi, L. D. et al. 2018.« Triose phosphate limitation in photosynthesis models reduces leaf photosynthesis and global terrestrial carbon storage ». Environmental Research Letters 13.7: 1748-9326. https://doi.org/10.1088/1748-9326/aacf68.\n\n\n\n\n\n","category":"function"},{"location":"functions/#PlantBiophysics.photosynthesis!_-2","page":"API","title":"PlantBiophysics.photosynthesis!_","text":"photosynthesis!_(::FvcbIter, models, status, meteo, constants=Constants())\n\nPhotosynthesis using the Farquhar–von Caemmerer–Berry (FvCB) model for C3 photosynthesis  (Farquhar et al., 1980; von Caemmerer and Farquhar, 1981). Computation is made following Farquhar & Wong (1984), Leuning et al. (1995), and the Archimed model.\n\nIterative implementation, i.e. the assimilation is computed iteratively over Cᵢ. For the analytical resolution, see Fvcb.\n\nReturns\n\nModify the first argument in place for A, Gₛ and Cᵢ:\n\nA: carbon assimilation (μmol[CO₂] m-2 s-1)\nGₛ: stomatal conductance for CO₂ (mol[CO₂] m-2 s-1)\nCᵢ: intercellular CO₂ concentration (ppm)\n\nArguments\n\n::FvcbIter: Farquhar–von Caemmerer–Berry (FvCB) model with iterative resolution.\nmodels: a ModelList struct holding the parameters for the model with\n\ninitialisations for:     - Tₗ (°C): leaf temperature     - PPFD (μmol m-2 s-1): absorbed Photosynthetic Photon Flux Density     - Gbc (mol m-2 s-1): boundary conductance for CO₂     - Dₗ (kPa): is the difference between the vapour pressure at the leaf surface and the     saturated air vapour pressure in case you're using the stomatal conductance model of Medlyn.\n\nstatus: A status, usually the leaf status (i.e. leaf.status)\nmeteo: meteorology structure, see Atmosphere\nconstants = Constants(): physical constants. See Constants for more details\n\nNote\n\nTₗ, PPFD, Gbc (and Dₗ if you use Medlyn) must be initialized by providing them as keyword arguments (see examples). If in doubt, it is simpler to compute the energy balance of the leaf with the photosynthesis to get those variables. See energy_balance for more details.\n\nExamples\n\nmeteo = Atmosphere(T = 20.0, Wind = 1.0, P = 101.3, Rh = 0.65)\n\nleaf =\n    ModelList(\n        photosynthesis = FvcbIter(),\n        stomatal_conductance = Medlyn(0.03, 12.0),\n        status = (Tₗ = 25.0, PPFD = 1000.0, Gbc = 0.67, Dₗ = meteo.VPD)\n    )\n# NB: we need  to initalise Tₗ, PPFD and Gbc.\n\nphotosynthesis!_(leaf,meteo,Constants())\nleaf.status.A\nleaf.status.Cᵢ\n\nReferences\n\nBaldocchi, Dennis. 1994. « An analytical solution for coupled leaf photosynthesis and stomatal conductance models ». Tree Physiology 14 (7-8‑9): 1069‑79. https://doi.org/10.1093/treephys/14.7-8-9.1069.\n\nFarquhar, G. D., S. von von Caemmerer, et J. A. Berry. 1980. « A biochemical model of photosynthetic CO2 assimilation in leaves of C3 species ». Planta 149 (1): 78‑90.\n\nLeuning, R., F. M. Kelliher, DGG de Pury, et E.D. Schulze. 1995. Leaf nitrogen, photosynthesis, conductance and transpiration: scaling from leaves to canopies ». Plant, Cell & Environment 18 (10): 1183‑1200.\n\n\n\n\n\n","category":"function"},{"location":"functions/#PlantBiophysics.photosynthesis!_-3","page":"API","title":"PlantBiophysics.photosynthesis!_","text":"photosynthesis!_(::ConstantA; models, status, meteo, constants=Constants())\n\nConstant photosynthesis (forcing the value).\n\nReturns\n\nModify the leaf status in place for A with a constant value:\n\nA: carbon assimilation, set to leaf.photosynthesis.A (μmol[CO₂] m-2 s-1)\n\nArguments\n\n::ConstantA: a constant assimilation model\nmodels: a ModelList struct holding the parameters for the model.\nstatus: A status, usually the leaf status (i.e. leaf.status)\nmeteo: meteorology structure, see Atmosphere\nconstants = Constants(): physical constants. See Constants for more details\n\nExamples\n\nmeteo = Atmosphere(T = 20.0, Wind = 1.0, P = 101.3, Rh = 0.65)\nleaf = ModelList(photosynthesis = ConstantA(26.0))\n\nphotosynthesis!(leaf,meteo,Constants())\n\nleaf.status.A\n\n\n\n\n\n","category":"function"},{"location":"functions/#PlantBiophysics.photosynthesis!_-4","page":"API","title":"PlantBiophysics.photosynthesis!_","text":"photosynthesis!_(::FvcbRaw, models, status, meteo=nothing, constants=Constants())\n\nDirect implementation of the photosynthesis model for C3 photosynthesis from Farquhar–von Caemmerer–Berry (Farquhar et al., 1980; von Caemmerer and Farquhar, 1981).\n\nReturns\n\nModify the first argument in place for A, the carbon assimilation (μmol[CO₂] m-2 s-1).\n\nArguments\n\n::FvcbRaw: the Farquhar–von Caemmerer–Berry (FvCB) model (not coupled)\nmodels: a ModelList struct holding the parameters for the model with\n\ninitialisations for:     - Tₗ (°C): leaf temperature     - PPFD (μmol m-2 s-1): absorbed Photosynthetic Photon Flux Density     - Cₛ (ppm): surface CO₂ concentration.     - Dₗ (kPa): vapour pressure difference between the surface and the saturated     air vapour pressure in case you're using the stomatal conductance model of Medlyn.\n\nstatus: A status, usually the leaf status (i.e. leaf.status)\nconstants = Constants(): physical constants. See Constants for more details\n\nNote\n\nTₗ, PPFD, Cₛ (and Dₗ if you use Medlyn) must be initialized by providing them as keyword arguments (see examples). If in doubt, it is simpler to compute the energy balance of the leaf with the photosynthesis to get those variables. See energy_balance for more details.\n\nExamples\n\nleaf = ModelList(photosynthesis = FvcbRaw(), status = (Tₗ = 25.0, PPFD = 1000.0, Cᵢ = 400.0))\n# NB: we need Tₗ, PPFD and Cᵢ as inputs (see [`inputs`](@ref))\n\nphotosynthesis!_(leaf)\nleaf.status.A\nleaf.status.Cᵢ\n\n# using several time-steps:\nleaf =\n    ModelList(\n        photosynthesis = FvcbRaw(),\n        status = (Tₗ = [20., 25.0], PPFD = 1000.0, Cᵢ = [380.,400.0])\n    )\n# NB: we need Tₗ, PPFD and Cᵢ as inputs (see [`inputs`](@ref))\n\nphotosynthesis!_(leaf)\nDataFrame(leaf) # fetch the leaf status as a DataFrame\n\nReferences\n\nBaldocchi, Dennis. 1994. « An analytical solution for coupled leaf photosynthesis and stomatal conductance models ». Tree Physiology 14 (7-8‑9): 1069‑79. https://doi.org/10.1093/treephys/14.7-8-9.1069.\n\nDuursma, R. A., et B. E. Medlyn. 2012. « MAESPA: a model to study interactions between water limitation, environmental drivers and vegetation function at tree and stand levels, with an example application to [CO2] × drought interactions ». Geoscientific Model Development 5 (4): 919‑40. https://doi.org/10.5194/gmd-5-919-2012.\n\nFarquhar, G. D., S. von von Caemmerer, et J. A. Berry. 1980. « A biochemical model of photosynthetic CO2 assimilation in leaves of C3 species ». Planta 149 (1): 78‑90.\n\nLeuning, R., F. M. Kelliher, DGG de Pury, et E.D. Schulze. 1995. « Leaf nitrogen, photosynthesis, conductance and transpiration: scaling from leaves to canopies ». Plant, Cell & Environment 18 (10): 1183‑1200.\n\nLombardozzi, L. D. et al. 2018.« Triose phosphate limitation in photosynthesis models reduces leaf photosynthesis and global terrestrial carbon storage ». Environmental Research Letters 13.7: 1748-9326. https://doi.org/10.1088/1748-9326/aacf68.\n\n\n\n\n\n","category":"function"},{"location":"functions/#PlantBiophysics.photosynthesis!_-5","page":"API","title":"PlantBiophysics.photosynthesis!_","text":"photosynthesis!_(::ConstantAGs, models, status, meteo, constants=Constants())\n\nConstant photosynthesis coupled with a stomatal conductance model.\n\nReturns\n\nModify the leaf status in place for A, Gₛ and Cᵢ:\n\nA: carbon assimilation, set to leaf.photosynthesis.A (μmol[CO₂] m-2 s-1)\nGₛ: stomatal conductance for CO₂ (mol[CO₂] m-2 s-1)\nCᵢ: intercellular CO₂ concentration (ppm)\n\nArguments\n\n::ConstantAGs: a constant assimilation model coupled to a stomatal conductance model\nmodels: a ModelList struct holding the parameters for the model with\n\ninitialisations for:     - Cₛ (mol m-2 s-1): surface CO₂ concentration.     - any other value needed by the stomatal conductance model.\n\nstatus: A status, usually the leaf status (i.e. leaf.status)\nmeteo: meteorology structure, see Atmosphere\nconstants = Constants(): physical constants. See Constants for more details\n\nExamples\n\nmeteo = Atmosphere(T = 20.0, Wind = 1.0, P = 101.3, Rh = 0.65)\nleaf = ModelList(\n    photosynthesis = ConstantAGs(),\n    stomatal_conductance = Medlyn(0.03, 12.0),\n    status = (Cₛ = 400.0, Dₗ = 2.0)\n)\n\nphotosynthesis!(leaf,meteo,Constants())\n\nstatus(leaf, :A)\nstatus(leaf, :Cᵢ)\n\n\n\n\n\n","category":"function"},{"location":"functions/#PlantBiophysics.psychrometer_constant-NTuple{4, Any}","page":"API","title":"PlantBiophysics.psychrometer_constant","text":"psychrometer_constant(P, λ, Cₚ, ε)\npsychrometer_constant(P, λ)\n\nγ, the psychrometer constant, also called psychrometric constant (kPa K−1). See Monteith and Unsworth (2013), p. 222.\n\nArguments\n\nP (kPa): air pressure\nλ (J kg^-1): latent heat of vaporization for water (see latent_heat_vaporization)\nCₚ (J kg-1 K-1): specific heat of air at constant pressure (J K^-1 kg^-1)\nε (Celsius degree): temperature in Celsius degree at 0 Kelvin\n\nNote\n\nCₚ, ε and λ₀ are taken from Constants if not provided.\n\nTₐ = 20.0\n\nλ = latent_heat_vaporization(Tₐ, λ₀)\npsychrometer_constant(100.0, λ)\n\nReferences\n\nMonteith, John L., et Mike H. Unsworth. 2013. « Chapter 13 - Steady-State Heat Balance: (i) Water Surfaces, Soil, and Vegetation ». In Principles of Environmental Physics (Fourth Edition), edited by John L. Monteith et Mike H. Unsworth, 217‑47. Boston: Academic Press.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.pull_status!-Tuple{Any}","page":"API","title":"PlantBiophysics.pull_status!","text":"pull_status!(node)\n\nCopy the status of a node's component models (e.g. the outputs of a [ModelList]@ref simulation) into the MTG attributes. This function is used when we need to compute further the simulation outputs with e.g. transform!.\n\nNotes\n\nCarefull, this function makes a copy, so the values are then present at two locations (can take a lot of memory space if using several plants).\n\nExamples\n\n# Read the file\nmtg = read_mtg(joinpath(dirname(dirname(pathof(PlantBiophysics))),\"test\",\"inputs\",\"scene\",\"opf\",\"coffee.opf\"))\n\n# Declare our models:\nmodels = Dict(\n    \"Leaf\" =>\n        ModelList(\n            energy_balance = Monteith(),\n            photosynthesis = Fvcb(),\n            stomatal_conductance = Medlyn(0.03, 12.0),\n            status = (d = 0.03,)\n        )\n)\n\ntransform!(\n    mtg,\n    [:Ra_PAR_f, :Ra_NIR_f] => ((x, y) -> x + y) => :Rₛ,\n    :Ra_PAR_f => (x -> x * 4.57) => :PPFD,\n    ignore_nothing = true\n)\n\n# Initialising all components with their corresponding models and initialisations:\ninit_mtg_models!(mtg, models)\n\n# Make a simulation\ntransform!(mtg, :models => (x -> energy_balance!(x, meteo)), ignore_nothing = true)\n# Pull the simulation results into the MTG attributes:\ntransform!(mtg, pull_status!)\n# Now the simulated variables are available from the MTG attributes field:\nnames(mtg)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.read_licor6400-Tuple{Any}","page":"API","title":"PlantBiophysics.read_licor6400","text":"read_licor6400(file)\n\nImport Licor6400 data (such as Medlyn 2001 data) with the units and names corresponding to the ones used in PlantBiophysics.jl.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.read_model-Tuple{Any}","page":"API","title":"PlantBiophysics.read_model","text":"read_model(file)\n\nRead a model file. The model file holds the choice and the parameterization of the models.\n\nArguments\n\nfile::String: path to a model file\n\nExamples\n\nfile = joinpath(dirname(dirname(pathof(PlantBiophysics))), \"test\", \"inputs\", \"models\", \"plant_coffee.yml\")\nmodels = read_model(file)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.read_walz-Tuple{Any}","page":"API","title":"PlantBiophysics.read_walz","text":"read_walz(file)\n\nImport a Walz GFS-3000 output file.\n\nExamples\n\nfile = joinpath(dirname(dirname(pathof(PlantBiophysics))),\"test\",\"inputs\",\"data\",\"P1F20129.csv\")\nread_walz(file)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.read_weather-Tuple{Any, Vararg{Any}}","page":"API","title":"PlantBiophysics.read_weather","text":"read_weather(file[,args...];\n    date_format = DateFormat(\"yyyy-mm-ddTHH:MM:SS.s\"),\n    hour_format = DateFormat(\"HH:MM:SS\")\n)\n\nRead a meteo file. The meteo file is a CSV, and optionnaly with metadata in a header formatted as a commented YAML. The column names and units should match exactly the fields of Atmosphere, or the user should provide their transformation as arguments (args) to help mapping the two. The transformations are given as for DataFrames.\n\nNote\n\nThe variables found in the file will be used as is if not transformed, and not recomputed from the other variables. Please check that all variables have the same units as in the Atmosphere structure.\n\nArguments\n\nfile::String: path to a meteo file\nvar_names = Dict(): A Dict to map the file variable names to the Atmosphere variable names\ndate_format = DateFormat(\"yyyy-mm-ddTHH:MM:SS.s\"): the format for the DateTime columns\nhour_format = DateFormat(\"HH:MM:SS\"): the format for the Time columns (e.g. hour_start)\n\nExamples\n\nusing Dates\n\nfile = joinpath(dirname(dirname(pathof(PlantBiophysics))),\"test\",\"inputs\",\"meteo.csv\")\n\nmeteo = read_weather(\n    file,\n    :temperature => :T,\n    :relativeHumidity => (x -> x ./100) => :Rh,\n    :wind => :Wind,\n    :atmosphereCO2_ppm => :Cₐ,\n    date_format = DateFormat(\"yyyy/mm/dd\")\n)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.rh_from_e-Tuple{Any, Any}","page":"API","title":"PlantBiophysics.rh_from_e","text":"rh_from_e(VPD,eₛ)\n\nConversion between e (kPa) and rh (0-1).\n\nExamples\n\nrh_from_e(1.5,25.0)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.rh_from_vpd-Tuple{Any, Any}","page":"API","title":"PlantBiophysics.rh_from_vpd","text":"rh_from_vpd(VPD,eₛ)\n\nConversion between VPD and rh.\n\nExamples\n\neₛ = e_sat(Tₐ)\nrh_from_vpd(1.5,eₛ)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.sensible_heat-NTuple{8, Any}","page":"API","title":"PlantBiophysics.sensible_heat","text":"sensible_heat(Rn, VPD, γˢ, Rbₕ, Δ, ρ, aₛₕ, Cₚ)\nsensible_heat(Rn, VPD, γˢ, Rbₕ, Δ, ρ, aₛₕ)\n\nH -the sensible heat flux (W m-2)- using the Monteith and Unsworth (2013) definition corrected by Schymanski et al. (2017), eq.22.\n\nRn (W m-2): net radiation. Carefull: not the isothermal net radiation\nVPD (kPa): air vapor pressure deficit\nγˢ (kPa K−1): apparent value of psychrometer constant (see γ_star)\nRbₕ (s m-1): resistance for heat transfer by convection, i.e. resistance to sensible heat\nΔ (KPa K-1): rate of change of saturation vapor pressure with temperature (see e_sat_slope)\nρ (kg m-3): air density of moist air.\naₛₕ (1,2): number of sides that exchange energy for heat (2 for leaves)\nCₚ (J K-1 kg-1): specific heat of air for constant pressure\n\nReferences\n\nMonteith, J. and Unsworth, M., 2013. Principles of environmental physics: plants, animals, and the atmosphere. Academic Press. See eq. 13.33.\n\nSchymanski et al. (2017), Leaf-scale experiments reveal an important omission in the Penman–Monteith equation, Hydrology and Earth System Sciences. DOI: https://doi.org/10.5194/hess-21-685-2017. See equ. 22.\n\nExamples\n\nTₐ = 20.0 ; P = 100.0 ;\nρ = air_density(Tₐ, P) # in kg m-3\nΔ = e_sat_slope(Tₐ)\n\nsensible_heat(300.0, 2.0, 0.1461683, 50.0, Δ, ρ, 2.0)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.status-Tuple{Any}","page":"API","title":"PlantBiophysics.status","text":"status(m)\nstatus(m::AbstractArray{<:ModelList})\nstatus(m::AbstractDict{T,<:ModelList})\n\nGet a ModelList status, i.e. the state of the input (and output) variables.\n\nSee also is_initialized and to_initialize\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.stomatal_conductance","page":"API","title":"PlantBiophysics.stomatal_conductance","text":"stomatal_conductance(leaf::ModelList,gs_mod)\nstomatal_conductance(leaf::ModelList,meteo<:AbstractAtmosphere)\n\nDefault method to compute the stomatal conductance for CO₂ (mol m-2 s-1), it takes the form:\n\nleaf.stomatal_conductance.g0 + gs_closure(leaf,meteo) * leaf.status.A\n\nwhere gsclosure(leaf,meteo) computes the stomatal closure, and must be implemented for the type of `leaf.stomatalconductance. The stomatal conductance is not allowed to go belowleaf.stomatalconductance.gsmin`.\n\nArguments\n\nGs::Gsm: a stomatal conductance model, usually the leaf model (i.e. leaf.stomatal_conductance)\nmodels::ModelList: A leaf struct holding the parameters for the model. See\n\nModelList, and Medlyn or ConstantGs for the conductance models.\n\nstatus::Status: A status, usually the leaf status (i.e. leaf.status)\ngs_mod: the output from a gs_closure implementation (the conductance models\n\ngenerally only implement this function)\n\nmeteo<:AbstractAtmosphere: meteo data, see Atmosphere\n\nExamples\n\nmeteo = Atmosphere(T = 22.0, Wind = 0.8333, P = 101.325, Rh = 0.4490995)\n\n# Using a constant value for Gs:\n\nleaf =\n    ModelList(\n        stomatal_conductance = Medlyn(0.03,12.0), # Instance of a Medlyn type\n        status = (A = 20.0, Cₛ = 380.0, Dₗ = meteo.VPD)\n    )\n\n# Computing the stomatal conductance using the Medlyn et al. (2011) model:\nstomatal_conductance(leaf,meteo)\n\n\n\n\n\n","category":"function"},{"location":"functions/#PlantBiophysics.stomatal_conductance!","page":"API","title":"PlantBiophysics.stomatal_conductance!","text":"stomatal_conductance(leaf::ModelList,gs_mod)\nstomatal_conductance(leaf::ModelList,meteo<:AbstractAtmosphere)\n\nDefault method to compute the stomatal conductance for CO₂ (mol m-2 s-1), it takes the form:\n\nleaf.stomatal_conductance.g0 + gs_closure(leaf,meteo) * leaf.status.A\n\nwhere gsclosure(leaf,meteo) computes the stomatal closure, and must be implemented for the type of `leaf.stomatalconductance. The stomatal conductance is not allowed to go belowleaf.stomatalconductance.gsmin`.\n\nArguments\n\nGs::Gsm: a stomatal conductance model, usually the leaf model (i.e. leaf.stomatal_conductance)\nmodels::ModelList: A leaf struct holding the parameters for the model. See\n\nModelList, and Medlyn or ConstantGs for the conductance models.\n\nstatus::Status: A status, usually the leaf status (i.e. leaf.status)\ngs_mod: the output from a gs_closure implementation (the conductance models\n\ngenerally only implement this function)\n\nmeteo<:AbstractAtmosphere: meteo data, see Atmosphere\n\nExamples\n\nmeteo = Atmosphere(T = 22.0, Wind = 0.8333, P = 101.325, Rh = 0.4490995)\n\n# Using a constant value for Gs:\n\nleaf =\n    ModelList(\n        stomatal_conductance = Medlyn(0.03,12.0), # Instance of a Medlyn type\n        status = (A = 20.0, Cₛ = 380.0, Dₗ = meteo.VPD)\n    )\n\n# Computing the stomatal conductance using the Medlyn et al. (2011) model:\nstomatal_conductance(leaf,meteo)\n\n\n\n\n\n","category":"function"},{"location":"functions/#PlantBiophysics.to_initialize-Tuple{ModelList}","page":"API","title":"PlantBiophysics.to_initialize","text":"to_initialize(v::T, vars...) where T <: Union{Missing,AbstractModel}\nto_initialize(m::T)  where T <: ModelList\n\nReturn the variables that must be initialized providing a set of models and processes. The function takes into account model coupling and only returns the variables that are needed considering that some variables that are outputs of some models are used as inputs of others.\n\nExamples\n\nto_initialize(photosynthesis = Fvcb(), stomatal_conductance = Medlyn(0.03,12.0))\n\n# Or using a component directly:\nleaf = ModelList(photosynthesis = Fvcb(), stomatal_conductance = Medlyn(0.03,12.0))\nto_initialize(leaf)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.vapor_pressure-Tuple{Any, Any}","page":"API","title":"PlantBiophysics.vapor_pressure","text":"vapor_pressure(Tₐ, rh)\n\nVapor pressure (kPa) at given temperature (°C) and relative hunidity (0-1).\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.variables-Tuple{}","page":"API","title":"PlantBiophysics.variables","text":"variables()\n\nReturns a dataframe of all variables in PlantBiophysics, their description and their units.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.variables-Union{Tuple{T}, Tuple{T, Vararg{Any}}} where T<:Union{Missing, AbstractModel}","page":"API","title":"PlantBiophysics.variables","text":"variables(model)\nvariables(model, models...)\n\nReturns a tuple with the name of the variables needed by a model, or a union of those variables for several models.\n\nNote\n\nEach model can (and should) have a method for this function.\n\nExamples\n\nvariables(Monteith())\n\nvariables(Monteith(), Medlyn(0.03,12.0))\n\nSee also\n\ninputs, outputs and variables_typed\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.variables_typed-Tuple{T} where T<:AbstractModel","page":"API","title":"PlantBiophysics.variables_typed","text":"variables_typed(model)\nvariables_typed(model, models...)\n\nReturns a named tuple with the name and the types of the variables needed by a model, or a union of those for several models.\n\nExamples\n\nvariables_typed(Monteith())\n\nvariables_typed(Monteith(), Medlyn(0.03,12.0))\n\nSee also\n\ninputs, outputs and variables\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.Γ_star","page":"API","title":"PlantBiophysics.Γ_star","text":"Γ_star(Tₖ,Tᵣₖ,R = Constants().R)\n\nCO₂ compensation point Γ^ (μ mol mol^-1) according to equation (12) from Medlyn et al. (2002).\n\nΓ^ is the [CO₂] at which oxygenation proceeds at\n\ntwice the rate of carboxylation causing photosynthetic uptake of CO2 to be exactly compensated by photorespiratory CO₂ release (Sharkey et al., 2007).\n\nNotes\n\nCould be replaced by equation (38) from Farquhar et al. (1980), but Medlyn et al. (2002) states that Γ^ as a relatively low effect on the model outputs.\n\nArguments\n\nTₖ (Kelvin): current temperature\nTᵣₖ (Kelvin): reference temperature at which A was measured\nR (J mol^-1 K^-1): is the universal gas constant\n\nExamples\n\n# Importing the physical constants:\nconstants = Constants()\n# computing the temperature dependence of γˢ:\nΓ_star(28-constants.K₀,25-constants.K₀,constants.R)\n\nReferences\n\nFarquhar, G. D., S. von von Caemmerer, et J. A. Berry. 1980. « A biochemical model of photosynthetic CO2 assimilation in leaves of C3 species ». Planta 149 (1): 78‑90.\n\nMedlyn, B. E., E. Dreyer, D. Ellsworth, M. Forstreuter, P. C. Harley, M. U. F. Kirschbaum, X. Le Roux, et al. 2002. « Temperature response of parameters of a biochemically based model of photosynthesis. II. A review of experimental data ». Plant, Cell & Environment 25 (9): 1167‑79. https://doi.org/10.1046/j.1365-3040.2002.00891.x.\n\nSharkey, Thomas D., Carl J. Bernacchi, Graham D. Farquhar, et Eric L. Singsaas. 2007. « Fitting Photosynthetic Carbon Dioxide Response Curves for C3 Leaves ». Plant, Cell & Environment 30 (9): 1035‑40. https://doi.org/10.1111/j.1365-3040.2007.01710.x.\n\n\n\n\n\n","category":"function"},{"location":"functions/#PlantBiophysics.γ_star-NTuple{6, Any}","page":"API","title":"PlantBiophysics.γ_star","text":"γstar(γ, ash, a_s, rbv, Rsᵥ, Rbₕ)\n\nγ∗, the apparent value of psychrometer constant (kPa K−1).\n\nArguments\n\nγ (kPa K−1): psychrometer constant\naₛₕ (1,2): number of faces exchanging heat fluxes (see Schymanski et al., 2017)\naₛᵥ (1,2): number of faces exchanging water fluxes (see Schymanski et al., 2017)\nRbᵥ (s m-1): boundary layer resistance to water vapor\nRsᵥ (s m-1): stomatal resistance to water vapor\nRbₕ (s m-1): boundary layer resistance to heat\n\nNote\n\nUsing the corrigendum from Schymanski et al. (2017) in here so the definition of latent_heat remains generic.\n\nNot to be confused with Γ_star in FcVB model, which is the CO₂ compensation point.\n\nReferences\n\nMonteith, John L., et Mike H. Unsworth. 2013. « Chapter 13 - Steady-State Heat Balance: (i) Water Surfaces, Soil, and Vegetation ». In Principles of Environmental Physics (Fourth Edition), edited by John L. Monteith et Mike H. Unsworth, 217‑47. Boston: Academic Press.\n\nSchymanski, Stanislaus J., et Dani Or. 2017. Leaf-Scale Experiments Reveal an Important Omission in the Penman–Monteith Equation ». Hydrology and Earth System Sciences 21 (2): 685‑706. https://doi.org/10.5194/hess-21-685-2017.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Un-exported-functions","page":"API","title":"Un-exported functions","text":"","category":"section"},{"location":"functions/","page":"API","title":"API","text":"Modules = [PlantBiophysics]\nPublic = false","category":"page"},{"location":"functions/#PlantBiophysics.AbstractAtmosphere","page":"API","title":"PlantBiophysics.AbstractAtmosphere","text":"Abstract atmospheric conditions type. The suptypes of AbstractAtmosphere should describe the atmospheric conditions for one time-step only, see e.g. Atmosphere\n\n\n\n\n\n","category":"type"},{"location":"functions/#PlantBiophysics.NRMSE-Tuple{Any, Any}","page":"API","title":"PlantBiophysics.NRMSE","text":"NRMSE(obs,sim)\n\nReturns the Normalized Root Mean Squared Error between observations `obs` and simulations `sim`.\nNormalization is performed using division by observations range (max-min).\n\nOutput: Float/Particles\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.atmosphere_emissivity-Tuple{Any, Any, Any}","page":"API","title":"PlantBiophysics.atmosphere_emissivity","text":"atmosphere_emissivity(Tₐ,eₐ)\n\nEmissivity of the atmoshpere at a given temperature and vapor pressure.\n\nArguments\n\nTₐ (°C): air temperature\neₐ (kPa): air vapor pressure\nK₀ (°C): absolute zero\n\nExamples\n\nTₐ = 20.0\nVPD = 1.5\natmosphere_emissivity(Tₐ, vapor_pressure(Tₐ,VPD))\n\nReferences\n\nLeuning, R., F. M. Kelliher, DGG de Pury, et E.-D. SCHULZE. 1995. Leaf nitrogen, photosynthesis, conductance and transpiration: scaling from leaves to canopies ». Plant, Cell & Environment 18 (10): 1183‑1200.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.check_status_wheather-Union{Tuple{T}, Tuple{T, Weather}} where T<:TimeStepTable","page":"API","title":"PlantBiophysics.check_status_wheather","text":"check_status_meteo(component,weather)\ncheck_status_meteo(status,weather)\n\nChecks if a component status and the weather have the same length, or if they can be recycled (length 1).\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.compute_date!-Tuple{Any, Any, Any}","page":"API","title":"PlantBiophysics.compute_date!","text":"compute_date!(df, date_format, hour_format)\n\nCompute the date column depending on several cases:\n\nIf it is already in the DataFrame and is a DateTime, does nothing.\nIf it is a String, tries and parse it using a user-input DateFormat\nIf it is a Date, return it as is, or try to make it a DateTime if there's a column named\n\nhour_start\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.compute_duration!-Tuple{Any, Any}","page":"API","title":"PlantBiophysics.compute_duration!","text":"compute_duration!(df, hour_format)\n\nCompute the duration column depending on several cases:\n\nIf it is already in the DataFrame, does nothing.\nIf it is not, but there's a column named hour_end and another one either called hour_start\n\nor date, compute the duration from the period between hour_start (or date) and hour_end.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.convert_status-Union{Tuple{T}, Tuple{Type{T}, Any}} where T","page":"API","title":"PlantBiophysics.convert_status","text":"convert_status(T, x)\nconvert_status(::Type{MutableNamedTuple}, x)\n\nConvert a type into another type.\n\nThe generic method simply uses convert(T, x). This function is used to convert the status often given as a NamedTuple into the desired type, by default a MutableNamedTuple.\n\nWe need to override this method for any other type we would need for the status.\n\nNote: we implement this function to avoid type piracy, i.e. implementing generic functions for types we don't own.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.convert_vars-Tuple{Dict{DataType, DataType}, Any}","page":"API","title":"PlantBiophysics.convert_vars","text":"convert_vars(type_promotion::Dict{DataType,DataType}, ref_vars)\nconvert_vars(type_promotion::Nothing, ref_vars)\n\nConvert the status variables to the type specified in the type promotion dictionary.\n\nExamples\n\nIf we want all the variables that are Reals to be Float32, we can use:\n\nref_vars = init_variables(energy_balance=Monteith(), photosynthesis=Fvcb(), stomatal_conductance=Medlyn(0.03, 12.0))\ntype_promotion = Dict(Real => Float32)\n\nconvert_vars(type_promotion, ref_vars)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.diff_vars-Tuple{Any, Any}","page":"API","title":"PlantBiophysics.diff_vars","text":"diff_vars(x, y)\n\nReturns the names of variables that have different values in x and y.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.draw_dependency_tree-Tuple{Any, Any}","page":"API","title":"PlantBiophysics.draw_dependency_tree","text":"draw_dependency_tree(\n    tree, node;\n    guides_style::String=TERM_THEME[].tree_guide_style,\n    dep_tree_guides=(space=\" \", vline=\"│\", branch=\"├\", leaf=\"└\", hline=\"─\")\n)\n\nDraw the dependency tree.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.draw_guide-NTuple{5, Any}","page":"API","title":"PlantBiophysics.draw_guide","text":"draw_guide(h, w, prefix, isleaf, guides)\n\nDraw the line guide for one node of the dependency tree.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.draw_panel-NTuple{4, Any}","page":"API","title":"PlantBiophysics.draw_panel","text":"draw_panel(node, tree, prefix, dep_tree_guides)\n\nDraw the panels for all dependencies\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.energy_balance!_","page":"API","title":"PlantBiophysics.energy_balance!_","text":"light_interception!_(::Ignore, models::ModelList, status, meteo::AbstractAtmosphere,constants = Constants())\n\nMethod for when light interception should be explicitely ignored (do nothing).\n\nArguments\n\n::Ignore: an Ignore model.\nmodels: a ModelList struct with a missing energy model.\nstatus: the status of the model, usually the one from the models (i.e. models.status)\nmeteo: meteorology structure, see Atmosphere\nconstants = Constants(): physical constants. See Constants for more details\n\n\n\n\n\n","category":"function"},{"location":"functions/#PlantBiophysics.energy_balance!_-2","page":"API","title":"PlantBiophysics.energy_balance!_","text":"energy_balance!_(::Missing, models::ModelList, status, meteo::AbstractAtmosphere,constants = Constants())\n\nMethod for when energy balance is missing (do nothing).\n\nArguments\n\n::Missing: a Missing model.\nmodels: a ModelList struct with a missing energy model.\nstatus: the status of the model, usually the one from the models (i.e. models.status)\nmeteo: meteorology structure, see Atmosphere\nconstants = Constants(): physical constants. See Constants for more details\n\n\n\n\n\n","category":"function"},{"location":"functions/#PlantBiophysics.energy_balance!_-3","page":"API","title":"PlantBiophysics.energy_balance!_","text":"energy_balance!_(::Monteith, models, status, meteo::AbstractAtmosphere, constants=Constants())\n\nLeaf energy balance according to Monteith and Unsworth (2013), and corrigendum from Schymanski et al. (2017). The computation is close to the one from the MAESPA model (Duursma et al., 2012, Vezy et al., 2018) here. The leaf temperature is computed iteratively to close the energy balance using the mass flux (~ Rn - λE).\n\nArguments\n\n::Monteith: a Monteith model, usually from a model list (i.e. m.energy_balance)\nmodels: A ModelList struct holding the parameters for the model with\n\ninitialisations for:     - Rₛ (W m-2): net shortwave radiation (PAR + NIR). Often computed from a light interception model     - sky_fraction (0-2): view factor between the object and the sky for both faces (see details).     - d (m): characteristic dimension, e.g. leaf width (see eq. 10.9 from Monteith and Unsworth, 2013).\n\nstatus: the status of the model, usually the model list status (i.e. leaf.status)\nmeteo: meteorology structure, see Atmosphere\nconstants = Constants(): physical constants. See Constants for more details\n\nDetails\n\nThe sky_fraction in the variables is equal to 2 if all the leaf is viewing is sky (e.g. in a controlled chamber), 1 if the leaf is e.g. up on the canopy where the upper side of the leaf sees the sky, and the side bellow sees soil + other leaves that are all considered at the same temperature than the leaf, or less than 1 if it is partly shaded.\n\nNotes\n\nIf you want the algorithm to print a message whenever it does not reach convergence, use the debugging mode by executing this in the REPL: ENV[\"JULIA_DEBUG\"] = PlantBiophysics.\n\nMore information here.\n\nExamples\n\nmeteo = Atmosphere(T = 22.0, Wind = 0.8333, P = 101.325, Rh = 0.4490995)\n\n# Using a constant value for Gs:\nleaf = ModelList(\n    energy_balance = Monteith(),\n    photosynthesis = Fvcb(),\n    stomatal_conductance = ConstantGs(0.0, 0.0011),\n    status = (Rₛ = 13.747, sky_fraction = 1.0, d = 0.03)\n)\n\nenergy_balance!(leaf,meteo)\nleaf.status.Rn\njulia> 12.902547446281233\n\n# Using the model from Medlyn et al. (2011) for Gs:\nleaf = ModelList(\n    energy_balance = Monteith(),\n    photosynthesis = Fvcb(),\n    stomatal_conductance = Medlyn(0.03, 12.0),\n    status = (Rₛ = 13.747, sky_fraction = 1.0, PPFD = 1500.0, d = 0.03)\n)\n\nenergy_balance!(leaf,meteo)\nleaf[:Rn]\nleaf[:Rₗₗ]\nleaf[:A]\n\nDataFrame(leaf)\n\nReferences\n\nDuursma, R. A., et B. E. Medlyn. 2012. « MAESPA: a model to study interactions between water limitation, environmental drivers and vegetation function at tree and stand levels, with an example application to [CO2] × drought interactions ». Geoscientific Model Development 5 (4): 919‑40. https://doi.org/10.5194/gmd-5-919-2012.\n\nMonteith, John L., et Mike H. Unsworth. 2013. « Chapter 13 - Steady-State Heat Balance: (i) Water Surfaces, Soil, and Vegetation ». In Principles of Environmental Physics (Fourth Edition), edited by John L. Monteith et Mike H. Unsworth, 217‑47. Boston: Academic Press.\n\nSchymanski, Stanislaus J., et Dani Or. 2017. « Leaf-Scale Experiments Reveal an Important Omission in the Penman–Monteith Equation ». Hydrology and Earth System Sciences 21 (2): 685‑706. https://doi.org/10.5194/hess-21-685-2017.\n\nVezy, Rémi, Mathias Christina, Olivier Roupsard, Yann Nouvellon, Remko Duursma, Belinda Medlyn, Maxime Soma, et al. 2018. « Measuring and modelling energy partitioning in canopies of varying complexity using MAESPA model ». Agricultural and Forest Meteorology 253‑254 (printemps): 203‑17. https://doi.org/10.1016/j.agrformet.2018.02.005.\n\n\n\n\n\n","category":"function"},{"location":"functions/#PlantBiophysics.f_ms_to_mol-NTuple{4, Any}","page":"API","title":"PlantBiophysics.f_ms_to_mol","text":"Conversion factor between conductance in m s^-1 to mol m^-2 s^-1.\n\nArguments\n\nT (°C): air temperature\nP (kPa): air pressure\nR (J mol^-1 K^-1): universal gas constant.\nK₀ (°C): absolute zero\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.get_attr_i-Union{Tuple{T}, Tuple{Any, Any, T}} where T<:Nothing","page":"API","title":"PlantBiophysics.get_attr_i","text":"get_attr_i(node, attr, i<:Nothing)\nget_attr_i(node, attr, i)\n\nGet node attribute at ith value or only value if i<:Nothing\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.homogeneous_type_steps","page":"API","title":"PlantBiophysics.homogeneous_type_steps","text":"homogeneous_type_steps(ref_vars, vars, datatype=MutableNamedTuple)\n\nReturn a Status or TimeStepTable based on the length of the variables in vars. ref_vars is a struct with the default values of all the variables needed by the models. datatype is the type used to hold the status inside the Status.\n\n\n\n\n\n","category":"function"},{"location":"functions/#PlantBiophysics.light_interception!_-Tuple{Beer, Any, Any, Any, Any}","page":"API","title":"PlantBiophysics.light_interception!_","text":"light_interception!_(object, meteo, constants = Constants())\n\nComputes the light interception of an object using the Beer-Lambert law.\n\nArguments\n\n::Beer: a Beer model, from the model list (i.e. m.light_interception)\nmodels: A ModelList struct holding the parameters for the model with\n\ninitialisations for LAI (m² m⁻²): the leaf area index.\n\nstatus: the status of the model, usually the model list status (i.e. m.status)\nmeteo: meteorology structure, see Atmosphere\nconstants = Constants(): physical constants. See Constants for more details\n\nExamples\n\nm = ModelList(light_interception=Beer(0.5), status=(LAI=2.0,))\n\nmeteo = Atmosphere(T=20.0, Wind=1.0, P=101.3, Rh=0.65, Ri_PAR_f=300.0)\n\nlight_interception!(m, meteo)\n\nm[:PPFD]\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.locf!-Tuple{Any}","page":"API","title":"PlantBiophysics.locf!","text":"locf!(var)\n\nLast observation carried forward (LOCF) iterates forwards var and fills missing data with the last existing observation.\n\nThis function is heavily inspired (i.e. copied) by the function locf in the package Impute (MIT licence). See here for more details.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.max_root-Tuple{Any, Any, Any}","page":"API","title":"PlantBiophysics.max_root","text":"Maximum value between two roots of a quadratic equation.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.merge_status-Tuple{Any, Any}","page":"API","title":"PlantBiophysics.merge_status","text":"merge_status(::Type{MutableNamedTuple}, x, y)\nmerge_status(::Type{NamedTuple}, x, y)\n\nMerge two status.\n\nThe generic version simply uses merge. We use merge_status so we can implement merge for types we don't own, avoiding type piracy.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.negative_root-Tuple{Any, Any, Any}","page":"API","title":"PlantBiophysics.negative_root","text":"Negative root of a quadratic equation, but returns 0 if Δ is negative. Careful, this is not right mathematically, but biologically OK because used in the computation of Cᵢ (gives A = 0 in this case).\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.positive_root-Tuple{Any, Any, Any}","page":"API","title":"PlantBiophysics.positive_root","text":"Positive root of a quadratic equation, but returns 0 if Δ is negative. Careful, this is not right mathematically, but biologically OK because used in the computation of Cᵢ (gives A = 0 in this case).\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.pre_allocate_attr!-Tuple{Any, Any}","page":"API","title":"PlantBiophysics.pre_allocate_attr!","text":"pre_allocate_attr!(node, nsteps; attr_name = :models)\n\nPre-allocate the node attributes based on the status of a component model and a given number of simulation steps.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.pull_status_step!-Tuple{Any, Any}","page":"API","title":"PlantBiophysics.pull_status_step!","text":"pull_status_step!(node, step; attr_name = :models)\n\nCopy the status of a node's ModelList (i.e. the outputs of the simulations) into the pre-allocated MTG attributes, i.e. one value per step.\n\nSee pre_allocate_attr! for the pre-allocation step.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.stomatal_conductance!_-Tuple{ConstantGs, Any, Any, Any}","page":"API","title":"PlantBiophysics.stomatal_conductance!_","text":"Constant stomatal conductance for CO₂ (mol m-2 s-1).\n\nNote\n\nmeteo or gs_mod are just declared here for compatibility with the call from photosynthesis (need a constant way of calling the functions).\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.update_mtg_models!-Tuple{MultiScaleTreeGraph.Node, Any, Any, Symbol}","page":"API","title":"PlantBiophysics.update_mtg_models!","text":"update_mtg_models!(mtg::MultiScaleTreeGraph.Node, i, attr_name::Symbol)\n\nUpdate the mtg models initialisations by using the ith time-step. The mtg is considered fully initialized already once, so init_mtg_models! must be called before update_mtg_models!.\n\nThe values are updated only for node attributes in to_init. Those attributes must have several time-steps, i.e. indexable by 1:n time-steps.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.vars_not_init_-Union{Tuple{T}, Tuple{T, Any}} where T<:Status","page":"API","title":"PlantBiophysics.vars_not_init_","text":"vars_not_init_(st<:Status, var_names)\n\nGet which variable is not properly initialized in the status struct.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.vpd-Tuple{Any, Any}","page":"API","title":"PlantBiophysics.vpd","text":"vpd(VPD,eₛ)\n\nCompute vapor pressure deficit (kPa) from the air relative humidity (0-1) and temperature (°C).\n\nThe computation simply uses vpd = eₛ - e.\n\nExamples\n\nvpd(0.4,25.0)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.λE_to_E","page":"API","title":"PlantBiophysics.λE_to_E","text":"λE_to_E(λE, λ, Mₕ₂ₒ=Constants().Mₕ₂ₒ)\nE_to_λE(E, λ, Mₕ₂ₒ=Constants().Mₕ₂ₒ)\n\nConversion from latent heat (W m-2) to evaporation (mol[H₂O] m-2 s-1) or the opposite (E_to_λE).\n\nArguments\n\nλE: latent heat flux (W m-2)\nE: water evaporation (mol[H₂O] m-2 s-1)\nλ (J kg-1): latent heat of vaporization\nMₕ₂ₒ = 18.0e-3 (kg mol-1): Molar mass for water.\n\nNote\n\nλ can be computed using:\n\nλ = latent_heat_vaporization(T, constants.λ₀)\n\nIt is also directly available from the Atmosphere structure, and by extention in Weather.\n\nTo convert E from mol[H₂O] m-2 s-1 to mm s-1 you can simply do:\n\nE_mms = E_mol / constants.Mₕ₂ₒ\n\nmm[H₂O] s-1 is equivalent to kg[H₂O] m-2 s-1, wich is equivalent to l[H₂O] m-2 s-1.\n\n\n\n\n\n","category":"function"},{"location":"functions/#PlantBiophysics.@gen_process_methods-Tuple{Any}","page":"API","title":"PlantBiophysics.@gen_process_methods","text":"@gen_process_methods(process::String)\n\nThis macro generate all standard methods for processes:\n\nThe base method that calls the actual algorithms implemented using the process name   suffixed by _, e.g. photosynthesis_.\nThe method applying the computation over several objects (e.g. all leaves of a plant)\n\nin an Array\n\nThe same method over a Dict(-alike) of objects\nThe method that applies the computation over several meteo time steps (called Weather) and\n\npossibly several objects\n\nA method for calling the process without any meteo (e.g. for fitting)\nA method to apply the above over MTG nodes\nA non-mutating version of the function (make a copy before the call, and return the copy)\n\nThe macro returns two functions: the mutating one and the non-mutating one. For example energy_balance() and energy_balance!() for the energy balance. And of course the function that implements the computation is assumed to be energy_balance!_().\n\nExamples\n\n@gen_process_methods \"dummy_process\"\n\n\n\n\n\n","category":"macro"},{"location":"models/light/#light_page","page":"Light interception","title":"Light interception","text":"","category":"section"},{"location":"models/light/","page":"Light interception","title":"Light interception","text":"using PlantBiophysics","category":"page"},{"location":"models/light/","page":"Light interception","title":"Light interception","text":"The light interception process is the process of computing the radiation interception of components for different wavelength such as PAR (Photosynthetically Active Radication), NIR (Near-Infrared Radiation) and eventually TIR (Thermal Infrared Radiation). Users can also compute particular wavelengths (e.g. red, far-red) depending on the model used.","category":"page"},{"location":"models/light/","page":"Light interception","title":"Light interception","text":"There is only one simple light interception model implemented in PlantBiophysics at the time, the model of Beer-Lambert. Here's an example:","category":"page"},{"location":"models/light/","page":"Light interception","title":"Light interception","text":"m = ModelList(light_interception=Beer(0.5), status=(LAI=2.0,))\n\nmeteo = Atmosphere(T=20.0, Wind=1.0, P=101.3, Rh=0.65, Ri_PAR_f=300.0)\n\nlight_interception!(m, meteo)\n\nm","category":"page"},{"location":"models/light/","page":"Light interception","title":"Light interception","text":"note: Note\nIf you have a 3D plant in the OPF format, you can use Archimed-ϕ.","category":"page"},{"location":"extending/implement_a_process/#Implement-a-new-component-models","page":"Implement a process","title":"Implement a new component models","text":"","category":"section"},{"location":"extending/implement_a_process/","page":"Implement a process","title":"Implement a process","text":"using PlantBiophysics\nimport PlantBiophysics: inputs_, outputs_, energy_balance!_\nPlantBiophysics.@gen_process_methods growth","category":"page"},{"location":"extending/implement_a_process/#Introduction","page":"Implement a process","title":"Introduction","text":"","category":"section"},{"location":"extending/implement_a_process/","page":"Implement a process","title":"Implement a process","text":"PlantBiophysics.jl was designed to make the implementation of new processes and models easy and fast. Let's learn about how to implement your own process with a simple example: implementing a growth model.","category":"page"},{"location":"extending/implement_a_process/#Implement-a-new-process","page":"Implement a process","title":"Implement a new process","text":"","category":"section"},{"location":"extending/implement_a_process/","page":"Implement a process","title":"Implement a process","text":"To implement a new process, we need to define the generic methods associated to it that helps run its simulation for:","category":"page"},{"location":"extending/implement_a_process/","page":"Implement a process","title":"Implement a process","text":"one or several time-steps\none or several objects\nan MTG from MultiScaleTreeGraph","category":"page"},{"location":"extending/implement_a_process/","page":"Implement a process","title":"Implement a process","text":"...and all the above with a mutating function and a non-mutating one.","category":"page"},{"location":"extending/implement_a_process/","page":"Implement a process","title":"Implement a process","text":"This is a lot of work! But fortunately PlantBiophysics provides a macro to generate all of the above: gen_process_methods.","category":"page"},{"location":"extending/implement_a_process/","page":"Implement a process","title":"Implement a process","text":"This macro takes only one argument: the name of the non-mutating function.","category":"page"},{"location":"extending/implement_a_process/","page":"Implement a process","title":"Implement a process","text":"So for example all the photosynthesis methods are created using just this tiny line of code:","category":"page"},{"location":"extending/implement_a_process/","page":"Implement a process","title":"Implement a process","text":"@gen_process_methods photosynthesis","category":"page"},{"location":"extending/implement_a_process/","page":"Implement a process","title":"Implement a process","text":"note: Note\nThe function is not exported by the package as it is very rarely used. To use it you'll have to prefix it by the name of the package.","category":"page"},{"location":"extending/implement_a_process/","page":"Implement a process","title":"Implement a process","text":"So for example if we want to simulate the growth of a plant, we could add a new process called growth. To create the generic functions to simulate the growth we would do:","category":"page"},{"location":"extending/implement_a_process/","page":"Implement a process","title":"Implement a process","text":"PlantBiophysics.@gen_process_methods growth","category":"page"},{"location":"extending/implement_a_process/","page":"Implement a process","title":"Implement a process","text":"And that's it! You created a new process called growth, with the following functions:","category":"page"},{"location":"extending/implement_a_process/","page":"Implement a process","title":"Implement a process","text":"growth!: the mutating function\ngrowth: the non-mutating function\ngrowth!_: the function that actually make the computation. You'll have to implement methods for each model you need, else it will not work.","category":"page"},{"location":"extending/implement_a_process/","page":"Implement a process","title":"Implement a process","text":"Now users can call growth! and growth on any number of time steps or objects, even on MTGs, and PlantBiophysics will handle everything.","category":"page"},{"location":"extending/implement_a_process/","page":"Implement a process","title":"Implement a process","text":"But first, we need at least one model to simulate it.","category":"page"},{"location":"extending/implement_a_process/#Implement-a-new-model-for-the-process","page":"Implement a process","title":"Implement a new model for the process","text":"","category":"section"},{"location":"extending/implement_a_process/","page":"Implement a process","title":"Implement a process","text":"To better understand how models are implemented, you can read the detailed instructions from the previous section. But for the sake of completeness, we'll implement a growth model here.","category":"page"},{"location":"extending/implement_a_process/","page":"Implement a process","title":"Implement a process","text":"This growth model uses the assimilation computed using the coupled energy balance process. Then it removes the maintenance respiration and the growth respiration from that source of carbon, and increments the leaf biomass by the remaining carbon offer.","category":"page"},{"location":"extending/implement_a_process/","page":"Implement a process","title":"Implement a process","text":"Let's implement this model below:","category":"page"},{"location":"extending/implement_a_process/","page":"Implement a process","title":"Implement a process","text":"# Import the functions we need so we can add our own methods:\nimport PlantBiophysics: inputs_, outputs_, energy_balance!_\n\n# Make the struct to hold the parameters:\n\"\"\"\n    DummyGrowth(Rm_factor, Rg_cost)\n    DummyGrowth(;Rm_factor = 0.5, Rg_cost = 1.2)\n\nComputes the leaf biomass growth of a plant.\n\n# Arguments\n\n- `Rm_factor`: the fraction of assimilation that goes into maintenance respiration\n- `Rg_cost`: the cost of growth maintenance, in gram of carbon biomass per gram of assimilate\n\"\"\"\nstruct DummyGrowth{T} <: AbstractModel\n    Rm_factor::T\n    Rg_cost::T\nend\n\n# Instantiate the struct with default values + kwargs:\nfunction DummyGrowth(;Rm_factor = 0.5, Rg_cost = 1.2)\n    DummyGrowth(promote(Rm_factor,Rg_cost)...)\nend\n\n# Define inputs:\nfunction inputs_(::DummyGrowth)\n    (A=-999.99,)\nend\n\n# Define outputs:\nfunction outputs_(::DummyGrowth)\n    (Rm=-999.99, Rg=-999.99, leaf_allocation=-999.99, leaf_biomass=0.0)\nend\n\n# Tells Julia what is the type of elements:\nBase.eltype(x::DummyGrowth{T}) where {T} = T\n\n# Implement the photosynthesis model:\nfunction growth!_(::DummyGrowth, models, status, meteo, constants=Constants())\n\n    # Compute the energy balance of the plant, coupled to the photosynthesis model:\n    energy_balance!_(models.energy_balance, models, status, meteo)\n    # Here we expect the assimilation of the plant, which is the source for Carbon\n\n    # The maintenance respiration is simply a factor of the assimilation:\n    status.Rm = status.A * models.growth.Rm_factor\n\n    # Let's say that all carbon is allocated to the leaves:\n    status.leaf_allocation = status.A - status.Rm\n\n    # And that this carbon is allocated with a cost (growth respiration Rg):\n    status.Rg = 1 - (status.leaf_allocation / models.growth.Rg_cost)\n\n    status.leaf_biomass = status.leaf_biomass + status.leaf_allocation - status.Rg\nend","category":"page"},{"location":"extending/implement_a_process/","page":"Implement a process","title":"Implement a process","text":"Now we can make a simulation as usual:","category":"page"},{"location":"extending/implement_a_process/","page":"Implement a process","title":"Implement a process","text":"meteo = Atmosphere(T = 22.0, Wind = 0.8333, P = 101.325, Rh = 0.4490995)\n\nleaf = ModelList(\n        energy_balance = Monteith(),\n        photosynthesis = Fvcb(),\n        stomatal_conductance = Medlyn(0.03, 12.0),\n        growth = DummyGrowth(),\n        status = (Rₛ = 13.747, sky_fraction = 1.0, PPFD = 1500.0, d = 0.03)\n    )\n\ngrowth!(leaf,meteo)\n\nleaf[:leaf_biomass] # biomass in gC","category":"page"},{"location":"extending/implement_a_process/","page":"Implement a process","title":"Implement a process","text":"We can also start the simulation later when the plant already has some biomass by initializing the leaf_biomass:","category":"page"},{"location":"extending/implement_a_process/","page":"Implement a process","title":"Implement a process","text":"meteo = Atmosphere(T = 22.0, Wind = 0.8333, P = 101.325, Rh = 0.4490995)\n\nleaf = ModelList(\n        energy_balance = Monteith(),\n        photosynthesis = Fvcb(),\n        stomatal_conductance = Medlyn(0.03, 12.0),\n        growth = DummyGrowth(),\n        status = (Rₛ = 13.747, sky_fraction = 1.0, PPFD = 1500.0, d = 0.03, leaf_biomass = 2400.0)\n    )\n\ngrowth!(leaf,meteo)\n\nleaf[:leaf_biomass] # biomass in gC","category":"page"},{"location":"simulation/first_simulation/#Simple-simulation","page":"Simple Simulation","title":"Simple simulation","text":"","category":"section"},{"location":"simulation/first_simulation/","page":"Simple Simulation","title":"Simple Simulation","text":"using PlantBiophysics","category":"page"},{"location":"simulation/first_simulation/#Running-a-simple-simulation","page":"Simple Simulation","title":"Running a simple simulation","text":"","category":"section"},{"location":"simulation/first_simulation/","page":"Simple Simulation","title":"Simple Simulation","text":"Here is a first simple simulation of the coupled energy balance on a leaf over one meteorological time-step:","category":"page"},{"location":"simulation/first_simulation/","page":"Simple Simulation","title":"Simple Simulation","text":"meteo = Atmosphere(T = 22.0, Wind = 0.8333, P = 101.325, Rh = 0.4490995)\n\nleaf = ModelList(\n        energy_balance = Monteith(),\n        photosynthesis = Fvcb(),\n        stomatal_conductance = Medlyn(0.03, 12.0),\n        status = (Rₛ = 13.747, sky_fraction = 1.0, PPFD = 1500.0, d = 0.03)\n    )\n\nenergy_balance!(leaf,meteo)\n\nleaf","category":"page"},{"location":"simulation/first_simulation/","page":"Simple Simulation","title":"Simple Simulation","text":"Now let's describe what is happening here.","category":"page"},{"location":"simulation/first_simulation/#Meteorology","page":"Simple Simulation","title":"Meteorology","text":"","category":"section"},{"location":"simulation/first_simulation/","page":"Simple Simulation","title":"Simple Simulation","text":"The first line of the simulation is calling Atmosphere. Atmosphere is a structure used to describe what are the meteorological conditions in the atmosphere surrounding the leaf, such as the air temperature and humidity, the wind speed or the pressure.","category":"page"},{"location":"simulation/first_simulation/#ModelList","page":"Simple Simulation","title":"ModelList","text":"","category":"section"},{"location":"simulation/first_simulation/","page":"Simple Simulation","title":"Simple Simulation","text":"The next command is using ModelList, which helps us associate models (e.g. Monteith()) to processes (e.g. energy_balance). Currently PlantBiophysics.jl implements three processes: the energy balance, the photosynthesis, and the stomatal conductance. For each of these processes, we can choose a model that will be used for its simulation. The package provides processes and models, but you can also implement your own by following the tutorial here.","category":"page"},{"location":"simulation/first_simulation/","page":"Simple Simulation","title":"Simple Simulation","text":"In our example we use the Monteith et al. (2013) model implementation for the energy balance (energy_balance = Monteith()), the Farquhar et al. (1980) model for the photosynthesis (photosynthesis = Fvcb()), and the Medlyn et al. (2011) model for the stomatal conductance (stomatal_conductance = Medlyn(0.03, 12.0)). All are available from PlantBiophysics.jl.","category":"page"},{"location":"simulation/first_simulation/","page":"Simple Simulation","title":"Simple Simulation","text":"Each model has its own structure used to provide the parameter values. For example the stomatal conductance model of Medlyn et al. (2011) need two parameters: g0 and g1. We pass both values when calling the structure here: Medlyn(0.03, 12.0). In our example, we use the default values for the two other models used, so they are called without passing any argument.","category":"page"},{"location":"simulation/first_simulation/","page":"Simple Simulation","title":"Simple Simulation","text":"Then we provide the initializations for some variables in the status keyword argument: Rₛ = 13.747, sky_fraction = 1.0, PPFD = 1500.0, d = 0.03. The variables that need to be initialized depend on the combination of models we are using. One way to know which variables should be instantiated is to use to_initialize:","category":"page"},{"location":"simulation/first_simulation/","page":"Simple Simulation","title":"Simple Simulation","text":"to_initialize(\n    ModelList(\n        energy_balance = Monteith(),\n        photosynthesis = Fvcb(),\n        stomatal_conductance = Medlyn(0.03, 12.0)\n    )\n)","category":"page"},{"location":"simulation/first_simulation/","page":"Simple Simulation","title":"Simple Simulation","text":"It returns a list of the variables that need to be initialized for each independent process. If some processes are coupled, it only returns the ones from the root process that calls the others.","category":"page"},{"location":"simulation/first_simulation/","page":"Simple Simulation","title":"Simple Simulation","text":"When we know which parameters have to be initialized, we can get the list of the parameters for each model by looking at its field names:","category":"page"},{"location":"simulation/first_simulation/","page":"Simple Simulation","title":"Simple Simulation","text":"fieldnames(Fvcb)","category":"page"},{"location":"simulation/first_simulation/","page":"Simple Simulation","title":"Simple Simulation","text":"Or look into the documentation of the structure (e.g. ?Fvcb) or the implementation of the model (e.g. ?photosynthesis) to get more information such as the units.","category":"page"},{"location":"simulation/first_simulation/#energy_balance","page":"Simple Simulation","title":"energy_balance","text":"","category":"section"},{"location":"simulation/first_simulation/","page":"Simple Simulation","title":"Simple Simulation","text":"We use energy_balance! to simulate the energy balance. Then Julia chooses the right implementation for each model using multiple dispatch. In our case it uses the Monteith implementation for PlantBiophysics.energy_balance!_, Fvcb for PlantBiophysics.photosynthesis!_ and Medlyn for PlantBiophysics.gs_closure. The photosynthesis and the stomatal conductance models are called directly from the energy balance function.","category":"page"},{"location":"simulation/first_simulation/#Results","page":"Simple Simulation","title":"Results","text":"","category":"section"},{"location":"simulation/first_simulation/","page":"Simple Simulation","title":"Simple Simulation","text":"The results of the computations are stored in the status field of the model list. To get the value for each given variable we can just index the object like so:","category":"page"},{"location":"simulation/first_simulation/","page":"Simple Simulation","title":"Simple Simulation","text":"leaf[:A]","category":"page"},{"location":"simulation/first_simulation/","page":"Simple Simulation","title":"Simple Simulation","text":"Another simpler way to get all the results at once is to use DataFrame:","category":"page"},{"location":"simulation/first_simulation/","page":"Simple Simulation","title":"Simple Simulation","text":"DataFrame(leaf)","category":"page"},{"location":"simulation/first_simulation/","page":"Simple Simulation","title":"Simple Simulation","text":"Or simply by printing the object:","category":"page"},{"location":"simulation/first_simulation/","page":"Simple Simulation","title":"Simple Simulation","text":"leaf","category":"page"},{"location":"simulation/first_simulation/#Wrap-up","page":"Simple Simulation","title":"Wrap-up","text":"","category":"section"},{"location":"simulation/first_simulation/","page":"Simple Simulation","title":"Simple Simulation","text":"We learned to run a simple simulation, along with some details about the functions, the structures and some helper functions.","category":"page"},{"location":"simulation/first_simulation/","page":"Simple Simulation","title":"Simple Simulation","text":"Next, we'll learn to run a simulation over several time-steps.","category":"page"},{"location":"concepts/package_design/#Package-design","page":"Design","title":"Package design","text":"","category":"section"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"PlantBiophysics.jl is designed to ease the computations of biophysical processes in plants and other objects. It is part of the Archimed platform, so it shares the same ontology (same concepts and terms).","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"using PlantBiophysics","category":"page"},{"location":"concepts/package_design/#Definitions","page":"Design","title":"Definitions","text":"","category":"section"},{"location":"concepts/package_design/#Processes","page":"Design","title":"Processes","text":"","category":"section"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"A process in this package defines a biological or a physical phenomena. At this time PlantBiophysics.jl implements four processes:","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"light interception\nenergy balance\nphotosynthesis\nstomatal conductance","category":"page"},{"location":"concepts/package_design/#Models","page":"Design","title":"Models","text":"","category":"section"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"A process is simulated using a particular implementation of a model. Each model is implemented using a structure that lists the parameters of the model. For example, PlantBiophysics provides the Beer structure for the implementation of the Beer-Lambert law of light extinction.","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"You can see the list of available models for each process in the sections about the models, e.g. here for photosynthesis.","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"Models can use three types of entries in PlantBiophysics.jl:","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"Parameters\nMeteorological information\nVariables","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"Parameters are constant values that are used by the model to compute its outputs. Meteorological information are values that are provided by the user and are used as inputs to the model. Variables are computed by the model and can optionally be initialized before the simulation.","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"Users can choose which model is used to simulate a process using the ModelList structure. ModelList is also used to store the values of the parameters, and to initialize variables.","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"Let's instantiate a ModelList with the Beer-Lambert model of light extinction. The model is implemented with the Beer structure and has only one parameter: the extinction coefficient (k).","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"ModelList(light_extinction = Beer(0.5))","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"What happened here? We provided an instance of a model to the process it simulates. The model is provided as a keyword argument to the ModelList, with the process name given as the keyword, and the instantiated model as the value. The keyword must match exactly the name of the process it simulates, e.g. photosynthesis for the photosynthesis process, because it is used to match the models to the function than run its simulation. The four processes provided by default are implement with the following functions: light_interception, energy_balance, photosynthesis and stomatal_conductance.","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"tip: Tip\nWe see that we only instantiated the ModelList for the light extinction process. What about the others like photosynthesis or energy balance ? Well there is no need to give models if we have no intention to simulate them.","category":"page"},{"location":"concepts/package_design/#Parameters","page":"Design","title":"Parameters","text":"","category":"section"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"A parameter is a constant value that is used by a model to compute its outputs. For example, the Beer-Lambert model uses the extinction coefficient (k) to compute the light extinction. The Beer-Lambert model is implemented with the Beer structure, which has only one field: k. We can see that using fieldnames:","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"fieldnames(Beer)","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"Some models are shipped with default values for their parameters. For example, the Monteith model that simulates the energy balance has a default value for all its parameters. Here are the parameter names:","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"fieldnames(Monteith)","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"And their default values:","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"Monteith()","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"But if we need to change the values of some parameters, we can usually give them as keyword arguments:","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"Monteith(maxiter = 100, ΔT = 0.001)","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"Perfect! Now is that all we need to make a simulation? Well, usually no. Models need parameters, but also input variables.","category":"page"},{"location":"concepts/package_design/#Variables-(inputs,-outputs)","page":"Design","title":"Variables (inputs, outputs)","text":"","category":"section"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"Variables are computed by models, and can optionally be initialized before the simulation. Variables and their values are stored in the ModelList, and are initialized automatically or manually.","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"Hence, ModelList objects store two fields:","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"fieldnames(ModelList)","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"The first field is a list of models associated to the processes they simulate. The second, :status, is used to hold all inputs and outputs of our models, called variables. For example the Beer model needs the leaf area index (LAI, m^{2} \\cdot m^{-2}) to run.","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"We can see which variables are needed as inputs using inputs:","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"inputs(Beer(0.5))","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"We can also see the outputs of the model using outputs:","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"outputs(Beer(0.5))","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"If we instantiate a ModelList with the Beer-Lambert model, we can see that the :status field has two variables: LAI and PPDF. The first is an input, the second an output.","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"m = ModelList(light_extinction = Beer(0.5))\nkeys(m.status)","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"To know which variables should be initialized, we can use to_initialize:","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"m = ModelList(light_extinction = Beer(0.5))\n\nto_initialize(m)","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"Their values are uninitialized though (hence the warnings):","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"(m[:LAI], m[:PPFD])","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"Uninitialized variables have the value returned by typemin(), e.g. -Inf for Float64:","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"typemin(Float64)","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"tip: Tip\nPrefer using to_initialize rather than inputs to check which variables should be initialized. inputs returns the variables that are needed by the model to run, but to_initialize returns the variables that are needed by the model to run and that are not initialized. Also to_initialize is more clever when coupling models (see below).","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"We can initialize the variables by providing their values to the status at instantiation:","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"m = ModelList(light_extinction = Beer(0.5), status = (LAI = 2.0,))","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"Or after instantiation using init_status!:","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"m = ModelList(light_extinction = Beer(0.5))\n\ninit_status!(m, LAI = 2.0)","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"We can check if a component is correctly initialized using is_initialized:","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"is_initialized(m)","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"Some variables are inputs of models, but outputs of other models. When we couple models, we have to be careful to initialize only the variables that are not computed.","category":"page"},{"location":"concepts/package_design/#Climate-forcing","page":"Design","title":"Climate forcing","text":"","category":"section"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"To make a simulation, we usually need the climatic/meteorological conditions measured close to the object or component.","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"The package provides its own data structures to declare those conditions, and to pre-compute other required variables. The most basic data structure is a type called Atmosphere, which defines the conditions for a steady-state, i.e. the conditions are considered at equilibrium. Another structure is available to define different consecutive time-steps: Weather.","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"The mandatory variables to provide for an Atmosphere are: T (air temperature in °C), Rh (relative humidity, 0-1), Wind (the wind speed in m s-1) and P (the air pressure in kPa). We can declare such conditions like so:","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"meteo = Atmosphere(T = 20.0, Wind = 1.0, P = 101.3, Rh = 0.65)","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"More details are available from the dedicated section.","category":"page"},{"location":"concepts/package_design/#Simulation","page":"Design","title":"Simulation","text":"","category":"section"},{"location":"concepts/package_design/#Simulation-of-processes","page":"Design","title":"Simulation of processes","text":"","category":"section"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"Making a simulation is rather simple, we simply use the function with the name of the process we want to simulate:","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"stomatal_conductance for the stomatal conductance\nphotosynthesis for the photosynthesis\nenergy_balance for the energy balance\nlight_interception for the energy balance","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"note: Note\nAll functions exist in a mutating and a non-mutating form. Just add ! at the end of the name of the function (e.g. energy_balance!) to use the mutating form for speed! 🚀","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"The call to the function is the same whatever the model you choose for simulating the process. This is some magic allowed by Julia! A call to a function is made as follows:","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"stomatal_conductance(model_list, meteo)\nphotosynthesis(model_list, meteo)\nenergy_balance(model_list, meteo)\nlight_interception(model_list, meteo)","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"The first argument is the model list (see ModelList), and the second defines the micro-climatic conditions (more details below in Climate forcing).","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"The ModelList should be initialized for the given process before calling the function. See Variables (inputs, outputs) for more details.","category":"page"},{"location":"concepts/package_design/#Example-simulation","page":"Design","title":"Example simulation","text":"","category":"section"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"For example we can simulate the stomatal_conductance of a leaf like so:","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"meteo = Atmosphere(T = 20.0, Wind = 1.0, P = 101.3, Rh = 0.65)\n\nleaf = ModelList(\n    stomatal_conductance = Medlyn(0.03, 12.0),\n    status = (A = 20.0, Cₛ = 400.0, Dₗ = meteo.VPD)\n)\n\nstomatal_conductance!(leaf, meteo)\n\nleaf[:Gₛ]","category":"page"},{"location":"concepts/package_design/#Functions-forms","page":"Design","title":"Functions forms","text":"","category":"section"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"Each function has three forms. For example energy_balance has:","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"energy_balance: the generic function that makes a copy of the modelList and return the status (not very efficient but easy to use)\nenergy_balance!: the faster generic function. But we need to extract the outputs from the component models after the simulation (note the ! at the end of the name)\nenergy_balance!_: the internal implementation with a method for each model. PlantBiophysics then uses multiple dispatch to choose the right method based on the model type. If you don't plan to make your own models, you'll never have to use it 🙂","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"If you want to implement your own models, please read this section in full first, and then Model implementation.","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"note: Note\nThe functions can be applied on a model list only if there is a model parameterized for its corresponding process.","category":"page"},{"location":"concepts/package_design/#Outputs","page":"Design","title":"Outputs","text":"","category":"section"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"The status field of a ModelList is used to initialize the variables before simulation and then to keep track of their values during and after the simulation. We can extract the simulation outputs of a model list using the status function.","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"note: Note\nGetting the status is only useful when using the mutating version of the function (e.g. energy_balance!), as the non-mutating version returns the output directly.","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"The status can either be a Status if simulating only one time-step, or a TimeSteps if several.","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"Let's look at the status of our previous simulated leaf:","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"status(leaf)","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"We can extract the value of one variable using the status function, e.g. for the assimilation:","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"status(leaf, :Gₛ)","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"Or similarly using the dot syntax:","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"leaf.status.Gₛ","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"Or much simpler (and recommended), by indexing directly the model list:","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"leaf[:Gₛ]","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"Another simple way to get the results is to transform the outputs into a DataFrame:","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"DataFrame(leaf)","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"note: Note\nThe output from DataFrame is adapted to the kind of simulation you did: one row per time-steps, and per component models if you simulated several.","category":"page"},{"location":"concepts/package_design/#Model-coupling","page":"Design","title":"Model coupling","text":"","category":"section"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"A model can work either independently or in conjunction with other models. For example a stomatal conductance model is often associated with a photosynthesis model, i.e. it is called from the photosynthesis model.","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"Several models proposed in PlantBiophysics.jl are coupled models. For example, the Fvcb structure is the implementation of the Farquhar–von Caemmerer–Berry model for C3 photosynthesis (Farquhar et al., 1980; von Caemmerer and Farquhar, 1981) that is coupled to a stomatal conductance model. Hence, using Fvcb requires a stomatal conductance model in the ModelList to compute Gₛ.","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"We can use the stomatal conductance model of Medlyn et al. (2011) as an example to compute it. It is implemented with the Medlyn structure. We can then create a ModelList with the two models:","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"ModelList(photosynthesis = Fvcb(), stomatal_conductance = Medlyn(0.03, 12.0))","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"Now this instantiation returns some warnings saying we need to initialize some variables.","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"The Fvcb model requires the following variables as inputs:","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"inputs(Fvcb())","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"And the Medlyn model requires the following variables:","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"inputs(Medlyn(0.03, 12.0))","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"We see that A is needed as input of Medlyn, but we also know that it is an output of Fvcb. This is why we prefer using to_initialize instead of inputs, because it returns only the variables that need to be initialized, considering that some inputs are duplicated between models, and some are computed by other models (they are outputs of a model):","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"to_initialize(photosynthesis = Fvcb(), stomatal_conductance = Medlyn(0.03, 12.0))","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"We can also use it directly on a model list after instantiation:","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"m = ModelList(\n    photosynthesis = Fvcb(),\n    stomatal_conductance = Medlyn(0.03, 12.0)\n)\n\nto_initialize(m)","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"The most straightforward way of initializing a model list is by giving the initializations to the status keyword argument during instantiation:","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"m = ModelList(\n    photosynthesis = Fvcb(),\n    stomatal_conductance = Medlyn(0.03, 12.0),\n    status = (Tₗ = 25.0, PPFD = 1000.0, Cₛ = 400.0, Dₗ = 0.82)\n)","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"Our component models structure is now fully parameterized and initialized for a simulation!","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"Let's simulate it:","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"photosynthesis(m)","category":"page"},{"location":"concepts/package_design/","page":"Design","title":"Design","text":"tip: Tip\nThe models included in the package are listed in their own section, i.e. here for photosynthesis. Users are also encouraged to develop their own models by following the instructions in the corresponding section.","category":"page"},{"location":"extending/implement_a_model/#model_implementation_page","page":"Implement a model","title":"Model implementation in 5 minutes","text":"","category":"section"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"using PlantBiophysics\nimport PlantBiophysics: inputs_, outputs_, photosynthesis!, stomatal_conductance!","category":"page"},{"location":"extending/implement_a_model/#Introduction","page":"Implement a model","title":"Introduction","text":"","category":"section"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"PlantBiophysics.jl was designed to make new model implementation very simple. So let's learn about how to implement your own model with a simple example: implementing a new stomatal conductance model.","category":"page"},{"location":"extending/implement_a_model/#Inspiration","page":"Implement a model","title":"Inspiration","text":"","category":"section"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"If you want to implement a new model, the best way to do it is to start from another implementation.","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"So for a photosynthesis model, I advise you to look at the implementation of the FvCB model in this Julia file: src/photosynthesis/FvCB.jl.","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"For an energy balance model you can look at the implementation of the Monteith model in src/energy/Monteith.jl, and for a stomatal conductance model in src/conductances/stomatal/medlyn.jl.","category":"page"},{"location":"extending/implement_a_model/#Requirements","page":"Implement a model","title":"Requirements","text":"","category":"section"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"In those files, you'll see that in order to implement a new model you'll need to implement:","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"a structure, used to hold the parameter values and to dispatch to the right method\nthe actual model, developed as a method for the process it simulates\nsome helper functions used by the package and/or the users","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"Let's take a simple example with a new model for the stomatal conductance: the Ball and Berry model.","category":"page"},{"location":"extending/implement_a_model/#Example:-the-Ball-and-Berry-model","page":"Implement a model","title":"Example: the Ball and Berry model","text":"","category":"section"},{"location":"extending/implement_a_model/#The-structure","page":"Implement a model","title":"The structure","text":"","category":"section"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"The first thing to do is to implement a structure for your model.","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"The purpose of the structure is two-fold:","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"hold the parameter values\ndispatch to the right method when calling the process function","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"Let's take the stomatal conductance model from Medlyn et al. (2011) as a starting point. The structure of the model (or type) is defined as follows:","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"struct Medlyn{T} <: AbstractGsModel\n    g0::T\n    g1::T\n    gs_min::T\nend","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"The first line defines the name of the model (Medlyn), with the types that will be used for the parameters. Then it defines the structure as a subtype of AbstractGsModel. This step is very important as it tells to the package what kind of model it is. In this case, it is a stomatal conductance model, that's why we use AbstractGsModel. We would use AbstractAModel instead for a photosynthesis model, AbstractEnergyModel for an energy balance model, and AbstractInterceptionModel for a light interception model.","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"For another example, the Fvcb model is a subtype of AbstractAModel. You can check this using:","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"Fvcb <: AbstractAModel","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"Then comes the parameters names, and their types. The type of the parameters is always forced to be of the same type in our example. This is done using the T notation as follows:","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"we say that our structure Medlyn is a parameterized struct by putting T in between brackets after the name of the struct\nWe put ::T after our parameter names in the struct. This way Julia knows that all parameters must be of same type T.","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"The T is completely free, you can use any other letter or word instead. If you have parameters that you know will be of different types, you can either force their type, or make them parameterizable too, using another letter, e.g.:","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"struct YourStruct{T,S} <: AbstractGsModel\n    g0::T\n    g1::T\n    gs_min::T\n    integer_param::S\nend","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"Parameterized types are very useful because they let the user choose the type of the parameters, and potentially dispatch on them.","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"But why not forcing the type such as the following:","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"struct YourStruct <: AbstractGsModel\n    g0::Float64\n    g1::Float64\n    gs_min::Float64\n    integer_param::Int\nend","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"Well, you can do that. But you'll lose a lot of the magic Julia has to offer this way.","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"For example a user could use the Particles type from MonteCarloMeasurements.jl to make automatic uncertainty propagation, and this is only possible if the type is parameterizable.","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"So let's implement a new structure for our stomatal conductance model:","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"struct BandB{T} <: AbstractGsModel\n    g0::T\n    g1::T\n    gs_min::T\nend","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"Well, the only thing we had to change relative to the one from Medlyn is the name, easy! This is because both models share the same parameters.","category":"page"},{"location":"extending/implement_a_model/#The-method","page":"Implement a model","title":"The method","text":"","category":"section"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"The models are implemented in a function named after the process and a \"!_\" as a suffix. The exclamation point is used in Julia to tell users the function is mutating, i.e. it modifies its input.","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"Your implementation should always modify the input status and return nothing. This ensures that models compute fast. The \"_\" suffix is used to tell users that this is the internal implementation.","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"Remember that PlantBiophysics only exports the generic functions of the processes to users because they are the one that handles every other details, such as checking that the object is correctly initialized, and applying the computations over objects and time-steps. This is nice because as a developer you don't have to deal with those details, and you can just concentrate on your implementation.","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"However, you have to remember that if your model calls another one, you'll have to use the internal implementation directly to avoid the overheads of the generic functions (you don't want all these checks).","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"So if you want to implement a new photosynthesis model, you have to make your own method for the photosynthesis!_ function. But here we are trying to implement a new stomatal conductance model. Well, this one is the most complicated process to implement actually, because it is computed on two steps: stomatal_conductance!_ and gs_closure.","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"gs_closure is the function that actually implements the conductance model, but only the stomatal closure part. This one does not modify its input, it computes the result and returns it. Then stomatal_conductance!_ uses this output to compute the stomatal conductance. But why not implementing just stomatal_conductance!_? Because gs_closure is used elsewhere, usually in the photosynthesis model, before actually computing the stomatal conductance.","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"So in practice, the stomatal_conductance!_ implementation is rather generic and will not be modified by developers. They will rather implement their method for gs_closure, that will be used automatically by stomatal_conductance!_.","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"warning: Warning\nWe need to import all the functions we need to use or extend, so Julia knows we are extending the methods from PlantBiophysics, and not defining our own functions. To do so, you can do e.g.: import PlantBiophysics: inputs_, outputs_, photosynthesis!, stomatal_conductance!","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"So let's do it! Here is our own implementation of the stomatal closure for a ModelList component models:","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"function gs_closure(::BandB, models, status, meteo)\n    models.stomatal_conductance.g1 * meteo.Rh / status.Cₛ\nend","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"The first argument (::BandB) means this method will only execute when the function is called with a first argument that is of type BandB. This is our way of telling Julia that this method is implementing the BandB algorithm.","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"An important thing to note is that our variables are stored in different structures:","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"models: the models parameters\nmeteo: the micro-climatic conditions\nstatus: the input and output variables of the models","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"note: Note\nThe micro-meteorological conditions are always given for one time-step inside the models methods, so they are always of Atmosphere type. The Weather type of conditions are handled earlier by the generic functions.","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"OK ! So that's it ? Almost. One last thing to do is to define a method for inputs/outputs so that PlantBiophysics knows which variables are needed for our model, and which it computes. Remember that the actual model is implemented for stomatal_conductance!_, so we have to tell PlantBiophysics which ones are needed, and what are their default value:","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"Inputs: :Rh and :Cₛ for our specific implementation, and :A for stomatal_conductance!_\nOutputs: our model does not compute any new variable, and stomatal_conductance!_ computes, well, :Gₛ","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"Here is how we actually implement our methods:","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"function inputs_(::BandB)\n    (Rh=-999.99,Cₛ=-999.99,A=-999.99)\nend\n\nfunction outputs_(::BandB)\n    (Gₛ=-999.99,)\nend","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"Note that both function end with an \"\". This is because these functions are internal, they will not be called by the users directly. Users will use inputs and outputs instead, which call `inputsandoutputs_`, but stripping out the default values.","category":"page"},{"location":"extending/implement_a_model/#The-utility-functions","page":"Implement a model","title":"The utility functions","text":"","category":"section"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"Before running a simulation, you can do a little bit more for your implementation (optional).","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"First, you can add a method for type promotion:","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"function BandB(g0,g1,gs_min)\n    BandB(promote(g0,g1,gs_min))\nend","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"This allows your user to instantiate your model parameters using different types of inputs. For example they may use this:","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"BandB(0,2.0,0.001)","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"You don't see a problem? Well your users won't either.","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"Here's the problem: we use parametric types, and when we declared our structure, we said that all fields in our type will share the same type. This is the T here:","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"struct BandB{T} <: AbstractGsModel\n    g0::T\n    g1::T\n    gs_min::T\nend","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"And in our example above, the user provides 0 as the first argument. Well, this is an integer, not a floating point number like the two others. That's were the promotion is really helpful. It will convert all your inputs to the same type. In our example it will convert 0 to 0.0.","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"A second thing also is to help your user with default values for some parameters (if applicable). For example a user will almost never change the value of the minimum stomatal conductance. So we can provide a default value like so:","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"BandB(g0,g1) = BandB(g0, g1, oftype(0.001, g0))","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"Now the user can call BandB with only two values, and the third one will be set to 0.001.","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"Another useful thing to provide to the user is the ability to instantiate your model type with keyword values. You can do it by adding the following method:","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"BandB(;g0,g1) = BandB(g0,g1,oftype(g0,0.001))","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"Did you notice the ; before the argument? It tells Julia that we want those arguments provided as keywords, so now we can call BandB like this:","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"BandB(g0 = 0.0, g1 = 2.0)","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"This is nice, but again, completely optional.","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"One more thing to implement is a method for the dep function that tells PlantBiophysics which processes (and models) are needed for your model to run (i.e. if your model is coupled to another model).","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"Our example model does not call another model, so we don't need to implement it. But we can look at e.g. the implementation for Fvcb to see how it works:","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"dep(::Fvcb) = (stomatal_conductance=AbstractGsModel,)","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"Here we say to PlantBiophysics that the Fvcb model needs a model of type AbstractGsModel in the stomatal conductance process.","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"The last optional thing to implement is a method for the eltype function:","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"Base.eltype(x::BandB{T}) where {T} = T","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"This one helps Julia to know the type of the elements in your structure, and make it faster.","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"OK that's it! Now you have a full new implementation of the stomatal conductance model! I hope it was clear and you understood everything. If you think some sections could be improved, you can make a PR on this doc, or open an issue so I can improve it.","category":"page"},{"location":"extending/implement_a_model/#More-details-on-model-implementations","page":"Implement a model","title":"More details on model implementations","text":"","category":"section"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"Here is another example with a different approach in case you need it. So let's change our example from the stomatal conductance to the photosynthesis. For example Fvcb implements the model or Farquhar et al. (1980) to simulate the photosynthesis of C3 plants.","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"When the user calls the photosynthesis function, or its mutating version photosynthesis!, PlantBiophysics looks into the component models type, and the type of the model implemented for the photosynthesis, in this case, Fvcb.","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"Then, it calls the internal function photosynthesis!_ that will dispatch the computation to the method that implements the model. This method looks like this:","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"function photosynthesis!_(::Fvcb, models, status, meteo, constants=Constants())\n\n    [...]\n\nend","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"Where [...] represent the lines of code implementing the model (not shown here).","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"The interesting bit is in the function declaration at the top. This is where all the magic happens. The first argument let Julia know that this is the method for computing the photosynthesis using the Fvcb model.","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"Now if we look again at what are the fields of a ModelList:","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"fieldnames(ModelList)","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"we see that it has two fields: models and status. The first one is a list of models named after the process they simulate. So if we want to simulate the photosynthesis with the Fvcb model, our ModelList needs an instance of the Fvcb structure for the photosynthesis process, like so:","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"leaf = ModelList(photosynthesis = Fvcb());\nleaf.models.photosynthesis","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"The photosynthesis field is then used as the first argument to the call to the internal function photosynthesis!_, which will call the method that implements Fvcb, because our photosynthesis field is of type Fvcb.","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"So if we want to implement our own model for the photosynthesis, we could do:","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"# Import the functions we need so we can add our own methods:\nimport PlantBiophysics: inputs_, outputs_, photosynthesis!_, stomatal_conductance!_\n\n# Make the struct to hold the parameters:\nstruct OurModel{T} <: AbstractAModel\n    a::T\n    b::T\n    c::T\nend\n\n# Instantiate the struct with default values + kwargs:\nfunction OurModel(;a = 400.0, b = 1000.0, c = 1.5)\n    OurModel(promote(a,b)...)\nend\n\n# Define inputs:\nfunction inputs_(::OurModel)\n    (PPFD=-999.99, Tₗ=-999.99, Cₛ=-999.99)\nend\n\n# Define outputs:\nfunction outputs_(::OurModel)\n    (A=-999.99, Gₛ=-999.99)\nend\n\n# Tells Julia what is the type of elements:\nBase.eltype(x::OurModel{T}) where {T} = T\n\n# Implement the photosynthesis model:\nfunction photosynthesis!_(::OurModel, models, status, meteo, constants=Constants())\n\n    status.A =\n        status.Cₛ / models.photosynthesis.a +\n        status.PPFD / models.photosynthesis.b +\n        status.Tₗ / models.photosynthesis.c\n\n    stomatal_conductance!_(models.stomatal_conductance, models, status, meteo)\nend","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"🥳 And that's it! 🥳","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"We have a new model for photosynthesis that is coupled with the stomatal conductance.","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"warning: Warning\nThis is a dummy photosynthesis model. Don't use it, it is very wrong biologically speaking!","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"note: Note\nNotice that we compute the stomatal conductance directly using the internal function stomatal_conductance!_. We do this for speed, because the generic function stomatal_conductance! does some checks on its inputs every time it is called, while stomatal_conductance!_ only does the computation. We don't need the extra checks because they are already made when calling photosynthesis!.","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"Now if we want to make a simulation, we can simply do:","category":"page"},{"location":"extending/implement_a_model/","page":"Implement a model","title":"Implement a model","text":"meteo = Atmosphere(T = 20.0, Wind = 1.0, P = 101.3, Rh = 0.65)\n\nleaf =\n    ModelList(\n        photosynthesis = OurModel(1.0, 2.0, 3.0),\n        stomatal_conductance = Medlyn(0.03, 12.0),\n        status = (Tₗ = 25.0, PPFD = 1000.0, Cₛ = 400.0, Dₗ = meteo.VPD)\n    )\n# NB: we need  to initalise Tₗ, PPFD and Cₛ\n\nphotosynthesis!(leaf,meteo,Constants())\nleaf[:A]","category":"page"},{"location":"simulation/uncertainty_propagation/#uncertainty_propagation_page","page":"Tutorial: Uncertainty propagation","title":"Uncertainty propagation","text":"","category":"section"},{"location":"simulation/uncertainty_propagation/","page":"Tutorial: Uncertainty propagation","title":"Tutorial: Uncertainty propagation","text":"using PlantBiophysics\nusing MonteCarloMeasurements\nusing Plots\nusing Dates\n# Toggle the use of a comparison function (using `mean`):\nunsafe_comparisons(true)\nmeteo = Atmosphere(T = 22.0 ± 0.1, Wind = 0.8333 ± 0.1, P = 101.325 ± 1., Rh = 0.4490995 ± 0.02, Cₐ = 400. ± 1.)\n\nleaf = ModelList(\n        energy_balance = Monteith(),\n        photosynthesis = Fvcb(),\n        stomatal_conductance = Medlyn(0.03, 12.0),\n        status = (Rₛ = 13.747 ± 1., sky_fraction = 1.0, PPFD = 1500.0 ± 1., d = 0.03 ± 0.001),\n        type_promotion = Dict(Float64 => Particles{Float64,2000})\n    )","category":"page"},{"location":"simulation/uncertainty_propagation/#Introduction","page":"Tutorial: Uncertainty propagation","title":"Introduction","text":"","category":"section"},{"location":"simulation/uncertainty_propagation/","page":"Tutorial: Uncertainty propagation","title":"Tutorial: Uncertainty propagation","text":"We can very easily propagate uncertainties in all computations in PlantBiophysics using either Measurements.jl or MonteCarloMeasurements.jl. So instead of using classic data types such as Float64 for parameter values, micro-meteorological conditions or initial values, we use a specific data type that propagates distributions rather than scalars.","category":"page"},{"location":"simulation/uncertainty_propagation/","page":"Tutorial: Uncertainty propagation","title":"Tutorial: Uncertainty propagation","text":"Measurements.jl provides a very fast way to propagate errors, but is only suited for linear processes. MonteCarloMeasurements.jl in the other hand is slower but provides a better estimation of the propagation for non-linear processes. The main idea of Monte Carlo methods is to simulate the problem for a large number of times, randomly drawing inputs in the distributions specified by the user. We then get distributions as outputs (and means/standard deviations).","category":"page"},{"location":"simulation/uncertainty_propagation/#Example:-normal-distributions","page":"Tutorial: Uncertainty propagation","title":"Example: normal distributions","text":"","category":"section"},{"location":"simulation/uncertainty_propagation/","page":"Tutorial: Uncertainty propagation","title":"Tutorial: Uncertainty propagation","text":"Let's first import all packages we need:","category":"page"},{"location":"simulation/uncertainty_propagation/","page":"Tutorial: Uncertainty propagation","title":"Tutorial: Uncertainty propagation","text":"using PlantBiophysics, MonteCarloMeasurements, Plots, Dates\n# Toggle the use of a comparison function (using `mean`):\nunsafe_comparisons(true)","category":"page"},{"location":"simulation/uncertainty_propagation/","page":"Tutorial: Uncertainty propagation","title":"Tutorial: Uncertainty propagation","text":"We can use the μ ± σ notation for the values of the parameters and micro-meteorological conditions to create a Gaussian distribution (of mean μ and standard deviation σ):","category":"page"},{"location":"simulation/uncertainty_propagation/","page":"Tutorial: Uncertainty propagation","title":"Tutorial: Uncertainty propagation","text":"meteo = Atmosphere(T = 22.0 ± 0.1, Wind = 0.8333 ± 0.1, P = 101.325 ± 1., Rh = 0.4490995 ± 0.02, Cₐ = 400. ± 1.)\n\nleaf = ModelList(\n        energy_balance = Monteith(),\n        photosynthesis = Fvcb(),\n        stomatal_conductance = Medlyn(0.03, 12.0),\n        status = (Rₛ = 13.747 ± 1., sky_fraction = 1.0, PPFD = 1500.0 ± 1., d = 0.03 ± 0.001),\n        type_promotion = Dict(Float64 => Particles{Float64,2000})\n    )","category":"page"},{"location":"simulation/uncertainty_propagation/","page":"Tutorial: Uncertainty propagation","title":"Tutorial: Uncertainty propagation","text":"Now our parameters and conditions are not scalars, but Particles, which are n sampled values in the μ ± σ distributions. By default n = 2000.","category":"page"},{"location":"simulation/uncertainty_propagation/","page":"Tutorial: Uncertainty propagation","title":"Tutorial: Uncertainty propagation","text":"We can now run our simulation:","category":"page"},{"location":"simulation/uncertainty_propagation/","page":"Tutorial: Uncertainty propagation","title":"Tutorial: Uncertainty propagation","text":"energy_balance!(leaf,meteo)","category":"page"},{"location":"simulation/uncertainty_propagation/","page":"Tutorial: Uncertainty propagation","title":"Tutorial: Uncertainty propagation","text":"And now we can plot the resulting inputs/outputs values:","category":"page"},{"location":"simulation/uncertainty_propagation/","page":"Tutorial: Uncertainty propagation","title":"Tutorial: Uncertainty propagation","text":"p1 = plot(meteo.T,legend=:false,xlabel=\"Tₐ (°C)\",ylabel=\"density\",dpi=300,title=\"(a)\",titlefontsize=9)\np2 = plot(leaf.status.d,legend=:false,xlabel=\"d (m)\",ylabel=\"density\",dpi=300,title=\"(b)\",titlefontsize=9)\np3 = plot(leaf.status.Tₗ,legend=:false,xlabel=\"Tₗ (°C)\",ylabel=\"density\",dpi=300,title=\"(c)\",titlefontsize=9)\np4 = plot(leaf.status.A,legend=:false,xlabel=\"A\",ylabel=\"density\",dpi=300,title=\"(d)\",titlefontsize=9)\nplot(p1,p2,p3,p4,dpi=300,titleloc=:right)\nsavefig(\"distributions-example-gaussian.svg\"); nothing #hide","category":"page"},{"location":"simulation/uncertainty_propagation/","page":"Tutorial: Uncertainty propagation","title":"Tutorial: Uncertainty propagation","text":"(Image: )","category":"page"},{"location":"simulation/uncertainty_propagation/#Example:-other-distributions","page":"Tutorial: Uncertainty propagation","title":"Example: other distributions","text":"","category":"section"},{"location":"simulation/uncertainty_propagation/","page":"Tutorial: Uncertainty propagation","title":"Tutorial: Uncertainty propagation","text":"It is also possible to use other types of distributions. For example the a .. b notation will set a uniform distribution in the interval [a,b]). For others distributions, you can use the package Distributions.jl to use any other distributions (Binomial, Gamma, etc...) as a ⊠ Gamma(1) (i.e. a plus a Gamma distribution of parameter 1) or a ⊠ Exponential(1) (i.e. an exponential distribution of parameter 1 with a as factor).","category":"page"},{"location":"simulation/uncertainty_propagation/","page":"Tutorial: Uncertainty propagation","title":"Tutorial: Uncertainty propagation","text":"Here's an example usage:","category":"page"},{"location":"simulation/uncertainty_propagation/","page":"Tutorial: Uncertainty propagation","title":"Tutorial: Uncertainty propagation","text":"# ⊞ \\boxplus\n# ⊠ \\boxtimes\n\nmeteo = Atmosphere(T = 15.0 .. 18.0, Wind = 0.8333 ± 0.1, P = 101.325 ± 1., Rh = 0.4490995 ± 0.02, Cₐ = 400. ± 1.)\n\nleaf = ModelList(\n        energy_balance = Monteith(),\n        photosynthesis = Fvcb(),\n        stomatal_conductance = Medlyn(0.03, 12.0),\n        status = (Rₛ = 13.747 ± 1., sky_fraction = 1.0, PPFD = 1500.0 ± 1., d = 0.01 .. 0.03),\n        type_promotion = Dict(Float64 => Particles{Float64,2000})\n    )\n\nenergy_balance!(leaf,meteo)\n\np1 = plot(meteo.T,legend=:false,xlabel=\"Tₐ (°C)\",ylabel=\"density\",dpi=300,title=\"(a)\",titlefontsize=9)\np2 = plot(leaf.status.d,legend=:false,xlabel=\"d (m)\",ylabel=\"density\",dpi=300,title=\"(b)\",titlefontsize=9)\np3 = plot(leaf.status.Tₗ,legend=:false,xlabel=\"Tₗ (°C)\",ylabel=\"density\",dpi=300,title=\"(c)\",titlefontsize=9)\np4 = plot(leaf.status.A,legend=:false,xlabel=\"A\",ylabel=\"density\",dpi=300,title=\"(d)\",titlefontsize=9)\nplot(p1,p2,p3,p4,dpi=300,titleloc=:right)\nsavefig(\"distributions-example-various.svg\"); nothing #hide","category":"page"},{"location":"simulation/uncertainty_propagation/","page":"Tutorial: Uncertainty propagation","title":"Tutorial: Uncertainty propagation","text":"(Image: )","category":"page"},{"location":"simulation/uncertainty_propagation/#Plotting","page":"Tutorial: Uncertainty propagation","title":"Plotting","text":"","category":"section"},{"location":"simulation/uncertainty_propagation/","page":"Tutorial: Uncertainty propagation","title":"Tutorial: Uncertainty propagation","text":"Plotting values of type MonteCarloMeasurements.jl is allowed using plot as it were scalars. It will plot confidence interval too. You can also check specific MonteCarloMeasurements.jl function ribbonplot (more details in part Plotting of the package documentation).","category":"page"},{"location":"simulation/uncertainty_propagation/","page":"Tutorial: Uncertainty propagation","title":"Tutorial: Uncertainty propagation","text":"For example we can simulate a leaf energy balance over consecutive time-steps:","category":"page"},{"location":"simulation/uncertainty_propagation/","page":"Tutorial: Uncertainty propagation","title":"Tutorial: Uncertainty propagation","text":"weather = read_weather(\n    joinpath(dirname(dirname(pathof(PlantBiophysics))), \"test\", \"inputs\", \"meteo.csv\"),\n    :temperature => :T,\n    :relativeHumidity => (x -> x ./ 100) => :Rh,\n    :wind => :Wind,\n    :atmosphereCO2_ppm => :Cₐ,\n    date_format = DateFormat(\"yyyy/mm/dd\")\n)\n\nleaf = ModelList(\n        energy_balance = Monteith(),\n        photosynthesis = Fvcb(),\n        stomatal_conductance = Medlyn(0.03, 12.0),\n        status = (Rₛ = 13.747 ± 2., sky_fraction = 0.6..1.0, PPFD = 1500.0 ± 100., d = [0.03,0.03,0.03]),\n        type_promotion = Dict(Float64 => Particles{Float64,2000})\n    )\n\nenergy_balance!(leaf, weather)\n\nribbonplot(weather[:date], leaf[:Tₗ], alpha = 0.2, ylab = \"Leaf Temperature\", xlab = \"Time\")\nsavefig(\"error-ribbon.svg\"); nothing #hide","category":"page"},{"location":"simulation/uncertainty_propagation/","page":"Tutorial: Uncertainty propagation","title":"Tutorial: Uncertainty propagation","text":"(Image: )","category":"page"},{"location":"simulation/uncertainty_propagation/#Performance","page":"Tutorial: Uncertainty propagation","title":"Performance","text":"","category":"section"},{"location":"simulation/uncertainty_propagation/","page":"Tutorial: Uncertainty propagation","title":"Tutorial: Uncertainty propagation","text":"Monte Carlo results are highly dependent on the number of simulations given by the number of particles n. But keep in mind that the result of an uncertainty propagation with a low n is more unreliable than with a higher n.","category":"page"},{"location":"simulation/mtg_simulation/#Simulation-on-a-plant-(MTG)","page":"Whole-plant simulation","title":"Simulation on a plant (MTG)","text":"","category":"section"},{"location":"simulation/mtg_simulation/","page":"Whole-plant simulation","title":"Whole-plant simulation","text":"using PlantBiophysics, MultiScaleTreeGraph, PlantGeom, CairoMakie, Dates\n\nmtg = read_opf(joinpath(dirname(dirname(pathof(PlantBiophysics))), \"test\", \"inputs\", \"scene\", \"opf\", \"coffee.opf\"))\n\nweather = read_weather(\n    joinpath(dirname(dirname(pathof(PlantBiophysics))), \"test\", \"inputs\", \"meteo.csv\"),\n    :temperature => :T,\n    :relativeHumidity => (x -> x ./ 100) => :Rh,\n    :wind => :Wind,\n    :atmosphereCO2_ppm => :Cₐ,\n    date_format = DateFormat(\"yyyy/mm/dd\")\n)\n\nmodels = read_model(joinpath(dirname(dirname(pathof(PlantBiophysics))), \"test\", \"inputs\", \"models\", \"plant_coffee.yml\"));\n\ntransform!(\n    mtg,\n    [:Ra_PAR_f, :Ra_NIR_f] => ((x, y) -> x + y) => :Rₛ,\n    :Ra_PAR_f => (x -> x * 4.57) => :PPFD,\n    (x -> 0.3) => :d,\n    ignore_nothing = true\n)\n\nenergy_balance!(mtg, models, weather)\n\ntransform!(\n    mtg,\n    :Tₗ => (x -> x[1]) => :Tₗ_1,\n    ignore_nothing = true\n)","category":"page"},{"location":"simulation/mtg_simulation/#Multiscale-Tree-Graph","page":"Whole-plant simulation","title":"Multiscale Tree Graph","text":"","category":"section"},{"location":"simulation/mtg_simulation/","page":"Whole-plant simulation","title":"Whole-plant simulation","text":"The Multiscale Tree Graph, or MTG for short is a data structure that helps represent a plant topology, and optionally its geometry.","category":"page"},{"location":"simulation/mtg_simulation/","page":"Whole-plant simulation","title":"Whole-plant simulation","text":"The OPF is a file format that stores an MTG with geometry onto the disk. Let's read an example OPF using read_opf(), a function from the PlantGeom package:","category":"page"},{"location":"simulation/mtg_simulation/","page":"Whole-plant simulation","title":"Whole-plant simulation","text":"using PlantGeom\nmtg = read_opf(joinpath(dirname(dirname(pathof(PlantBiophysics))), \"test\", \"inputs\", \"scene\", \"opf\", \"coffee.opf\"))","category":"page"},{"location":"simulation/mtg_simulation/","page":"Whole-plant simulation","title":"Whole-plant simulation","text":"The result is an MTG defining the plant at several scales using a tree graph. You can read the introduction to the MTG from MultiScaleTreeGraph.jl's documentation if you want to understand how it works.","category":"page"},{"location":"simulation/mtg_simulation/","page":"Whole-plant simulation","title":"Whole-plant simulation","text":"Now let's import the weather data:","category":"page"},{"location":"simulation/mtg_simulation/","page":"Whole-plant simulation","title":"Whole-plant simulation","text":"using PlantBiophysics\n\nweather = read_weather(\n    joinpath(dirname(dirname(pathof(PlantBiophysics))), \"test\", \"inputs\", \"meteo.csv\"),\n    :temperature => :T,\n    :relativeHumidity => (x -> x ./ 100) => :Rh,\n    :wind => :Wind,\n    :atmosphereCO2_ppm => :Cₐ,\n    date_format = DateFormat(\"yyyy/mm/dd\")\n)","category":"page"},{"location":"simulation/mtg_simulation/","page":"Whole-plant simulation","title":"Whole-plant simulation","text":"And read the models associated to the MTG from a YAML file:","category":"page"},{"location":"simulation/mtg_simulation/","page":"Whole-plant simulation","title":"Whole-plant simulation","text":"file = joinpath(dirname(dirname(pathof(PlantBiophysics))), \"test\", \"inputs\", \"models\", \"plant_coffee.yml\")\nmodels = read_model(file)","category":"page"},{"location":"simulation/mtg_simulation/","page":"Whole-plant simulation","title":"Whole-plant simulation","text":"Let's check which variables we need to provide for our model configuration:","category":"page"},{"location":"simulation/mtg_simulation/","page":"Whole-plant simulation","title":"Whole-plant simulation","text":"to_initialize(models)","category":"page"},{"location":"simulation/mtg_simulation/","page":"Whole-plant simulation","title":"Whole-plant simulation","text":"OK, only the \"Leaf\" component must be initialized before computation for the coupled energy balance, with the shortwave radiation Rₛ, the visible sky fraction seen by the object sky_fraction, the characteristic dimension of the object d and the Photosynthetically active Photon Flux Density PPFD. We are in luck, we used Archimed-ϕ to compute the radiation interception of each organ in the example coffee plant we are using. So the only thing we need is to transform the variables given by Archimed-ϕ in each node to compute the ones we need. We use transform! from MultiScaleTreeGraph.jl to traverse the MTG and compute the right variable for each node:","category":"page"},{"location":"simulation/mtg_simulation/","page":"Whole-plant simulation","title":"Whole-plant simulation","text":"using MultiScaleTreeGraph\n\ntransform!(\n    mtg,\n    [:Ra_PAR_f, :Ra_NIR_f] => ((x, y) -> x + y) => :Rₛ,\n    :Ra_PAR_f => (x -> x * 4.57) => :PPFD,\n    (x -> 0.3) => :d,\n    ignore_nothing = true\n)","category":"page"},{"location":"simulation/mtg_simulation/","page":"Whole-plant simulation","title":"Whole-plant simulation","text":"The design of MultiScaleTreeGraph.transform! is very close to the one adopted by DataFrames. It helps us compute new variables (or attributes) from others, modify their units or rename them. Here we compute Rₛ from the sum of Ra_PAR_f (absorbed radiation flux in the PAR) and Ra_NIR_f (...in the NIR), PPFD from Ra_PAR_f using the conversion between W cdot m^2 to μmol cdot m^-2 cdot s^-1, and d using a constant value of 0.3 m. Note that sky_fraction is already computed for each node with the right units thanks to Archimed-ϕ, so no need to transform it.","category":"page"},{"location":"simulation/mtg_simulation/","page":"Whole-plant simulation","title":"Whole-plant simulation","text":"Then PlantBiophysics.jl takes care of the rest and simulates the energy balance over each time-step:","category":"page"},{"location":"simulation/mtg_simulation/","page":"Whole-plant simulation","title":"Whole-plant simulation","text":"energy_balance!(mtg, models, weather)","category":"page"},{"location":"simulation/mtg_simulation/","page":"Whole-plant simulation","title":"Whole-plant simulation","text":"We can visualize the outputs in 3D using PlantGeom's viz function. To do so we have to extract the time step we want to use for coloring the organs. For example if we want to color the plant according to the value of the temperature from the first time-step, we would do:","category":"page"},{"location":"simulation/mtg_simulation/","page":"Whole-plant simulation","title":"Whole-plant simulation","text":"transform!(\n    mtg,\n    :Tₗ => (x -> x[1]) => :Tₗ_1,\n    ignore_nothing = true\n)","category":"page"},{"location":"simulation/mtg_simulation/","page":"Whole-plant simulation","title":"Whole-plant simulation","text":"And then actually plotting it:","category":"page"},{"location":"simulation/mtg_simulation/","page":"Whole-plant simulation","title":"Whole-plant simulation","text":"f, ax, p = viz(mtg, color = :Tₗ_1)\ncolorbar(f[1, 2], p)\nf","category":"page"},{"location":"variables/#Variables","page":"Variables","title":"Variables","text":"","category":"section"},{"location":"variables/","page":"Variables","title":"Variables","text":"There are so many variables in PlantBiophysics that it can be difficult to remember what is their name, what are they describing or what is their unit.","category":"page"},{"location":"variables/","page":"Variables","title":"Variables","text":"To get all variables used in PlantBiophysics, you can use variables without any argument:","category":"page"},{"location":"variables/","page":"Variables","title":"Variables","text":"using PlantBiophysics\nvariables()","category":"page"},{"location":"models/gs/#gs_page","page":"Stomatal conductance","title":"Stomatal conductance","text":"","category":"section"},{"location":"models/gs/","page":"Stomatal conductance","title":"Stomatal conductance","text":"using PlantBiophysics","category":"page"},{"location":"models/gs/","page":"Stomatal conductance","title":"Stomatal conductance","text":"The stomatal conductance defines the conductance for CO₂ between the atmosphere (the air around the leaf) and the air inside the stomata. The stomatal conductance to CO₂ and H₂O are related by a constant (see gsc_to_gsw).","category":"page"},{"location":"models/gs/#Models-overview","page":"Stomatal conductance","title":"Models overview","text":"","category":"section"},{"location":"models/gs/","page":"Stomatal conductance","title":"Stomatal conductance","text":"The stomatal conductance (Gₛ, mol_CO_2 cdot m^-2 cdot s^-1) can be simulated using stomatal_conductance! or stomatal_conductance. Several models are available to simulate it:","category":"page"},{"location":"models/gs/","page":"Stomatal conductance","title":"Stomatal conductance","text":"Medlyn: an implementation of the Medlyn et al. (2011) model\nConstantGs: a model to force a constant value for Gₛ","category":"page"},{"location":"models/gs/","page":"Stomatal conductance","title":"Stomatal conductance","text":"You can choose which model to use by passing a component with a stomatal conductance model set to one of the struct above.","category":"page"},{"location":"models/gs/","page":"Stomatal conductance","title":"Stomatal conductance","text":"For example, you can \"simulate\" a constant assimilation for a leaf using the following:","category":"page"},{"location":"models/gs/","page":"Stomatal conductance","title":"Stomatal conductance","text":"meteo = Atmosphere(T = 20.0, Wind = 1.0, P = 101.3, Rh = 0.65)\n\nleaf = ModelList(stomatal_conductance = ConstantGs(Gₛ = 0.1))\n\nstomatal_conductance!(leaf,meteo)\nleaf[:Gₛ]","category":"page"},{"location":"models/gs/#Medlyn","page":"Stomatal conductance","title":"Medlyn","text":"","category":"section"},{"location":"models/gs/#param_medlyn","page":"Stomatal conductance","title":"Parameters","text":"","category":"section"},{"location":"models/gs/","page":"Stomatal conductance","title":"Stomatal conductance","text":"The Medlyn model has the following set of parameters:","category":"page"},{"location":"models/gs/","page":"Stomatal conductance","title":"Stomatal conductance","text":"g0: intercept (mol_CO_2 cdot m^-2 cdot s^-1).\ng1: slope.\ngs_min = 0.001: residual conductance (mol_CO_2 cdot m^-2 cdot s^-1).","category":"page"},{"location":"models/gs/","page":"Stomatal conductance","title":"Stomatal conductance","text":"note: Note\nWe consider the residual conductance being different from g0 because in practice g0 can be negative when fitting real-world data.","category":"page"},{"location":"models/gs/#inputs_medlyn","page":"Stomatal conductance","title":"Input variables","text":"","category":"section"},{"location":"models/gs/","page":"Stomatal conductance","title":"Stomatal conductance","text":"The Medlyn model needs three input variables:","category":"page"},{"location":"models/gs/","page":"Stomatal conductance","title":"Stomatal conductance","text":"inputs(Medlyn(0.1, 8.0))","category":"page"},{"location":"models/gs/","page":"Stomatal conductance","title":"Stomatal conductance","text":"Dₗ (kPa) is the difference between the vapour pressure at the leaf surface and the saturated air vapour pressure, Cₛ (ppm) is the stomatal CO₂ concentration, and A is the CO₂ assimilation rate (μmol cdot m^-2 cdot s^-1)","category":"page"},{"location":"models/gs/#exemple_medlyn","page":"Stomatal conductance","title":"Example","text":"","category":"section"},{"location":"models/gs/","page":"Stomatal conductance","title":"Stomatal conductance","text":"Here is an example usage:","category":"page"},{"location":"models/gs/","page":"Stomatal conductance","title":"Stomatal conductance","text":"meteo = Atmosphere(T = 20.0, Wind = 1.0, P = 101.3, Rh = 0.65)\n\nleaf = ModelList(\n    stomatal_conductance = Medlyn(0.03, 12.0),\n    status = (A = 20.0, Cₛ = 400.0, Dₗ = meteo.VPD)\n)\n\nstomatal_conductance!(leaf,meteo)\n\nleaf","category":"page"},{"location":"models/gs/","page":"Stomatal conductance","title":"Stomatal conductance","text":"note: Note\nYou can use inputs to get the variables needed for a given model, e.g.: inputs(Medlyn(0.03, 12.0))","category":"page"},{"location":"models/gs/#ConstantGs","page":"Stomatal conductance","title":"ConstantGs","text":"","category":"section"},{"location":"models/gs/#param_constantgs","page":"Stomatal conductance","title":"Parameters","text":"","category":"section"},{"location":"models/gs/","page":"Stomatal conductance","title":"Stomatal conductance","text":"The ConstantGs model has the following set of parameters:","category":"page"},{"location":"models/gs/","page":"Stomatal conductance","title":"Stomatal conductance","text":"g0 = 0.0: intercept (mol_CO_2 cdot m^-2 cdot s^-1).\nGₛ: forced stomatal conductance.","category":"page"},{"location":"models/gs/","page":"Stomatal conductance","title":"Stomatal conductance","text":"This model computes the stomatal conductance using a constant value for the stomatal conductance.","category":"page"},{"location":"models/gs/","page":"Stomatal conductance","title":"Stomatal conductance","text":"g0 is only provided for compatibility with photosynthesis models such as Fvcb that needs a partial computation of the stomatal conductance at one point:","category":"page"},{"location":"models/gs/","page":"Stomatal conductance","title":"Stomatal conductance","text":"(Gₛ - g0) / A","category":"page"},{"location":"models/gs/#inputs_constantgs","page":"Stomatal conductance","title":"Input variables","text":"","category":"section"},{"location":"models/gs/","page":"Stomatal conductance","title":"Stomatal conductance","text":"ConstantGs doesn't need any input variables.","category":"page"},{"location":"models/gs/#exemple_constantgs","page":"Stomatal conductance","title":"Example","text":"","category":"section"},{"location":"models/gs/","page":"Stomatal conductance","title":"Stomatal conductance","text":"Here is an example usage:","category":"page"},{"location":"models/gs/","page":"Stomatal conductance","title":"Stomatal conductance","text":"meteo = Atmosphere(T = 20.0, Wind = 1.0, P = 101.3, Rh = 0.65)\n\nleaf = ModelList(stomatal_conductance = ConstantGs(Gₛ = 0.1))\n\nstomatal_conductance!(leaf,meteo)\nleaf[:Gₛ]","category":"page"},{"location":"models/gs/#References","page":"Stomatal conductance","title":"References","text":"","category":"section"},{"location":"models/gs/","page":"Stomatal conductance","title":"Stomatal conductance","text":"Medlyn, B. E., E. Dreyer, D. Ellsworth, M. Forstreuter, P. C. Harley, M. U. F. Kirschbaum, X. Le Roux, et al. 2002. « Temperature response of parameters of a biochemically based model of photosynthesis. II. A review of experimental data ». Plant, Cell & Environment 25 (9): 1167‑79. https://doi.org/10.1046/j.1365-3040.2002.00891.x.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = PlantBiophysics","category":"page"},{"location":"#PlantBiophysics.jl","page":"Home","title":"PlantBiophysics.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Stable) (Image: Dev) (Image: Build Status) (Image: Code Style: Blue) (Image: ColPrac: Contributor's Guide on Collaborative Practices for Community Packages)","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PlantBiophysics is a package to deal with biophysical processes of plants such as photosynthesis, conductances for heat, water vapor and CO₂, latent, sensible energy fluxes, net radiation and temperature. It has two main use-cases:","category":"page"},{"location":"","page":"Home","title":"Home","text":"fit the parameters of the models using the generic fit function\nsimulate the processes using the corresponding models","category":"page"},{"location":"","page":"Home","title":"Home","text":"The benefits of PlantBiophysics over existing tools are mainly:","category":"page"},{"location":"","page":"Home","title":"Home","text":"(very) fast yet interactive\neasily scalable: from single objects to whole scenes, one time step to many.\neasily extendable: make your own model, PlantBiophysics handles its coupling with others automatically\ncomposable: use Unitful to propagate units, use MonteCarloMeasurements.jl to propagate measurement error","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install the package, enter the Julia package manager mode by pressing ] in the REPL, and execute the following command:","category":"page"},{"location":"","page":"Home","title":"Home","text":"add PlantBiophysics","category":"page"},{"location":"","page":"Home","title":"Home","text":"To use the package, execute this command from the Julia REPL:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using PlantBiophysics","category":"page"},{"location":"#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"See the First simulation section for examples.","category":"page"},{"location":"#Similar-projects","page":"Home","title":"Similar projects","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A lot of similar tools exist in the wild, pick yours from this list:","category":"page"},{"location":"","page":"Home","title":"Home","text":"photosynthesis R package\nplantecophys R package\nLeafGasExchange R package\nMAESPA, not really a tool, rather a model, but the implementations of the models are heavily inspired by MAESPA.","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you develop such tools and it is not on the list, please make a PR or contact me so we can add it! 😃","category":"page"},{"location":"#Related-references","page":"Home","title":"Related references","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Baldocchi, Dennis. 1994. « An analytical solution for coupled leaf photosynthesis and stomatal conductance models ». Tree Physiology 14 (7-8‑9): 1069‑79. https://doi.org/10.1093/treephys/14.7-8-9.1069.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Duursma, R. A., et B. E. Medlyn. 2012. « MAESPA: a model to study interactions between water limitation, environmental drivers and vegetation function at tree and stand levels, with an example application to [CO2] × drought interactions ». Geoscientific Model Development 5 (4): 919‑40. https://doi.org/10.5194/gmd-5-919-2012.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Farquhar, G. D., S. von von Caemmerer, et J. A. Berry. 1980. « A biochemical model of photosynthetic CO2 assimilation in leaves of C3 species ». Planta 149 (1): 78‑90.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Leuning, R., F. M. Kelliher, DGG de Pury, et E.-D. SCHULZE. 1995. « Leaf nitrogen, photosynthesis, conductance and transpiration: scaling from leaves to canopies ». Plant, Cell & Environment 18 (10): 1183‑1200.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Medlyn, B. E., D. Loustau, et S. Delzon. 2002. « Temperature response of parameters of a biochemically based model of photosynthesis. I. Seasonal changes in mature maritime pine (Pinus pinaster Ait.) ». Plant, Cell & Environment 25 (9): 1155‑65.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Medlyn, B. E., E. Dreyer, D. Ellsworth, M. Forstreuter, P. C. Harley, M. U. F. Kirschbaum, X. Le Roux, et al. 2002. « Temperature response of parameters of a biochemically based model of photosynthesis. II. A review of experimental data ». Plant, Cell & Environment 25 (9): 1167‑79. https://doi.org/10.1046/j.1365-3040.2002.00891.x.","category":"page"},{"location":"models/energy_balance/#nrj_page","page":"Energy balance","title":"Energy balance","text":"","category":"section"},{"location":"models/energy_balance/","page":"Energy balance","title":"Energy balance","text":"using PlantBiophysics","category":"page"},{"location":"models/energy_balance/","page":"Energy balance","title":"Energy balance","text":"The energy balance is the process of computing the balance between influx and outflux of energy in all its form: latent and sensible heat, thermal radiation...","category":"page"},{"location":"models/energy_balance/#Models-overview","page":"Energy balance","title":"Models overview","text":"","category":"section"},{"location":"models/energy_balance/","page":"Energy balance","title":"Energy balance","text":"The energy balance can be simulated using energy_balance! or energy_balance. Only one model is available to-date:","category":"page"},{"location":"models/energy_balance/","page":"Energy balance","title":"Energy balance","text":"Monteith: an implementation of the Monteith et al. (2013) model","category":"page"},{"location":"models/energy_balance/","page":"Energy balance","title":"Energy balance","text":"You can choose which model to use by passing a model list with an energy balance model set to one of the structs above:","category":"page"},{"location":"models/energy_balance/","page":"Energy balance","title":"Energy balance","text":"meteo = Atmosphere(T = 20.0, Wind = 1.0, P = 101.3, Rh = 0.65)\n\nleaf = ModelList(\n    energy_balance = Monteith(),\n    photosynthesis = Fvcb(),\n    stomatal_conductance = Medlyn(0.03, 12.0),\n    status = (Rₛ = 13.747, sky_fraction = 1.0, PPFD = 1500.0, d = 0.03)\n)\n\nenergy_balance!(leaf,meteo)\nleaf[:Rn]","category":"page"},{"location":"models/energy_balance/#Monteith","page":"Energy balance","title":"Monteith","text":"","category":"section"},{"location":"models/energy_balance/","page":"Energy balance","title":"Energy balance","text":"Leaf energy balance according to Monteith and Unsworth (2013), and corrigendum from Schymanski et al. (2017). The computation is close to the one from the MAESPA model (Duursma et al., 2012, Vezy et al., 2018) here. The leaf temperature is computed iteratively to close the energy balance using the mass flux (~ Rn - λE).","category":"page"},{"location":"models/energy_balance/#param_monteith","page":"Energy balance","title":"Parameters","text":"","category":"section"},{"location":"models/energy_balance/","page":"Energy balance","title":"Energy balance","text":"The Monteith model has the following set of parameters:","category":"page"},{"location":"models/energy_balance/","page":"Energy balance","title":"Energy balance","text":"aₛₕ = 2: number of faces of the object that exchange sensible heat fluxes\naₛᵥ = 1: number of faces of the object that exchange latent heat fluxes (hypostomatous => 1)\nε = 0.955: emissivity of the object\nmaxiter = 10: maximal number of iterations allowed to close the energy balance\nΔT = 0.01 (°C): maximum difference in object temperature between two iterations to consider convergence","category":"page"},{"location":"models/energy_balance/","page":"Energy balance","title":"Energy balance","text":"note: Note\nObjects are surfaces, not volumes, so the maximum number of faces is two.","category":"page"},{"location":"models/energy_balance/#inputs_monteith","page":"Energy balance","title":"Input variables","text":"","category":"section"},{"location":"models/energy_balance/","page":"Energy balance","title":"Energy balance","text":"The Monteith model needs three input variables:","category":"page"},{"location":"models/energy_balance/","page":"Energy balance","title":"Energy balance","text":"inputs(Monteith())","category":"page"},{"location":"models/energy_balance/","page":"Energy balance","title":"Energy balance","text":"Rₛ (W m-2) is the net shortwave radiation (PAR + NIR), most often computed from a light interception model. sky_fraction (0-2) is the fraction of sky the object is viewing compared to everything else. It is given for the 360° viewing angle, i.e. for both faces. d (m) is the characteristic dimension, e.g. the leaf width (see eq. 10.9 from Monteith and Unsworth, 2013).","category":"page"},{"location":"models/energy_balance/","page":"Energy balance","title":"Energy balance","text":"note: Note\nsky_fraction is equal to 2 if the leaf is viewing sky only (e.g. in a controlled chamber with lights everywhere), 1 if the leaf is e.g. up on the canopy where the upper side of the leaf sees sky, and the bottom side sees soil and other components, or less than 1 if it is partly shaded. sky_fraction is used to compute the thermal radiation exchanges. Everything except the sky is considered at the same temperature than the object. This simplification makes the computations very fast, but less precise, especially when another object has a very different temperature.","category":"page"},{"location":"models/energy_balance/#outputs_monteith","page":"Energy balance","title":"Output variables","text":"","category":"section"},{"location":"models/energy_balance/","page":"Energy balance","title":"Energy balance","text":"The Monteith model computes a lot of variables, mainly because it is also coupled to a photosynthesis model, itself potentially coupled to a stomatal conductance model:","category":"page"},{"location":"models/energy_balance/","page":"Energy balance","title":"Energy balance","text":"outputs(Monteith())","category":"page"},{"location":"models/energy_balance/","page":"Energy balance","title":"Energy balance","text":"Tₗ (°C) is the component temperature, Rn (W cdot m^-2) is the net radiation (PAR + NIR + TIR), Rₗₗ (W cdot m^-2) is the longwave radiation (TIR), H (W cdot m^-2) is the sensible heat flux, λE (W cdot m^-2) is the latent heat flux, Cₛ (ppm) is the stomatal CO₂ concentration, Cᵢ (ppm) is the intercellular CO₂ concentration, A (μmol cdot m^-2 cdot s^-1) is the CO₂ assimilation rate, Gₛ (mol_CO_2 cdot m^-2 cdot s^-1) the stomatal conductance, Gbₕ (m cdot s^-1) the boundary layer conductance to heat, Dₗ (kPa) the difference between the vapour pressure at the leaf surface and the saturated air vapour pressure, Gbc (mol_CO_2 cdot m^-2 cdot s^-1) the boundary layer conductance to CO₂, and iter the number of iterations to reach convergence.","category":"page"},{"location":"models/energy_balance/","page":"Energy balance","title":"Energy balance","text":"note: Note\nThe output variables depends on the models we are using for photosynthesis and stomatal conductance.","category":"page"},{"location":"models/energy_balance/","page":"Energy balance","title":"Energy balance","text":"note: Note\nConvergence is reached whenever the difference in the component temperature (Tₗ, °C) between two time-steps is lower than ΔT.","category":"page"},{"location":"models/energy_balance/#exemple_monteith","page":"Energy balance","title":"Example","text":"","category":"section"},{"location":"models/energy_balance/","page":"Energy balance","title":"Energy balance","text":"Here is an example usage:","category":"page"},{"location":"models/energy_balance/","page":"Energy balance","title":"Energy balance","text":"meteo = Atmosphere(T = 22.0, Wind = 0.8333, P = 101.325, Rh = 0.4490995)\n\nleaf = ModelList(\n    energy_balance = Monteith(),\n    photosynthesis = Fvcb(),\n    stomatal_conductance = Medlyn(0.03, 12.0),\n    status = (Rₛ = 13.747, sky_fraction = 1.0, PPFD = 1500.0, d = 0.03)\n)\n\nleaf","category":"page"},{"location":"models/energy_balance/","page":"Energy balance","title":"Energy balance","text":"The Monteith model implementation can be tested on the data provided by Schymanski et al. (2017). Here is a figure comparing our implementation and the data:","category":"page"},{"location":"models/energy_balance/","page":"Energy balance","title":"Energy balance","text":"include(\"./schymanski.jl\")","category":"page"},{"location":"models/energy_balance/","page":"Energy balance","title":"Energy balance","text":"(Image: )","category":"page"},{"location":"models/energy_balance/","page":"Energy balance","title":"Energy balance","text":"Figure 1. Energy flux measured on an artificial leaf (points) or simulated from its digital twin (lines). Data from Schymanski et al. (2017) figure 6a. The code to reproduce this figure is available in this file.","category":"page"},{"location":"models/energy_balance/#References","page":"Energy balance","title":"References","text":"","category":"section"},{"location":"models/energy_balance/","page":"Energy balance","title":"Energy balance","text":"Duursma, R. A., et B. E. Medlyn. 2012. « MAESPA: a model to study interactions between water limitation, environmental drivers and vegetation function at tree and stand levels, with an example application to [CO2] × drought interactions ». Geoscientific Model Development 5 (4): 919‑40. https://doi.org/10.5194/gmd-5-919-2012.","category":"page"},{"location":"models/energy_balance/","page":"Energy balance","title":"Energy balance","text":"Monteith, John L., et Mike H. Unsworth. 2013. « Chapter 13 - Steady-State Heat Balance: (i) Water Surfaces, Soil, and Vegetation ». In Principles of Environmental Physics (Fourth Edition), edited by John L. Monteith et Mike H. Unsworth, 217‑47. Boston: Academic Press.","category":"page"},{"location":"models/energy_balance/","page":"Energy balance","title":"Energy balance","text":"Schymanski, Stanislaus J., et Dani Or. 2017. « Leaf-Scale Experiments Reveal an Important Omission in the Penman–Monteith Equation ». Hydrology and Earth System Sciences 21 (2): 685‑706. https://doi.org/10.5194/hess-21-685-2017.","category":"page"},{"location":"models/energy_balance/","page":"Energy balance","title":"Energy balance","text":"Vezy, Rémi, Mathias Christina, Olivier Roupsard, Yann Nouvellon, Remko Duursma, Belinda Medlyn, Maxime Soma, et al. 2018. « Measuring and modelling energy partitioning in canopies of varying complexity using MAESPA model ». Agricultural and Forest Meteorology 253‑254 (printemps): 203‑17. https://doi.org/10.1016/j.agrformet.2018.02.005.","category":"page"}]
}
